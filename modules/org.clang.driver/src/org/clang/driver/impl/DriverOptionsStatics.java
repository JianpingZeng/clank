/**
 * This file was converted to Java from the original LLVM source file. The original
 * source file follows the LLVM Release License, outlined below.
 * 
 * ==============================================================================
 * LLVM Release License
 * ==============================================================================
 * University of Illinois/NCSA
 * Open Source License
 * 
 * Copyright (c) 2003-2017 University of Illinois at Urbana-Champaign.
 * All rights reserved.
 * 
 * Developed by:
 * 
 *     LLVM Team
 * 
 *     University of Illinois at Urbana-Champaign
 * 
 *     http://llvm.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal with
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimers.
 * 
 *     * Redistributions in binary form must reproduce the above copyright notice
 *       this list of conditions and the following disclaimers in the
 *       documentation and/or other materials provided with the distribution.
 * 
 *     * Neither the names of the LLVM Team, University of Illinois at
 *       Urbana-Champaign, nor the names of its contributors may be used to
 *       endorse or promote products derived from this Software without specific
 *       prior written permission.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
 * SOFTWARE.
 * 
 * ==============================================================================
 * Copyrights and Licenses for Third Party Software Distributed with LLVM:
 * ==============================================================================
 * The LLVM software contains code written by third parties.  Such software will
 * have its own individual LICENSE.TXT file in the directory in which it appears.
 * This file will describe the copyrights, license, and restrictions which apply
 * to that code.
 * 
 * The disclaimer of warranty in the University of Illinois Open Source License
 * applies to all code in the LLVM Distribution, and nothing in any of the
 * other licenses gives permission to use the names of the LLVM Team or the
 * University of Illinois to endorse or promote products derived from this
 * Software.
 * 
 * The following pieces of software have additional or alternate copyrights,
 * licenses, and/or restrictions:
 * 
 * Program             Directory
 * -------             ---------
 * Autoconf            llvm/autoconf
 *                     llvm/projects/ModuleMaker/autoconf
 * Google Test         llvm/utils/unittest/googletest
 * OpenBSD regex       llvm/lib/Support/{reg*, COPYRIGHT.regex}
 * pyyaml tests        llvm/test/YAMLParser/{*.data, LICENSE.TXT}
 * ARM contributions   llvm/lib/Target/ARM/LICENSE.TXT
 * md5 contributions   llvm/lib/Support/MD5.cpp llvm/include/llvm/Support/MD5.h
 */

package org.clang.driver.impl;

import org.clank.support.*;
import org.clank.support.aliases.*;
import static org.clank.support.NativePointer.*;
import org.llvm.option.*;
;
import static org.clang.driver.OptionsGlobals.*;
import static org.clang.driver.options.ClangFlags;
import org.clang.driver.options.ID;
import static org.clank.support.Unsigned.*;

//<editor-fold defaultstate="collapsed" desc="static type DriverOptionsStatics">
@Converted(kind = Converted.Kind.MANUAL_SEMANTIC/*split field initializer*/,
 cmd="jclank.sh -java-options=${SPUTNIK}/contrib/JConvert/llvmToClankType -print -java-options=${SPUTNIK}/modules/org.clang.driver/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/Driver/DriverOptions.cpp -nm=_ZL9InfoTable; -static-type=DriverOptionsStatics")
//</editor-fold>
public final class DriverOptionsStatics {

private static final int NUM = 1977;
//<editor-fold defaultstate="collapsed" desc="InfoTable">
@Converted(kind = Converted.Kind.MANUAL_SEMANTIC/*split field initializer*/,
 source = "${LLVM_SRC}/llvm/tools/clang/lib/Driver/DriverOptions.cpp", line = 23,
 FQN="InfoTable", NM="_ZL9InfoTable",
 cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.driver/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/Driver/DriverOptions.cpp -nm=_ZL9InfoTable")
//</editor-fold>
public static final/*const*/ OptTable.Info InfoTable[/*1977*/];

static {
    InfoTable = join(createInfo_1(), createInfo_2());
    assert NativeTrace.registerArrayWithImmutableContent(InfoTable, "DriverOptionsStatics.InfoTable");
    assert InfoTable.length == NUM : "3.9 expects " + NUM + " vs. " + InfoTable.length;
}

private static OptTable.Info[] join(OptTable.Info[]... arrays) {
    int cnt = 0;
    for (OptTable.Info[] a : arrays) {
        cnt += a.length;
    }
    OptTable.Info[] result = new OptTable.Info[cnt];
    int curr = 0;
    for (OptTable.Info[] a : arrays) {
        // redirect to gather statistics
        NativePointer.copy$Object(a, 0, result, curr, a.length);
        curr += a.length;
    }
    return result;
}

private static OptTable.Info[] createInfo_1() {
  return new /*const*/ OptTable.Info [/*1977*/]  {
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<action group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Action_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<CompileOnly group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_CompileOnly_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<I group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_I_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<M group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_M_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<O group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_O_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<R group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_R_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<R (with value) group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_R_value_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_R_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<T group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_T_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<W group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_W_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<W (with value) group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_W_value_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("</M group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_M_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("</volatile group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_volatile_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang-cl options>"), $("CL.EXE COMPATIBILITY OPTIONS"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang-cl compile-only options>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_compile_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang-cl ignored options>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_ignored_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang i group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_clang_i_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang ignored f group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_clang_ignored_f_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang_ignored_gcc_optimization_f_Group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang ignored m group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_clang_ignored_m_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<d group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_d_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<f group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_f_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<f (clang-only) group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_f_clang_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<gN group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gN_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<gTune group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gTune_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<g group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_g_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<g flags group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_g_flags_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("gfortran Group"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gfortran_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<ggdbN group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ggdbN_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_gN_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<i group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_i_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang internal options>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_internal_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang debug/development internal options>"), $("DEBUG/DEVELOPMENT OPTIONS"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_internal_debug_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_internal_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<clang driver internal options>"), $("DRIVER OPTIONS"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_internal_driver_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_internal_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<m group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<aarch64 features group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m_aarch64_Features_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<amdgpu features group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m_amdgpu_Features_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<arm features group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m_arm_Features_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<hexagon features group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m_hexagon_Features_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<m libc group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m_libc_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<ppc features group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m_ppc_Features_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<wasm features group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m_wasm_Features_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<x86 features group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m_x86_Features_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<opencl group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_opencl_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<pedantic group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_pedantic_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<reserved libs group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_reserved_lib_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info((/*const*/type$ptr<char$ptr>/*char P const P*/ )null, $("<u group>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_u_Group.getValue(), $uint2uchar(Option.OptionClass.GroupClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  
  //////////
  // Options
  new OptTable.Info(prefix_0, $("<input>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_INPUT.getValue(), $uint2uchar(Option.OptionClass.InputClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_0, $("<unknown>"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_UNKNOWN.getValue(), $uint2uchar(Option.OptionClass.UnknownClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("###"), $("Print (but do not run) the commands to run for this compilation"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__HASH_HASH_HASH.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $QMARK, $("Display available options"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_QUESTION.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_help.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("A-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_A_DASH.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("add-plugin"), $("Use the named plugin action in addition to the default action"), $("<name>"), ID.OPT_add_plugin.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("AI"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_AI.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("all-warnings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__all_warnings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_Wall.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("all_load"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_all__load.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("allowable_client"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_allowable__client.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("analyze-auto"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__analyze_auto.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyze-function="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyze_function_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_analyze_function.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyze-function"), $("Run analysis on specific function"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyze_function.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("analyze-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_analyze_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-checker-help"), $("Display the list of analyzer checkers that are available"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_checker_help.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-checker="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_checker_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_analyzer_checker.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-checker"), $("Choose analyzer checkers to enable"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_checker.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-config"), $("Choose analyzer options to enable"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_config.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-constraints="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_constraints_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_analyzer_constraints.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-constraints"), $("Source Code Analysis - Symbolic Constraint Engines"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_constraints.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-disable-all-checks"), $("Disable all static analyzer checks"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_disable_all_checks.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-disable-checker="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_disable_checker_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_analyzer_disable_checker.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-disable-checker"), $("Choose analyzer checkers to disable"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_disable_checker.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-disable-retry-exhausted"), $("Do not re-analyze paths leading to exhausted nodes with a different strategy (may decrease code coverage)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_disable_retry_exhausted.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-display-progress"), $("Emit verbose output about the analyzer's progress"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_display_progress.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-eagerly-assume"), $("Eagerly assume the truth/falseness of some symbolic constraints"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_eagerly_assume.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-inline-max-stack-depth="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_inline_max_stack_depth_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_analyzer_inline_max_stack_depth.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-inline-max-stack-depth"), $("Bound on stack depth while inlining (4 by default)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_inline_max_stack_depth.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-inlining-mode="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_inlining_mode_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_analyzer_inlining_mode.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-inlining-mode"), $("Specify the function selection heuristic used during inlining"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_inlining_mode.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-max-loop"), $("The maximum number of times the analyzer will go through a loop"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_max_loop.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("analyzer-no-default-checks"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__analyzer_no_default_checks.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-opt-analyze-headers"), $("Force the static analyzer to analyze functions defined in header files"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_opt_analyze_headers.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-opt-analyze-nested-blocks"), $("Analyze the definitions of blocks in addition to functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_opt_analyze_nested_blocks.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-output="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_output_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_analyzer_output.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("analyzer-output"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__analyzer_output.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-output"), $("Source Code Analysis - Output Options"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_output.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-purge="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_purge_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_analyzer_purge.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-purge"), $("Source Code Analysis - Dead Symbol Removal Frequency"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_purge.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-stats"), $("Print internal analyzer statistics."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_stats.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-store="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_store_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_analyzer_store.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-store"), $("Source Code Analysis - Abstract Memory Store Models"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_store.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-viz-egraph-graphviz"), $("Display exploded graph using GraphViz"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_viz_egraph_graphviz.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyzer-viz-egraph-ubigraph"), $("Display exploded graph using Ubigraph"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyzer_viz_egraph_ubigraph.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("analyze"), $("Run the static analyzer"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__analyze.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("analyze"), $("Run static analysis engine"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analyze.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("ansi"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ansi.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("arange_sections"), $("Emit DWARF .debug_arange sections"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_arange_sections.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("arch:"), $("Set architecture for code generation"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_arch.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("arch_errors_fatal"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_arch__errors__fatal.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("arch_only"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_arch__only.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("arch"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_arch.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("arcmt-check"), $("Check for ARC migration issues that need manual handling"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_arcmt_check.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("arcmt-migrate-emit-errors"), $("Emit ARC errors even if the migrator can fix them"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_arcmt_migrate_emit_arc_errors.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("arcmt-migrate-report-output"), $("Output path for the plist report"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_arcmt_migrate_report_output.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("arcmt-migrate"), $("Apply modifications and produces temporary files that conform to ARC"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_arcmt_migrate.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("arcmt-modify"), $("Apply modifications to files to conform to ARC"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_arcmt_modify.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("assemble"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__assemble.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_S.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("assert="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__assert_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_A.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("assert"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__assert.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_A.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ast-dump-filter"), $("Use with -ast-dump or -ast-print to dump/print only AST declaration nodes having a certain substring in a qualified name. Use -ast-list to list all filterable declaration node names."), $("<dump_filter>"), ID.OPT_ast_dump_filter.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ast-dump-lookups"), $("Build ASTs and then debug dump their name lookup tables"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ast_dump_lookups.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ast-dump"), $("Build ASTs and then debug dump them"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ast_dump.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ast-list"), $("Build ASTs and print the list of declaration node qualified names"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ast_list.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ast-merge"), $("Merge the given AST file into the translation unit being compiled."), $("<ast file>"), ID.OPT_ast_merge.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ast-print"), $("Build ASTs and then pretty-print them"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ast_print.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ast-view"), $("Build ASTs and view them with GraphViz"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ast_view.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("aux-triple"), $("Auxiliary target triple."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_aux_triple.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $A, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_A.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(DriverFlag.RenderJoined), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $a, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_a.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("backend-option"), $("Additional arguments to forward to LLVM backend (during code gen)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_backend_option.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("bigobj"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_bigobj.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("bind_at_load"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_bind__at__load.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("bootclasspath="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__bootclasspath_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fbootclasspath_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("bootclasspath"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__bootclasspath.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fbootclasspath_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Brepro-"), $("Emit an object file which cannot be reproduced over time"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Brepro_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_mno_incremental_linker_compatible.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Brepro"), $("Emit an object file which can be reproduced over time"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Brepro.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_mincremental_linker_compatible.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("bundle_loader"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_bundle__loader.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("bundle"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_bundle.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $B, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_B.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $b, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_b.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("c-isystem"), $("Add directory to the C SYSTEM include search path"), $("<directory>"), ID.OPT_c_isystem.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cc1as"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_cc1as.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cc1"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_cc1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-arcmt-check"), $("Check for ARC migration issues that need manual handling"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_arcmt_check.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_internal_driver_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-arcmt-migrate"), $("Apply modifications and produces temporary files that conform to ARC"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_arcmt_migrate.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_internal_driver_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-arcmt-modify"), $("Apply modifications to files to conform to ARC"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_arcmt_modify.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_internal_driver_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-gcc-name"), $("Name for native GCC compiler"), $("<gcc-path>"), ID.OPT_ccc_gcc_name.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_internal_driver_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-install-dir"), $("Simulate installation in the given directory"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_install_dir.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden | ClangFlags.CoreOption, ID.OPT_internal_debug_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-objcmt-migrate"), $("Apply modifications and produces temporary files to migrate to modern ObjC syntax"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_objcmt_migrate.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_internal_driver_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-pch-is-pch"), $("Use lazy PCH for precompiled headers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_pch_is_pch.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_internal_driver_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-pch-is-pth"), $("Use pretokenized headers for precompiled headers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_pch_is_pth.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_internal_driver_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-print-bindings"), $("Show bindings of tools to actions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_print_bindings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden | ClangFlags.CoreOption, ID.OPT_internal_debug_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-print-phases"), $("Dump list of actions to perform"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_print_phases.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden | ClangFlags.CoreOption, ID.OPT_internal_debug_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ccc-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ccc_.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_internal_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("CC"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_CC.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cfg-add-implicit-dtors"), $("Add C++ implicit destructors to CFGs for all analyses"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analysis_CFGAddImplicitDtors.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("cgthreads"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_cgthreads.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("chain-include"), $("Include and chain a header file after turning it into PCH"), $("<file>"), ID.OPT_chain_include.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-denorms-are-zero"), $("OpenCL only. Allow denormals to be flushed to zero."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_denorms_are_zero.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-fast-relaxed-math"), $("OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_fast_relaxed_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-finite-math-only"), $("OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_finite_math_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-kernel-arg-info"), $("OpenCL only. Generate kernel argument metadata."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_kernel_arg_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-mad-enable"), $("OpenCL only. Allow use of less precise MAD computations in the generated binary."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_mad_enable.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-no-signed-zeros"), $("OpenCL only. Allow use of less precise no signed zeros computations in the generated binary."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_no_signed_zeros.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-opt-disable"), $("OpenCL only. This option disables all optimizations. By default optimizations are enabled."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_opt_disable.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-single-precision-constant"), $("OpenCL only. Treat double precision floating-point constant as single precision constant."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_single_precision_constant.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-std="), $("OpenCL language standard to compile for."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_std_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-strict-aliasing"), $("OpenCL only. This option is added for compatibility with OpenCL 1.0."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_strict_aliasing.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cl-unsafe-math-optimizations"), $("OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cl_unsafe_math_optimizations.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_opencl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("CLASSPATH="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__CLASSPATH_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fclasspath_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("classpath="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__classpath_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fclasspath_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("CLASSPATH"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__CLASSPATH.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fclasspath_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("classpath"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__classpath.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fclasspath_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("client_name"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_client__name.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("clr"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_clr.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("code-completion-at="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_code_completion_at_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_code_completion_at.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("code-completion-at"), $("Dump code-completion information at a location"), $("<file>:<line>:<column>"), ID.OPT_code_completion_at.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("code-completion-brief-comments"), $("Include brief documentation comments in code-completion results."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_code_completion_brief_comments.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("code-completion-macros"), $("Include macros in code-completion results"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_code_completion_macros.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("code-completion-patterns"), $("Include code patterns in code-completion results"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_code_completion_patterns.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("combine"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_combine.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.Unsupported, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("comments-in-macros"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__comments_in_macros.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_CC.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("comments"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__comments.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_C.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("compatibility_version"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_compatibility__version.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("compile"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__compile.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_c.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("compress-debug-sections"), $("Compress DWARF debug sections using zlib"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_compress_debug_sections.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("constant-cfstrings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__constant_cfstrings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("coverage-cfg-checksum"), $("Emit CFG checksum for functions in .gcno files."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_coverage_cfg_checksum.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("coverage-exit-block-before-body"), $("Emit the exit block before the body blocks in .gcno files."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_coverage_exit_block_before_body.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("coverage-file="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_coverage_file_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_coverage_file.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("coverage-file"), $("Emit coverage data to this filename. The extension will be replaced."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_coverage_file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("coverage-no-function-names-in-data"), $("Emit function names in .gcda files."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_coverage_no_function_names_in_data.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("coverage-version="), $("Four-byte version string for gcov files."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_coverage_version_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("coverage"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_coverage.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cpp-precomp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_cpp_precomp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cpp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_cpp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("cuda-compile-host-device"), $("Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cuda_compile_host_device.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("cuda-device-only"), $("Compile CUDA code for device only"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cuda_device_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("cuda-gpu-arch="), $("CUDA GPU architecture (e.g. sm_35).  May be specified more than once."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cuda_gpu_arch_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("cuda-host-only"), $("Compile CUDA code for host only.  Has no effect on non-CUDA compilations."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cuda_host_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("cuda-noopt-device-debug"), $("Enable device-side debug info generation. Disables ptxas optimizations."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cuda_noopt_device_debug.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("cuda-path="), $("CUDA installation path"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_cuda_path_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("current_version"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_current__version.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("cxx-isystem"), $("Add directory to the C++ SYSTEM include search path"), $("<directory>"), ID.OPT_cxx_isystem.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $C, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_C.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $C, $("Don't discard comments when preprocessing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_C.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_C.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $c, $("Only run preprocess, compile, and assemble steps"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_c.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $c, $("Compile only"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_c.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_c.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("d2FastFail"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_d2FastFail.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("d2Zi+"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_d2Zi_PLUS.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dA"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dA.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_d_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dD"), $("Print macro definitions in -E mode in addition to normal output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dD.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_d_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dead_strip"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dead__strip.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("debug-info-kind="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_debug_info_kind_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("debug="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__debug_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_g_Flag.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("debugger-tuning="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_debugger_tuning_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("debug"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__debug.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_g_Flag.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("define-macro="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__define_macro_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_D.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("define-macro"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__define_macro.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_D.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("dependencies"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__dependencies.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_M.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dependency-dot"), $("Filename to write DOT-formatted header dependencies to"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dependency_dot.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dependency-file"), $("Filename (or -) to write dependency output to"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dependency_file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("dependent-lib="), $("Add dependent library"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dependent_lib.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("detailed-preprocessing-record"), $("include a detailed record of preprocessing actions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_detailed_preprocessing_record.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("diagnostic-log-file"), $("Filename (or -) to log diagnostics to"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_diagnostic_log_file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("disable-free"), $("Disable freeing of memory on exit"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_disable_free.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("disable-llvm-optzns"), $("Don't run LLVM optimization passes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_disable_llvm_optzns.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("disable-llvm-passes"), $("Use together with -emit-llvm to get pristine LLVM IR from the frontend by not running any LLVM passes at all"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_disable_llvm_passes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("disable-llvm-verifier"), $("Don't run the LLVM IR verifier pass"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_disable_llvm_verifier.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("disable-objc-default-synthesize-properties"), $("disable the default synthesis of Objective-C properties"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_disable_objc_default_synthesize_properties.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("disable-red-zone"), $("Do not emit code that uses the red zone."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_disable_red_zone.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("discard-value-names"), $("Discard value names in LLVM IR"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_discard_value_names.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dM"), $("Print macro definitions in -E mode instead of normal output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dM.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_d_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("doc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_doc.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("driver-mode="), $("Set the driver mode to either 'gcc', 'g++', 'cpp', or 'cl'"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_driver_mode.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CoreOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_internal_driver_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dump-coverage-mapping"), $("Dump the coverage mapping records, for testing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_coverage_mapping.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dump-deserialized-decls"), $("Dump declarations that are deserialized from PCH, for testing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_deserialized_pch_decls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dump-raw-tokens"), $("Lex file in raw mode and dump raw tokens"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_raw_tokens.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dump-tokens"), $("Run preprocessor, dump internal rep of tokens"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_tokens.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dumpmachine"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dumpmachine.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dumpspecs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dumpspecs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dumpversion"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dumpversion.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dwarf-column-info"), $("Turn on column location information."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dwarf_column_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dwarf-debug-flags"), $("The string to embed in the Dwarf debug flags record."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dwarf_debug_flags.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dwarf-debug-producer"), $("The string to embed in the Dwarf debug AT_producer record."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dwarf_debug_producer.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dwarf-ext-refs"), $("Generate debug info with external references to clang modules or precompiled headers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_dwarf_ext_refs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dwarf-version="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dwarf_version_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("dyld-prefix="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__dyld_prefix_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("dyld-prefix"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__dyld_prefix.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT__dyld_prefix_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dylib_file"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dylib__file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dylinker_install_name"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dylinker__install__name.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dylinker"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dylinker.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dynamiclib"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dynamiclib.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("dynamic"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dynamic.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.NoArgumentUnused), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $D, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_D.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $D, $("Define macro"), $("<macro[=value]>"), ID.OPT__SLASH_D.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_D.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $d, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_d_Flag.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_d_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $d, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_d_Joined.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_d_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("EB"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_EB.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mbig_endian.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("EH"), $("Exception handling model"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_EH.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("EL"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_EL.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mlittle_endian.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-ast"), $("Emit Clang AST files for source inputs"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_ast.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-codegen-only"), $("Generate machine code, but discard output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_codegen_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-html"), $("Output input source as HTML"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_html.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-llvm-bc"), $("Build ASTs then convert to LLVM, emit .bc file"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_llvm_bc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-llvm-only"), $("Build ASTs and convert to LLVM, discarding output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_llvm_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-llvm-uselists"), $("Preserve order of LLVM use-lists when serializing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_llvm_uselists.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-llvm"), $("Use the LLVM representation for assembler and object files"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_llvm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-module"), $("Generate pre-compiled module file from a module map"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_module.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-obj"), $("Emit native object files"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_obj.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-pch"), $("Generate pre-compiled header file"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_pch.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("emit-pth"), $("Generate pre-tokenized header file"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_emit_pth.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("encoding="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__encoding_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fencoding_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("encoding"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__encoding.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fencoding_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("entry"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__entry.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_e.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Eonly"), $("Just run preprocessor, no output (for timings)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_Eonly.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("EP"), $("Disable linemarker output and preprocess to stdout"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_EP.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("error-on-deserialized-decl="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_error_on_deserialized_pch_decl_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_error_on_deserialized_pch_decl.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("error-on-deserialized-decl"), $("Emit error if a specific declaration is deserialized from PCH, for testing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_error_on_deserialized_pch_decl.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("errorReport"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_errorReport.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("exported_symbols_list"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_exported__symbols__list.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("extdirs="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__extdirs_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fextdirs_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("extdirs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__extdirs.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fextdirs_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("extra-warnings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__extra_warnings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_W_Joined.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $E, $("Only run the preprocessor"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_E.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $E, $("Preprocess to stdout"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_E.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_E.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $e, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_e.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("faccess-control"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_faccess_control.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("faddress-space-map-mangling="), $("Set the mode for address space map based mangling; OpenCL testing purposes only"), $("<yes|no|target>"), ID.OPT_faddress_space_map_mangling_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("faggressive-function-elimination"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_aggressive_function_elimination_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("falign-commons"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_commons_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("falign-functions="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_falign_functions_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("falign-functions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_functions_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("falign-jumps="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_falign_jumps_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("falign-jumps"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_jumps_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("falign-labels="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_falign_labels_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("falign-labels"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_labels_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("falign-loops="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_falign_loops_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("falign-loops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_loops_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fall-intrinsics"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_all_intrinsics_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("fallback"), $("Fall back to cl.exe if clang-cl fails to compile"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_fallback.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fallow-half-arguments-and-returns"), $("Allow function arguments and returns of type half"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fallow_half_arguments_and_returns.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fallow-unsupported"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fallow_unsupported.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("faltivec"), $("Enable AltiVec vector initializer syntax"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_faltivec.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fansi-escape-codes"), $("Use ANSI escape codes for diagnostics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fansi_escape_codes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CoreOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fapple-kext"), $("Use Apple's kernel extensions ABI"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fapple_kext.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fapple-pragma-pack"), $("Enable Apple gcc-compatible #pragma pack handling"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fapple_pragma_pack.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fapplication-extension"), $("Restrict code to those available for App Extensions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fapplication_extension.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fasm-blocks"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fasm_blocks.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fasm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fasm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fassociative-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fassociative_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fassume-sane-operator-new"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fassume_sane_operator_new.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fastcp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fastcp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fastf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fastf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fast"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fast.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fasynchronous-unwind-tables"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fasynchronous_unwind_tables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fauto-profile="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fauto_profile_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fprofile_sample_use_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fautolink"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fautolink.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fautomatic"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_automatic_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("favor"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_favor.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("FA"), $("Output assembly code file during compilation"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_FA.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("FA"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_FA_joined.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Fa"), $("Output assembly code to this file during compilation (with /FA)"), $("<file or directory>"), ID.OPT__SLASH_Fa.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbackslash"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_backslash_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbacktrace"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_backtrace_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fblas-matmul-limit="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fblas_matmul_limit_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fblocks-runtime-optional"), $("Weakly link in the blocks runtime"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fblocks_runtime_optional.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fblocks"), $("Enable the 'blocks' language feature"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fblocks.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbootclasspath="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fbootclasspath_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fborland-extensions"), $("Accept non-standard constructs supported by the Borland compiler"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fborland_extensions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbounds-check"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_bounds_check_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbracket-depth="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fbracket_depth_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbracket-depth"), $("Maximum nesting level for parentheses, brackets, and braces"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fbracket_depth.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbranch-count-reg"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_branch_count_reg_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbuild-session-file="), $("Use the last modification time of <file> as the build session timestamp"), $("<file>"), ID.OPT_fbuild_session_file.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbuild-session-timestamp="), $("Time when the current build session started"), $("<time since Epoch in seconds>"), ID.OPT_fbuild_session_timestamp.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fbuiltin"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fbuiltin.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcaller-saves"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_caller_saves_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcaret-diagnostics"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcaret_diagnostics.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcheck-array-temporaries"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_check_array_temporaries_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcheck-new"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcheck_new_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcheck="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcheck_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fclasspath="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fclasspath_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcoarray="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcoarray_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcolor-diagnostics"), $("Use colors in diagnostics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcolor_diagnostics.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CoreOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcomment-block-commands="), $("Treat each comma separated argument in <arg> as a documentation comment block command"), $("<arg>"), ID.OPT_fcomment_block_commands.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcommon"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcommon.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcompile-resource="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcompile_resource_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconcepts-ts"), $("Enable C++ Extensions for Concepts."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconcepts_ts.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconst-strings"), $("Use a const qualified type for string literals in C and ObjC"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconst_strings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconstant-cfstrings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconstant_cfstrings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconstant-string-class="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconstant_string_class_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconstant-string-class"), $("Specify the class to use for constant Objective-C string objects."), $("<class name>"), ID.OPT_fconstant_string_class.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconstexpr-backtrace-limit="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconstexpr_backtrace_limit_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconstexpr-backtrace-limit"), $("Set the maximum number of entries to print in a constexpr evaluation backtrace (0 = no limit)."), $("<N>"), ID.OPT_fconstexpr_backtrace_limit.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconstexpr-depth="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconstexpr_depth_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconstexpr-depth"), $("Maximum depth of recursive constexpr function calls"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconstexpr_depth.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconstexpr-steps="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconstexpr_steps_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconstexpr-steps"), $("Maximum number of steps in constexpr function evaluation"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconstexpr_steps.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fconvert="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fconvert_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcoroutines"), $("Enable support for the C++ Coroutines TS"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcoroutines.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcoverage-mapping"), $("Generate coverage mapping to enable code coverage analysis"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcoverage_mapping.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcray-pointer"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_cray_pointer_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcreate-profile"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcreate_profile.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcuda-allow-variadic-functions"), $("Allow variadic functions in CUDA device code."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcuda_allow_variadic_functions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcuda-approx-transcendentals"), $("Use approximate transcendental functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcuda_approx_transcendentals.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcuda-flush-denormals-to-zero"), $("Flush denormal floating point values to zero in CUDA device mode."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcuda_flush_denormals_to_zero.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcuda-include-gpubinary"), $("Incorporate CUDA device-side binary into host object file."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcuda_include_gpubinary.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcuda-is-device"), $("Generate code for CUDA device"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcuda_is_device.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcxx-exceptions"), $("Enable C++ exceptions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcxx_exceptions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fcxx-modules"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcxx_modules.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("FC"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_FC.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fd-lines-as-code"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_d_lines_as_code_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fd-lines-as-comments"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_d_lines_as_comments_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdata-sections"), $("Place each data in its own section (ELF Only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdata_sections.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdebug-compilation-dir"), $("The compilation directory to embed in the debug info."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdebug_compilation_dir.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdebug-pass-arguments"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdebug_pass_arguments.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdebug-pass-structure"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdebug_pass_structure.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdebug-prefix-map="), $("remap file source paths in debug info"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdebug_prefix_map_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdebug-types-section"), $("Place debug types in their own section (ELF Only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdebug_types_section.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdebugger-cast-result-to-id"), $("Enable casting unknown expression results to id"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdebugger_cast_result_to_id.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdebugger-objc-literal"), $("Enable special debugger support for Objective-C subscripting and literals"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdebugger_objc_literal.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdebugger-support"), $("Enable special debugger support behavior"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdebugger_support.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdeclspec"), $("Allow __declspec as a keyword"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdeclspec.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdefault-calling-conv="), $("Set default MS calling convention"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdefault_calling_conv_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdefault-double-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_default_double_8_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdefault-inline"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_default_inline_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdefault-integer-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_default_integer_8_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdefault-real-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_default_real_8_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdefer-pop"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdelayed-template-parsing"), $("Parse templated function definitions at the end of the translation unit"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdelayed_template_parsing.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdelete-null-pointer-checks"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_delete_null_pointer_checks_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdepfile-entry="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdepfile_entry.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdeprecated-macro"), $("Defines the __DEPRECATED macro"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdeprecated_macro.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdevirtualize-speculatively"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_devirtualize_speculatively_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdevirtualize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_devirtualize_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-color="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_color_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-color"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_color.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CoreOption | ClangFlags.DriverOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-fixit-info"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_fixit_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-format="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_format_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-format"), $("Change diagnostic formatting to match IDE and command line tools"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_format.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-parseable-fixits"), $("Print fix-its in machine parseable form"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_parseable_fixits.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CoreOption | ClangFlags.CC1Option, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-print-source-range-info"), $("Print source range spans in numeric form"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_print_source_range_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-show-category="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_show_category_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-show-category"), $("Print diagnostic category"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_show_category.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-show-location="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_show_location_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-show-note-include-stack"), $("Display include stacks for diagnostic notes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_show_note_include_stack.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-show-option"), $("Print option name with mappable diagnostics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_show_option.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdiagnostics-show-template-tree"), $("Print a template comparison tree for differing templates"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdiagnostics_show_template_tree.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdisable-module-hash"), $("Disable the module hash"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdisable_module_hash.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdollar-ok"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dollar_ok_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdollars-in-identifiers"), $("Allow '$' in identifiers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdollars_in_identifiers.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdump-fortran-optimized"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_fortran_optimized_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdump-fortran-original"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_fortran_original_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdump-parse-tree"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_parse_tree_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdump-record-layouts-simple"), $("Dump record layout information in a simple form used for testing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdump_record_layouts_simple.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdump-record-layouts"), $("Dump record layout information"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdump_record_layouts.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdump-vtable-layouts"), $("Dump the layouts of all vtables that will be emitted in a translation unit"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdump_vtable_layouts.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdwarf-directory-asm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdwarf_directory_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fdwarf2-cfi-asm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fdwarf2_cfi_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Fd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Fd.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("felide-constructors"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_felide_constructors.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("feliminate-unused-debug-symbols"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_feliminate_unused_debug_symbols.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("feliminate-unused-debug-types"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_eliminate_unused_debug_types_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fembed-bitcode-marker"), $("Embed placeholder LLVM IR data as a marker"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fembed_bitcode_marker.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fembed_bitcode_EQ.getValue(), $("marker\000")), 
  new OptTable.Info(prefix_1, $("fembed-bitcode="), $("Embed LLVM bitcode (option: off, all, bitcode, marker)"), $("<option>"), ID.OPT_fembed_bitcode_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fembed-bitcode"), $("Embed LLVM IR bitcode as data"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fembed_bitcode.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_fembed_bitcode_EQ.getValue(), $("all\000")), 
  new OptTable.Info(prefix_1, $("femit-all-decls"), $("Emit all declarations, even if unused"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_femit_all_decls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("femit-coverage-data"), $("Instrument the program to emit gcov coverage data when run."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_femit_coverage_data.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("femit-coverage-notes"), $("Emit a gcov coverage notes file when compiling."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_femit_coverage_notes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("femulated-tls"), $("Use emutls functions to access thread_local variables"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_femulated_tls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fencode-extended-block-signature"), $("enable extended encoding of block type signature"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fencode_extended_block_signature.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fencoding="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fencoding_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ferror-limit="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ferror_limit_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ferror-limit"), $("Set the maximum number of errors to emit before stopping (0 = no limit)."), $("<N>"), ID.OPT_ferror_limit.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fexceptions"), $("Enable support for exception handling"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fexceptions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fexcess-precision="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fexcess_precision_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fexec-charset="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fexec_charset_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fexpensive-optimizations"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fextdirs="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fextdirs_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fextended-identifiers"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_5.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fexternal-blas"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_external_blas_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fexternc-nounwind"), $("Assume all functions with C linkage do not unwind"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fexternc_nounwind.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Fe"), $("Set output executable file or directory (ends in / or \\)"), $("<file or directory>"), ID.OPT__SLASH_Fe.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ff2c"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_f2c_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffake-address-space-map"), $("Use a fake address space map; OpenCL testing purposes only"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffake_address_space_map.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffast-math"), $("Allow aggressive, lossy floating-point optimizations"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffast_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffat-lto-objects"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fat_lto_objects_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffinite-math-only"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffinite_math_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffixed-form"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fixed_form_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffixed-line-length-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffixed_line_length_VALUE.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffixed-r9"), $("Reserve the r9 register (ARM only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffixed_r9.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffixed-x18"), $("Reserve the x18 register (AArch64 only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffixed_x18.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_aarch64_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffloat-store"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_float_store_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffor-scope"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffor_scope.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fforbid-guard-variables"), $("Emit an error if a C++ static local initializer would need a guard variable"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fforbid_guard_variables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fforce-addr"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_force_addr.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffp-contract="), $("Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffp_contract.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffpe-trap="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffpe_trap_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffree-form"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_free_form_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffree-line-length-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffree_line_length_VALUE.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffreestanding"), $("Assert that the compilation takes place in a freestanding environment"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffreestanding.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffriend-injection"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_friend_injection_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffrontend-optimize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_frontend_optimize_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffunction-attribute-list"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_function_attribute_list_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ffunction-sections"), $("Place each function in its own section (ELF Only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ffunction_sections.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fgcse-after-reload"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcse_after_reload_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fgcse-las"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcse_las_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fgcse-sm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcse_sm_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fgcse"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcse_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fgnu-inline-asm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fgnu_inline_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fgnu-keywords"), $("Allow GNU-extension keywords regardless of language standard"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fgnu_keywords.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fgnu-runtime"), $("Generate output compatible with the standard GNU Objective-C runtime"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fgnu_runtime.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fgnu89-inline"), $("Use the gnu89 inline semantics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fgnu89_inline.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fgnu"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gnu_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fheinous-gnu-extensions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fheinous_gnu_extensions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fhonor-infinites"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_7.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fhonor_infinities.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fhonor-infinities"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fhonor_infinities.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fhonor-nans"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fhonor_nans.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fhosted"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fhosted.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fident"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ident_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("filelist"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_filelist.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.LinkerInput), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("filetype"), $("Specify the output file type ('asm', 'null', or 'obj')"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_filetype.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fimplement-inlines"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_implement_inlines_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fimplicit-module-maps"), $("Implicitly search the file system for module map files."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fimplicit_module_maps.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fimplicit-modules"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fimplicit_modules.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fimplicit-none"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_implicit_none_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fimplicit-templates"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_implicit_templates_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finclude-default-header"), $("Include the default header file for OpenCL"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_finclude_default_header.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("find-pch-source="), $("When building a pch, try to find the input file in include directories, as if it had been included by the argument passed to this flag."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_find_pch_source_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("findirect-virtual-calls"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_9.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fapple_kext.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finit-character="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_finit_character_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finit-integer="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_finit_integer_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finit-local-zero"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_init_local_zero_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finit-logical="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_finit_logical_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finit-real="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_finit_real_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finline-functions-called-once"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_inline_functions_called_once_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finline-functions"), $("Inline suitable functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_finline_functions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finline-hint-functions"), $("Inline functions wich are (explicitly or implicitly) marked inline"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_finline_hint_functions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finline-limit="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_finline_limit_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finline-limit"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_finline_limit_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finline-small-functions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_inline_small_functions_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finline"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_finline.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finput-charset="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_finput_charset_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finstrument-functions"), $("Generate calls to instrument function entry and exit"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_finstrument_functions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("finteger-4-integer-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_integer_4_integer_8_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fintegrated-as"), $("Enable the integrated assembler"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fintegrated_as.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fintrinsic-modules-path"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_intrinsic_modules_path_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fipa-cp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ipa_cp_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fivopts"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ivopts_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fix-only-warnings"), $("Apply fix-it advice only for warnings, not errors"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fix_only_warnings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fix-what-you-can"), $("Apply fix-it advice even in the presence of unfixable errors"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fix_what_you_can.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fixit-recompile"), $("Apply fix-it changes and recompile"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fixit_recompile.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fixit-to-temporary"), $("Apply fix-it changes to temporary files"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fixit_to_temp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fixit="), $("Apply fix-it advice creating a file with the given suffix"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fixit_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fixit"), $("Apply fix-it advice to the input source"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fixit.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("FI"), $("Include file before parsing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_FI.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_include.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Fi"), $("Set preprocess output file name (with /P)"), $("<file>"), ID.OPT__SLASH_Fi.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fjump-tables"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fjump_tables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fkeep-inline-functions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_20_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("flat_namespace"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_flat__namespace.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("flax-vector-conversions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_flax_vector_conversions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("flimit-debug-info"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_flimit_debug_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fno_standalone_debug.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("flimited-precision="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_flimited_precision_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("flto-visibility-public-std"), $("Use public LTO visibility for classes in std and stdext namespaces"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_flto_visibility_public_std.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("flto="), $("Set LTO mode to either 'full' or 'thin'"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_flto_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("flto"), $("Enable LTO in 'full' mode"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_flto.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmacro-backtrace-limit="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmacro_backtrace_limit_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmacro-backtrace-limit"), $("Set the maximum number of entries to print in a macro expansion backtrace (0 = no limit)."), $("<N>"), ID.OPT_fmacro_backtrace_limit.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmath-errno"), $("Require math functions to indicate errors by setting errno"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmath_errno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmax-array-constructor="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmax_array_constructor_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmax-errors="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmax_errors_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmax-identifier-length"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_max_identifier_length_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmax-stack-var-size="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmax_stack_var_size_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmax-subrecord-length="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmax_subrecord_length_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmax-type-align="), $("Specify the maximum alignment to enforce on pointers lacking an explicit alignment"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmax_type_align_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmerge-all-constants"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmerge_all_constants.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmerge-constants"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_merge_constants_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmerge-functions"), $("Permit merging of identical functions when optimizing."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmerge_functions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmessage-length="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmessage_length_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmessage-length"), $("Format message diagnostics so that they fit within N columns or fewer, when possible."), $("<N>"), ID.OPT_fmessage_length.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-feature"), $("Enable <feature> in module map requires declarations"), $("<feature>"), ID.OPT_fmodule_feature.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-file-deps"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodule_file_deps.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-file="), $("Load this precompiled module file"), $("<file>"), ID.OPT_fmodule_file.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-format="), $("Select the container format for clang modules and PCH. Supported options are 'raw' and 'obj'."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodule_format_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-implementation-of"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodule_implementation_of.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_fmodule_name_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-map-file-home-is-cwd"), $("Use the current working directory as the home directory of module maps specified by -fmodule-map-file=<FILE>"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodule_map_file_home_is_cwd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-map-file="), $("Load this module map file"), $("<file>"), ID.OPT_fmodule_map_file.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-maps"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodule_maps.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fimplicit_module_maps.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-name="), $("Specify the name of the module to build"), $("<name>"), ID.OPT_fmodule_name_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-name"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodule_name.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fmodule_name_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodule-private"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_module_private_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-cache-path="), $("Specify the module cache path"), $("<directory>"), ID.OPT_fmodules_cache_path.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-decluse"), $("Require declaration of modules used within a module"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodules_decluse.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-embed-all-files"), $("Embed the contents of all files read by this compilation into the produced module file."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodules_embed_all_files.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-embed-file="), $("Embed the contents of the specified file into the module file being compiled."), $("<file>"), ID.OPT_fmodules_embed_file_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-ignore-macro="), $("Ignore the definition of the given macro when building and loading modules"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodules_ignore_macro.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-local-submodule-visibility"), $("Enforce name visibility rules across submodules of the same top-level module."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodules_local_submodule_visibility.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-prune-after="), $("Specify the interval (in seconds) after which a module file will be considered unused"), $("<seconds>"), ID.OPT_fmodules_prune_after.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-prune-interval="), $("Specify the interval (in seconds) between attempts to prune the module cache"), $("<seconds>"), ID.OPT_fmodules_prune_interval.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-search-all"), $("Search even non-imported modules to resolve references"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodules_search_all.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-strict-decluse"), $("Like -fmodules-decluse but requires all headers to be in modules"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodules_strict_decluse.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-user-build-path"), $("Specify the module user build path"), $("<directory>"), ID.OPT_fmodules_user_build_path.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-validate-once-per-build-session"), $("Don't verify input files for the modules if the module has been successfully validated or loaded during this build session"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodules_validate_once_per_build_session.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules-validate-system-headers"), $("Validate the system headers that a module depends on when loading the module"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodules_validate_system_headers.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodules"), $("Enable the 'modules' language feature"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmodules.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodulo-sched-allow-regmoves"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_modulo_sched_allow_regmoves_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmodulo-sched"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_modulo_sched_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fms-compatibility-version="), $("Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fms_compatibility_version.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fms-compatibility"), $("Enable full Microsoft Visual C++ compatibility"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fms_compatibility.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fms-extensions"), $("Accept some non-standard constructs supported by the Microsoft compiler"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fms_extensions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fms-memptr-rep="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fms_memptr_rep_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fms-volatile"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fms_volatile.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmsc-version="), $("Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmsc_version.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmudflapth"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmudflapth.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fmudflap"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fmudflap.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Fm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Fm.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fnative-half-arguments-and-returns"), $("Use the native __fp16 type for arguments and returns (and skip ABI-specific lowering)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fnative_half_arguments_and_returns.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fnative-half-type"), $("Use the native half type for __fp16 instead of promoting to float"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fnative_half_type.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fnested-functions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fnested_functions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fnext-runtime"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fnext_runtime.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-access-control"), $("Disable C++ access control"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_access_control.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-aggressive-function-elimination"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_aggressive_function_elimination_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-align-commons"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_commons_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-align-functions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_functions_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-align-jumps"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_jumps_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-align-labels"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_labels_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-align-loops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_align_loops_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-all-intrinsics"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_all_intrinsics_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-altivec"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_altivec.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-apple-pragma-pack"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_apple_pragma_pack.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-application-extension"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_application_extension.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-asm-blocks"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_asm_blocks.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-asm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-associative-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_associative_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-assume-sane-operator-new"), $("Don't assume that C++'s global operator new can't alias any pointer"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_assume_sane_operator_new.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-asynchronous-unwind-tables"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_asynchronous_unwind_tables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-autolink"), $("Disable generation of linker directives for automatic library linking"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_autolink.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-automatic"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_automatic_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-backslash"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_backslash_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-backtrace"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_backtrace_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-bitfield-type-align"), $("Ignore bit-field types when aligning structures"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_bitfield_type_align.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-blocks"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_blocks.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-borland-extensions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_borland_extensions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-bounds-check"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_bounds_check_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-branch-count-reg"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_branch_count_reg_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-builtin-"), $("Disable implicit builtin knowledge of a specific function"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_builtin_.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-builtin"), $("Disable implicit builtin knowledge of functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_builtin.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-caller-saves"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_caller_saves_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-caret-diagnostics"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_caret_diagnostics.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-check-array-temporaries"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_check_array_temporaries_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-check-new"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fcheck_new_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-color-diagnostics"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_color_diagnostics.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CoreOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-common"), $("Compile common globals like normal definitions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_common.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-const-strings"), $("Don't use a const qualified type for string literals in C and ObjC"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_const_strings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-constant-cfstrings"), $("Disable creation of CodeFoundation-type constant strings"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_constant_cfstrings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-coverage-mapping"), $("Disable code coverage analysis"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_coverage_mapping.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-crash-diagnostics"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_crash_diagnostics.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.NoArgumentUnused), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-cray-pointer"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_cray_pointer_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-cuda-approx-transcendentals"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_cuda_approx_transcendentals.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-cuda-flush-denormals-to-zero"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_cuda_flush_denormals_to_zero.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-cuda-host-device-constexpr"), $("Don't treat unattributed constexpr functions as __host__ __device__."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_cuda_host_device_constexpr.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-cxx-exceptions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_cxx_exceptions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-cxx-modules"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_cxx_modules.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-d-lines-as-code"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_d_lines_as_code_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-d-lines-as-comments"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_d_lines_as_comments_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-data-sections"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_data_sections.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-debug-types-section"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_debug_types_section.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-declspec"), $("Disallow __declspec as a keyword"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_declspec.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-default-double-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_default_double_8_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-default-inline"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_default_inline_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-default-integer-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_default_integer_8_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-default-real-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_default_real_8_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-defer-pop"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-delayed-template-parsing"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_delayed_template_parsing.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-delete-null-pointer-checks"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_delete_null_pointer_checks_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-deprecated-macro"), $("Undefines the __DEPRECATED macro"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_deprecated_macro.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-devirtualize-speculatively"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_devirtualize_speculatively_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-devirtualize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_devirtualize_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-diagnostics-color"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_diagnostics_color.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CoreOption | ClangFlags.DriverOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-diagnostics-fixit-info"), $("Do not include fixit information in diagnostics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_diagnostics_fixit_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-diagnostics-show-note-include-stack"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_diagnostics_show_note_include_stack.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-diagnostics-show-option"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_diagnostics_show_option.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-diagnostics-use-presumed-location"), $("Ignore #line directives when displaying diagnostic locations"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_diagnostics_use_presumed_location.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-dollar-ok"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dollar_ok_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-dollars-in-identifiers"), $("Disallow '$' in identifiers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_dollars_in_identifiers.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-dump-fortran-optimized"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_fortran_optimized_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-dump-fortran-original"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_fortran_original_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-dump-parse-tree"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_dump_parse_tree_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-dwarf-directory-asm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_dwarf_directory_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-dwarf2-cfi-asm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_dwarf2_cfi_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-elide-constructors"), $("Disable C++ copy constructor elision"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_elide_constructors.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-elide-type"), $("Do not elide types when printing diagnostics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_elide_type.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-eliminate-unused-debug-symbols"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_eliminate_unused_debug_symbols.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-eliminate-unused-debug-types"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_eliminate_unused_debug_types_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-emulated-tls"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_emulated_tls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-exceptions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_exceptions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-expensive-optimizations"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-extended-identifiers"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_6.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-external-blas"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_external_blas_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-f2c"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_f2c_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-fast-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_fast_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-fat-lto-objects"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fat_lto_objects_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-finite-math-only"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_finite_math_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-fixed-form"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fixed_form_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-float-store"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_float_store_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-for-scope"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_for_scope.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-free-form"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_free_form_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-friend-injection"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_friend_injection_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-frontend-optimize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_frontend_optimize_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-function-attribute-list"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_function_attribute_list_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-function-sections"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_function_sections.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-gcse-after-reload"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcse_after_reload_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-gcse-las"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcse_las_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-gcse-sm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcse_sm_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-gcse"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcse_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-gnu-inline-asm"), $("Disable GNU style inline asm"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_gnu_inline_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-gnu-keywords"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_gnu_keywords.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-gnu89-inline"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_gnu89_inline.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-gnu"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gnu_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-honor-infinites"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_8.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fno_honor_infinities.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-honor-infinities"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_honor_infinities.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-honor-nans"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_honor_nans.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-ident"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ident_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-implement-inlines"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_implement_inlines_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-implicit-module-maps"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_implicit_module_maps.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-implicit-modules"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_implicit_modules.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-implicit-none"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_implicit_none_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-implicit-templates"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_implicit_templates_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-init-local-zero"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_init_local_zero_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-inline-functions-called-once"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_inline_functions_called_once_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-inline-functions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_inline_functions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-inline-limit"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_finline_limit_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-inline-small-functions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_inline_small_functions_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-inline"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_inline.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-integer-4-integer-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_integer_4_integer_8_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-integrated-as"), $("Disable the integrated assembler"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_integrated_as.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.DriverOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-intrinsic-modules-path"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_intrinsic_modules_path_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-ipa-cp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ipa_cp_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-ivopts"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ivopts_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-jump-tables"), $("Do not use jump tables for lowering switches"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_jump_tables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-keep-inline-functions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_20_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-lax-vector-conversions"), $("Disallow implicit conversions between vectors with a different number of elements or different element types"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_lax_vector_conversions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-limit-debug-info"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_limit_debug_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fstandalone_debug.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-lto"), $("Disable LTO mode (default)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_lto.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-math-builtin"), $("Disable implicit builtin knowledge of math functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_math_builtin.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-math-errno"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_math_errno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-max-identifier-length"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_max_identifier_length_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-max-type-align"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_max_type_align.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-merge-all-constants"), $("Disallow merging of constants"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_merge_all_constants.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-merge-constants"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_merge_constants_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-module-file-deps"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_module_file_deps.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-module-maps"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_module_maps.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fno_implicit_module_maps.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-module-private"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_module_private_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-modules-decluse"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_modules_decluse.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-modules-error-recovery"), $("Do not automatically import modules for error recovery"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_modules_error_recovery.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-modules-global-index"), $("Do not automatically generate or update the global module index"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_modules_global_index.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-modules-search-all"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_modules_search_all.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-modules"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_modules.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-modulo-sched-allow-regmoves"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_modulo_sched_allow_regmoves_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-modulo-sched"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_modulo_sched_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-ms-compatibility"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_ms_compatibility.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-ms-extensions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_ms_extensions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-non-call-exceptions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_non_call_exceptions_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-objc-arc-exceptions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_objc_arc_exceptions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-objc-arc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_objc_arc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-objc-exceptions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_objc_exceptions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-objc-infer-related-result-type"), $("do not infer Objective-C related result type based on method family"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_objc_infer_related_result_type.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-objc-legacy-dispatch"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_objc_legacy_dispatch.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-objc-nonfragile-abi"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_objc_nonfragile_abi.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-objc-weak"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_objc_weak.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-omit-frame-pointer"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_omit_frame_pointer.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-openmp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_openmp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.NoArgumentUnused), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-operator-names"), $("Do not treat C++ operator name keywords as synonyms for operators"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_operator_names.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-optimize-sibling-calls"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_optimize_sibling_calls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-pack-derived"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_pack_derived_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-pack-struct"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_pack_struct.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-pascal-strings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_pascal_strings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-pch-timestamp"), $("Disable inclusion of timestamp in precompiled headers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_pch_timestamp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-peel-loops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_peel_loops_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-permissive"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_permissive_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-PIC"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_PIC.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-pic"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_pic.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-PIE"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_PIE.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-pie"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_pie.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-prefetch-loop-arrays"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_prefetch_loop_arrays_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-printf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_printf_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile-arcs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_profile_arcs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile-correction"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_correction_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile-generate-sampling"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_generate_sampling_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile-generate"), $("Disable generation of profile instrumentation."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_profile_generate.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile-instr-generate"), $("Disable generation of profile instrumentation."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_profile_instr_generate.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile-instr-use"), $("Disable using instrumentation data for profile-guided optimization"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_profile_instr_use.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile-reusedist"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_reusedist_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile-use"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_profile_use.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fno_profile_instr_use.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile-values"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_values_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-profile"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-protect-parens"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_protect_parens_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-range-check"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_range_check_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-real-4-real-10"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_4_real_10_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-real-4-real-16"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_4_real_16_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-real-4-real-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_4_real_8_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-real-8-real-10"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_8_real_10_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-real-8-real-16"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_8_real_16_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-real-8-real-4"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_8_real_4_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-realloc-lhs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_realloc_lhs_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-reciprocal-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_reciprocal_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-recursive"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_recursive_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-regs-graph"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_regs_graph_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-rename-registers"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_rename_registers_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-reorder-blocks"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_reorder_blocks_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-repack-arrays"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_repack_arrays_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-reroll-loops"), $("Turn off loop reroller"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_reroll_loops.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-rewrite-includes"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_rewrite_includes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-ripa"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ripa_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-rounding-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_rounding_math_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-rtti-data"), $("Control emission of RTTI data"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_rtti_data.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-rtti"), $("Disable generation of rtti information"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_rtti.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize-blacklist"), $("Don't use blacklist file for sanitizers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_blacklist.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize-cfi-cross-dso"), $("Disable control flow integrity (CFI) checks for cross-DSO calls."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_cfi_cross_dso.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize-coverage="), $("Disable specified features of coverage instrumentation for Sanitizers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_coverage.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize-memory-track-origins"), $("Disable origins tracking in MemorySanitizer"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_memory_track_origins.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize-recover="), $("Disable recovery for specified sanitizers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_recover_EQ.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize-recover"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_recover.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize-stats"), $("Disable sanitizer statistics gathering."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_stats.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize-trap="), $("Disable trapping for specified sanitizers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_trap_EQ.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize-undefined-trap-on-error"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_undefined_trap_on_error.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sanitize="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sanitize_EQ.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-schedule-insns2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_schedule_insns2_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-schedule-insns"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_schedule_insns_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-second-underscore"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_second_underscore_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-see"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_see_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-short-enums"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_short_enums.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-short-wchar"), $("Force wchar_t to be an unsigned int"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_short_wchar.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-show-column"), $("Do not include column number on diagnostics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_show_column.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-show-source-location"), $("Do not include source location information with diagnostics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_show_source_location.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sign-zero"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_sign_zero_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-signaling-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_signaling_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-signaling-nans"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_signaling_nans_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-signed-char"), $("Char is unsigned"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_signed_char.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-signed-zeros"), $("Allow optimizations that ignore the sign of floating point zeros"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_signed_zeros.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-single-precision-constant"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_single_precision_constant_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-sized-deallocation"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_sized_deallocation.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-slp-vectorize-aggressive"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_slp_vectorize_aggressive.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-slp-vectorize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_slp_vectorize.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-spec-constr-count"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_spec_constr_count_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-spell-checking"), $("Disable spell-checking"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_spell_checking.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-stack-arrays"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_stack_arrays_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-stack-check"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_stack_check_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-stack-protector"), $("Disable the use of stack protectors"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_stack_protector.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-standalone-debug"), $("Limit debug information produced to reduce size of debug binary"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_standalone_debug.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-strength-reduce"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_strength_reduce_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-strict-aliasing"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_strict_aliasing.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-strict-enums"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_strict_enums.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-strict-modules-decluse"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_modules_strict_decluse.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-strict-overflow"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_strict_overflow.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-strict-vtable-pointers"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_strict_vtable_pointers.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-struct-path-tbaa"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_struct_path_tbaa.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-threadsafe-statics"), $("Do not emit code to make initialization of local statics thread safe"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_threadsafe_statics.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tls-model"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tls_model_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tracer"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tracer_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-trapping-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_trapping_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree-dce"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_dce_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree-salias"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_salias_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree-slp-vectorize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_14.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fno_slp_vectorize.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree-ter"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_ter_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree-vectorizer-verbose"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_vectorizer_verbose_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree-vectorize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_12.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fno_vectorize.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree-vrp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_vrp_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree_loop_im"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_loop_im_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree_loop_ivcanon"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_loop_ivcanon_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-tree_loop_linear"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_loop_linear_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-trigraphs"), $("Do not process trigraph sequences"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_trigraphs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-underscoring"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_underscoring_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-unique-section-names"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_unique_section_names.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-unit-at-a-time"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_unit_at_a_time.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-unroll-all-loops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_unroll_all_loops_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-unroll-loops"), $("Turn off loop unroller"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_unroll_loops.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-unsafe-loop-optimizations"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_unsafe_loop_optimizations_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-unsafe-math-optimizations"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_unsafe_math_optimizations.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-unsigned-char"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_unsigned_char.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-unswitch-loops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_unswitch_loops_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-unwind-tables"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_unwind_tables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-use-cxa-atexit"), $("Don't use __cxa_atexit for calling destructors"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_use_cxa_atexit.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-use-init-array"), $("Don't use .init_array instead of .ctors"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_use_init_array.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-use-line-directives"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_use_line_directives.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-use-linker-plugin"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_use_linker_plugin_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-validate-pch"), $("Disable validation of precompiled headers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_validate_pch.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-var-tracking"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_var_tracking.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-variable-expansion-in-unroller"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_variable_expansion_in_unroller_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-vect-cost-model"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_vect_cost_model_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-vectorize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_vectorize.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-verbose-asm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_verbose_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-wchar"), $("Disable C++ builtin type wchar_t"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_wchar.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-web"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_web_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-whole-file"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_whole_file_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-whole-program-vtables"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_whole_program_vtables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-whole-program"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_whole_program_fno.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-working-directory"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_working_directory.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-wrapv"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_wrapv.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-xray-instrument"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fnoxray_instrument.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-zero-initialized-in-bss"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_zero_initialized_in_bss.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fno-zvector"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fno_zvector.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fnon-call-exceptions"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_non_call_exceptions_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fnoopenmp-use-tls"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fnoopenmp_use_tls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoArgumentUnused, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-abi-version="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_abi_version_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-arc-cxxlib="), $("Objective-C++ Automatic Reference Counting standard library kind"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_arc_cxxlib_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-arc-exceptions"), $("Use EH-safe code when synthesizing retains and releases in -fobjc-arc"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_arc_exceptions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-arc"), $("Synthesize retain and release calls for Objective-C pointers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_arc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-atdefs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_atdefs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-call-cxx-cdtors"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_call_cxx_cdtors.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-dispatch-method="), $("Objective-C dispatch method to use"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_dispatch_method_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-exceptions"), $("Enable Objective-C exceptions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_exceptions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-gc-only"), $("Use GC exclusively for Objective-C related memory management"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_gc_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-gc"), $("Enable Objective-C garbage collection"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_gc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-infer-related-result-type"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_infer_related_result_type.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-legacy-dispatch"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_legacy_dispatch.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-link-runtime"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_link_runtime.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-new-property"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_new_property.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-nonfragile-abi-version="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_nonfragile_abi_version_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-nonfragile-abi"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_nonfragile_abi.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-runtime-has-weak"), $("The target Objective-C runtime supports ARC weak operations"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_runtime_has_weak.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-runtime="), $("Specify the target Objective-C runtime kind and version"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_runtime_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-sender-dependent-dispatch"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_sender_dependent_dispatch.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-subscripting-legacy-runtime"), $("Allow Objective-C array and dictionary subscripting in legacy runtime"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_subscripting_legacy_runtime.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fobjc-weak"), $("Enable ARC-style weak references in Objective-C"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fobjc_weak.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fomit-frame-pointer"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fomit_frame_pointer.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fopenmp-host-ir-file-path"), $("Path to the IR file produced by the frontend for the host."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fopenmp_host_ir_file_path.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fopenmp-is-device"), $("Generate code only for an OpenMP target device."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fopenmp_is_device.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fopenmp-targets="), $("Specify comma-separated list of triples OpenMP offloading targets to be supported"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fopenmp_targets_EQ.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fopenmp-use-tls"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fopenmp_use_tls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.NoArgumentUnused), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fopenmp-version="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fopenmp_version_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoArgumentUnused, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fopenmp="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fopenmp_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fopenmp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fopenmp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoArgumentUnused, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("foperator-arrow-depth="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_foperator_arrow_depth_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("foperator-arrow-depth"), $("Maximum number of 'operator->'s to call for a member access"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_foperator_arrow_depth.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("foptimize-sibling-calls"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_foptimize_sibling_calls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("for-linker="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__for_linker_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_Xlinker.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("for-linker"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__for_linker.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_Xlinker.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("force-link="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__force_link_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_u.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("force-link"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__force_link.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_u.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("force_cpusubtype_ALL"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_force__cpusubtype__ALL.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("force_flat_namespace"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_force__flat__namespace.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("force_load"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_force__load.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("foutput-class-dir="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_foutput_class_dir_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("foverride-record-layout="), $("Override record layouts with those in the given file"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_foverride_record_layout_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Fo"), $("Set output object file, or directory (ends in / or \\) (with /c)"), $("<file or directory>"), ID.OPT__SLASH_Fo.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("fp:except-"), $EMPTY, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_fp_except_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_trapping_math.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("fp:except"), $EMPTY, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_fp_except.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_ftrapping_math.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("fp:fast"), $EMPTY, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_fp_fast.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_ffast_math.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("fp:precise"), $EMPTY, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_fp_precise.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_fast_math.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("fp:strict"), $EMPTY, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_fp_strict.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_fast_math.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpack-derived"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_pack_derived_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpack-struct="), $("Specify the default maximum struct packing alignment"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fpack_struct_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpack-struct"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fpack_struct.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fparse-all-comments"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fparse_all_comments.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpascal-strings"), $("Recognize and construct Pascal-style string literals"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fpascal_strings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpcc-struct-return"), $("Override the default ABI to return all structs on the stack"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fpcc_struct_return.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpch-preprocess"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fpch_preprocess.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpeel-loops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_peel_loops_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpermissive"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_permissive_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fPIC"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fPIC.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpic"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fpic.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fPIE"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fPIE.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fpie"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fpie.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fplugin="), $("Load the named plugin (dynamic shared object)"), $("<dsopath>"), ID.OPT_fplugin_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprefetch-loop-arrays"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_prefetch_loop_arrays_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprintf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_printf_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-arcs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_arcs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-correction"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_correction_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-dir="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_dir.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-generate-sampling"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_generate_sampling_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-generate="), $("Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)"), $("<directory>"), ID.OPT_fprofile_generate_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-generate"), $("Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_generate.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-instr-generate="), $("Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)"), $("<file>"), ID.OPT_fprofile_instr_generate_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-instr-generate"), $("Generate instrumented code to collect execution counts into default.profraw file (overriden by '=' form of option or LLVM_PROFILE_FILE env var)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_instr_generate.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-instr-use="), $("Use instrumentation data for profile-guided optimization"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_instr_use_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-instr-use"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_instr_use.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-instrument-path="), $("Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_instrument_path_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-instrument-use-path="), $("Specify the profile path in PGO use compilation"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_instrument_use_path_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-instrument="), $("Enable PGO instrumentation. The accepted value is clang, llvm, or none"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_instrument_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-reusedist"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_reusedist_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-sample-use="), $("Enable sample-based profile guided optimizations"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_sample_use_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-use="), $("Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>."), $("<pathname>"), ID.OPT_fprofile_use_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-use"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fprofile_use.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_fprofile_instr_use.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile-values"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_values_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprofile"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_profile_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fprotect-parens"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_protect_parens_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Fp"), $("Set pch filename (with /Yc and /Yu)"), $("<filename>"), ID.OPT__SLASH_Fp.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("framework"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_framework.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.LinkerInput), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frandom-seed="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_frandom_seed_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frange-check"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_range_check_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freal-4-real-10"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_4_real_10_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freal-4-real-16"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_4_real_16_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freal-4-real-8"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_4_real_8_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freal-8-real-10"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_8_real_10_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freal-8-real-16"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_8_real_16_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freal-8-real-4"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_real_8_real_4_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frealloc-lhs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_realloc_lhs_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freciprocal-math"), $("Allow division operations to be reassociated"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_freciprocal_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frecord-marker="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_frecord_marker_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frecursive"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_recursive_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freg-struct-return"), $("Override the default ABI to return small structs in registers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_freg_struct_return.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fregs-graph"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_regs_graph_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frename-registers"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_rename_registers_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freorder-blocks"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_reorder_blocks_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frepack-arrays"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_repack_arrays_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("freroll-loops"), $("Turn on loop reroller"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_freroll_loops.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fretain-comments-from-system-headers"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fretain_comments_from_system_headers.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frewrite-includes"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_frewrite_includes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frewrite-map-file="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_frewrite_map_file_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frewrite-map-file"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_frewrite_map_file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fripa"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ripa_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frounding-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_rounding_math_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("frtti"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_frtti.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("FR"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_FR.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Fr"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Fr.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-address-field-padding="), $("Level of field padding for AddressSanitizer"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_address_field_padding.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-address-use-after-scope"), $("Enable use-after-scope detection in AddressSanitizer"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_address_use_after_scope.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-blacklist="), $("Path to blacklist file for sanitizers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_blacklist.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-cfi-cross-dso"), $("Enable control flow integrity (CFI) checks for cross-DSO calls."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_cfi_cross_dso.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-coverage-8bit-counters"), $("Enable frequency counters in sanitizer coverage"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_coverage_8bit_counters.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-coverage-indirect-calls"), $("Enable sanitizer coverage for indirect calls"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_coverage_indirect_calls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-coverage-trace-bb"), $("Enable basic block tracing in sanitizer coverage"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_coverage_trace_bb.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-coverage-trace-cmp"), $("Enable cmp instruction tracing in sanitizer coverage"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_coverage_trace_cmp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-coverage-trace-pc"), $("Enable PC tracing in sanitizer coverage"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_coverage_trace_pc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-coverage-type="), $("Sanitizer coverage type"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_coverage_type.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-coverage="), $("Specify the type of coverage instrumentation for Sanitizers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_coverage.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-link-c++-runtime"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_link_cxx_runtime.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-memory-track-origins="), $("Enable origins tracking in MemorySanitizer"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_memory_track_origins_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-memory-track-origins"), $("Enable origins tracking in MemorySanitizer"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_memory_track_origins.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-memory-use-after-dtor"), $("Enable use-after-destroy detection in MemorySanitizer"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_memory_use_after_dtor.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-recover="), $("Enable recovery for specified sanitizers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_recover_EQ.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-recover"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_recover.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-stats"), $("Enable sanitizer statistics gathering."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_stats.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-trap="), $("Enable trapping for specified sanitizers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_trap_EQ.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-undefined-strip-path-components="), $("Strip (or keep only, if negative) a given number of path components when emitting check metadata."), $("<number>"), ID.OPT_fsanitize_undefined_strip_path_components_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize-undefined-trap-on-error"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsanitize_undefined_trap_on_error.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsanitize="), $("Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks"), $("<check>"), ID.OPT_fsanitize_EQ.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_f_clang_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsched-interblock"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_10.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fschedule-insns2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_schedule_insns2_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fschedule-insns"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_schedule_insns_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsecond-underscore"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_second_underscore_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsee"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_see_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fshort-enums"), $("Allocate to an enum type only as many bytes as it needs for the declared range of possible values"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fshort_enums.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fshort-wchar"), $("Force wchar_t to be a short unsigned int"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fshort_wchar.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fshow-column"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fshow_column.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fshow-overloads="), $("Which overload candidates to show when overload resolution fails: best|all; defaults to all"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fshow_overloads_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fshow-source-location"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fshow_source_location.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsign-zero"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_sign_zero_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsignaling-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsignaling_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsignaling-nans"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_signaling_nans_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsigned-bitfields"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsigned_bitfields.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsigned-char"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsigned_char.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsigned-zeros"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsigned_zeros.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsingle-precision-constant"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_single_precision_constant_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsized-deallocation"), $("Enable C++14 sized global deallocation functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsized_deallocation.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsjlj-exceptions"), $("Use SjLj style exceptions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsjlj_exceptions.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fslp-vectorize-aggressive"), $("Enable the BB vectorization passes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fslp_vectorize_aggressive.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fslp-vectorize"), $("Enable the superword-level parallelism vectorization passes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fslp_vectorize.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fspec-constr-count"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_spec_constr_count_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fspell-checking-limit="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fspell_checking_limit_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fspell-checking-limit"), $("Set the maximum number of times to perform spell checking on unrecognized identifiers (0 = no limit)."), $("<N>"), ID.OPT_fspell_checking_limit.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fspell-checking"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fspell_checking.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsplit-stack"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsplit_stack.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstack-arrays"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_stack_arrays_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstack-check"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_stack_check_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstack-protector-all"), $("Force the usage of stack protectors for all functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fstack_protector_all.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstack-protector-strong"), $("Use a strong heuristic to apply stack protectors to functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fstack_protector_strong.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstack-protector"), $("Enable stack protectors for functions potentially vulnerable to stack smashing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fstack_protector.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstandalone-debug"), $("Emit full debug info for all types used by the program"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fstandalone_debug.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstrength-reduce"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_strength_reduce_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstrict-aliasing"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fstrict_aliasing.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstrict-enums"), $("Enable optimizations based on the strict definition of an enum's value range"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fstrict_enums.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstrict-overflow"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fstrict_overflow.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstrict-vtable-pointers"), $("Enable optimizations based on the strict rules for overwriting polymorphic C++ objects"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fstrict_vtable_pointers.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fstruct-path-tbaa"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fstruct_path_tbaa.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fsyntax-only"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fsyntax_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption | ClangFlags.CC1Option, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("FS"), $("Force synchronous PDB writes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_FS.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null)
};            
}
            
private static OptTable.Info[] createInfo_2() {
  return new /*const*/OptTable.Info [] {
  new OptTable.Info(prefix_1, $("ftabstop="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftabstop_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftabstop"), $("Set the tab stop distance."), $("<N>"), ID.OPT_ftabstop.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftemplate-backtrace-limit="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftemplate_backtrace_limit_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftemplate-backtrace-limit"), $("Set the maximum number of entries to print in a template instantiation backtrace (0 = no limit)."), $("<N>"), ID.OPT_ftemplate_backtrace_limit.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftemplate-depth-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftemplate_depth_.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftemplate-depth="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftemplate_depth_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftemplate-depth"), $("Maximum depth of recursive template instantiation"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftemplate_depth.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fterminated-vtables"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_15.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fapple_kext.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftest-coverage"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftest_coverage.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftest-module-file-extension="), $("introduce a module file extension for testing purposes. The argument is parsed as blockname:major:minor:hashed:user info"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftest_module_file_extension_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fthinlto-index="), $("Perform ThinLTO importing using provided function summary index"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fthinlto_index_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fthreadsafe-statics"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fthreadsafe_statics.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftime-report"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftime_report.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftls-model="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftlsmodel_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftls-model"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tls_model_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftracer"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tracer_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftrap-function="), $("Issue call to specified function rather than a trap instruction"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftrap_function_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftrapping-math"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftrapping_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftrapv-handler="), $("Specify the function to be called on overflow"), $("<function name>"), ID.OPT_ftrapv_handler_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftrapv-handler"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftrapv_handler.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftrapv"), $("Trap on integer overflow"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftrapv.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree-dce"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_dce_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree-salias"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_salias_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree-slp-vectorize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_13.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fslp_vectorize.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree-ter"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_ter_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree-vectorizer-verbose"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_vectorizer_verbose_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree-vectorize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_11.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fvectorize.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree-vrp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_vrp_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree_loop_im"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_loop_im_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree_loop_ivcanon"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_loop_ivcanon_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftree_loop_linear"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_tree_loop_linear_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftrigraphs"), $("Process trigraph sequences"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftrigraphs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ftype-visibility"), $("Default type visibility"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ftype_visibility.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funderscoring"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_underscoring_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funique-section-names"), $("Use unique names for text and data sections (ELF Only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_funique_section_names.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funit-at-a-time"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_funit_at_a_time.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funknown-anytype"), $("Enable parser support for the __unknown_anytype type; for testing purposes only"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_funknown_anytype.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funroll-all-loops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_unroll_all_loops_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funroll-loops"), $("Turn on loop unroller"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_funroll_loops.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funsafe-loop-optimizations"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_unsafe_loop_optimizations_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funsafe-math-optimizations"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_funsafe_math_optimizations.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funsigned-bitfields"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_funsigned_bitfields.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funsigned-char"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_funsigned_char.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funswitch-loops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_unswitch_loops_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("funwind-tables"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_funwind_tables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fuse-cxa-atexit"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fuse_cxa_atexit.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fuse-init-array"), $("Use .init_array instead of .ctors"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fuse_init_array.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fuse-ld="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fuse_ld_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fuse-line-directives"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fuse_line_directives.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fuse-linker-plugin"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_use_linker_plugin_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fuse-register-sized-bitfield-access"), $("Use register sized accesses to bit-fields, when possible."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fuse_register_sized_bitfield_access.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("FU"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_FU.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fvariable-expansion-in-unroller"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_variable_expansion_in_unroller_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fveclib="), $("Use the given vector functions library"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fveclib.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fvect-cost-model"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_vect_cost_model_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fvectorize"), $("Enable the loop vectorization passes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fvectorize.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fverbose-asm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fverbose_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fvisibility-inlines-hidden"), $("Give inline C++ member functions default visibility by default"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fvisibility_inlines_hidden.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fvisibility-ms-compat"), $("Give global types 'default' visibility and global functions and variables 'hidden' visibility by default"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fvisibility_ms_compat.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fvisibility="), $("Set the default symbol visibility for all global declarations"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fvisibility_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fvisibility"), $("Default type and symbol visibility"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fvisibility.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fweb"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_web_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fwhole-file"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_whole_file_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fwhole-program-vtables"), $("Enables whole-program vtable optimization. Requires -flto"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fwhole_program_vtables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fwhole-program"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_whole_program_f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_gcc_optimization_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fwrapv"), $("Treat signed integer overflow as two's complement"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fwrapv.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fwritable-strings"), $("Store string literals as writable data"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fwritable_strings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fxray-instruction-threshold="), $("Sets the minimum function size to instrument with XRay"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fxray_instruction_threshold_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fxray-instruction-threshold"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fxray_instruction_threshold_.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fxray-instrument"), $("Generate XRay instrumentation sleds on function entry and exit"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fxray_instrument.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Fx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Fx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fzero-initialized-in-bss"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_fzero_initialized_in_bss.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("fzvector"), $("Enable System z vector language extension"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_fzvector.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $F, $("Add directory to framework include search path"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_F.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, DriverFlag.RenderJoined | ClangFlags.CC1Option, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $F, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_F.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("g0"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_g0.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gN_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("G1"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_G1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("g1"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_g1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gN_Group.getValue(), ID.OPT_gline_tables_only.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("G2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_G2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("g2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_g2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gN_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("g3"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_g3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gN_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("G="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_G_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GA"), $("Assume thread-local variables are defined in the executable"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GA.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_ftlsmodel_EQ.getValue(), $("local-exec\000")), 
  new OptTable.Info(prefix_3, $("gcc-toolchain="), $("Use the gcc toolchain at the given directory"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcc_toolchain.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gcc-toolchain"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcc_toolchain_legacy_spelling.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_gcc_toolchain.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gcodeview"), $("Generate CodeView debug information"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcodeview.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.CoreOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gcoff"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcoff.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gcolumn-info"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gcolumn_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gdwarf-2"), $("Generate source-level debug information with dwarf version 2"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_gdwarf_2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gdwarf-3"), $("Generate source-level debug information with dwarf version 3"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_gdwarf_3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gdwarf-4"), $("Generate source-level debug information with dwarf version 4"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_gdwarf_4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gdwarf-5"), $("Generate source-level debug information with dwarf version 5"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_gdwarf_5.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gdwarf-aranges"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gdwarf_aranges.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gdwarf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gdwarf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_INVALID.getValue(), ID.OPT_gdwarf_4.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gd"), $("Set __cdecl as a default calling convention"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Ge"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Ge.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GF-"), $("Disable string pooling"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GF_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fwritable_strings.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gfull"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gfull.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GF"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GF.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ggdb0"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ggdb0.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_ggdbN_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ggdb1"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ggdb1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_ggdbN_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ggdb2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ggdb2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_ggdbN_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ggdb3"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ggdb3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_ggdbN_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ggdb"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ggdb.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gTune_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ggnu-pubnames"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_ggnu_pubnames.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GH"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GH.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gh"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gh.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GL-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GL_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gline-tables-only"), $("Emit debug line number tables only"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_gline_tables_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_gN_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("glldb"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_glldb.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gTune_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GL"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GL.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gm-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gm_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gmlt"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gmlt.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_gline_tables_only.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gmodules"), $("Generate debug info with external references to clang modules or precompiled headers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_gmodules.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gno-column-info"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gno_column_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gno-record-gcc-switches"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gno_record_gcc_switches.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gno-strict-dwarf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gno_strict_dwarf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gnu-pubnames"), $("Emit newer GNU style pubnames"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_gnu_pubnames.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GR-"), $("Disable emission of RTTI data"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GR_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("grecord-gcc-switches"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_grecord_gcc_switches.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GR"), $("Enable emission of RTTI data"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GR.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gr"), $("Set __fastcall as a default calling convention"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gr.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GS-"), $("Disable buffer security check"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GS_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gsce"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gsce.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gTune_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gsplit-dwarf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gsplit_dwarf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gstabs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gstabs.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gstrict-dwarf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gstrict_dwarf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GS"), $("Enable buffer security check"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GS.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gs"), $("Set stack probe size"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gs.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_mstack_probe_size.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gtoggle"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gtoggle.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_g_flags_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GT"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GT.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("guard:"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Guard.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gused"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gused.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gvms"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gvms.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gv"), $("Set __vectorcall as a default calling convention"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gv.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gw-"), $("Don't put each data item in its own section"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gw_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_data_sections.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gw"), $("Put each data item in its own section"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gw.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fdata_sections.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GX-"), $("Enable exception handling"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GX_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("gxcoff"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_gxcoff.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GX"), $("Enable exception handling"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GX.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gy-"), $("Don't put each function in its own section"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gy_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_function_sections.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gy"), $("Put each function in its own section"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gy.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_ffunction_sections.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("GZ"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_GZ.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Gz"), $("Set __stdcall as a default calling convention"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Gz.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $G, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_G.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $g, $("Generate source-level debug information"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_g_Flag.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_g_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("header-include-file"), $("Filename (or -) to write header include output to"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_header_include_file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("headerpad_max_install_names"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_headerpad__max__install__names.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("help-hidden"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__help_hidden.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("HELP"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_HELP.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_help.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("help"), $("Display available options"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_help.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("help"), $("Display available options"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_help.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_help.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("homeparams"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_homeparams.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("hotpatch"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_hotpatch.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $H, $("Show header includes and nesting depth"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_H.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $H, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_H.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("I-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_I_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_I_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("idirafter"), $("Add directory to AFTER include search path"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_idirafter.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("iframework"), $("Add directory to SYSTEM framework search path"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_iframework.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("imacros="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__imacros_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_imacros.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("imacros"), $("Include macros from file before parsing"), $("<file>"), ID.OPT_imacros.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("image_base"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_image__base.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("imsvc"), $("Add directory to system include search path, as if part of %INCLUDE%"), $("<dir>"), ID.OPT__SLASH_imsvc.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-barrier"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_barrier.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_I_.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-directory-after="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_directory_after_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_idirafter.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-directory-after"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_directory_after.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_idirafter.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-directory="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_directory_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_I.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-directory"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_directory.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_I.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("include-pch"), $("Include precompiled header file"), $("<file>"), ID.OPT_include_pch.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-prefix="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_prefix_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_iprefix.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-prefix"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_prefix.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_iprefix.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("include-pth"), $("Include file before parsing"), $("<file>"), ID.OPT_include_pth.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-with-prefix-after="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_with_prefix_after_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_iwithprefix.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-with-prefix-after"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_with_prefix_after.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_iwithprefix.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-with-prefix-before="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_with_prefix_before_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_iwithprefixbefore.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-with-prefix-before"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_with_prefix_before.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_iwithprefixbefore.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-with-prefix="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_with_prefix_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_iwithprefix.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include-with-prefix"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_with_prefix.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_iwithprefix.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("include="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__include_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_include.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $include, $("Include file before parsing"), $("<file>"), ID.OPT_include.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("index-header-map"), $("Make the next included directory (-I or -F) an indexer header map"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_index_header_map.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("init-only"), $("Only execute frontend initialization"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_init_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("init"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_init.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("install_name"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_install__name.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("integrated-as"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_18.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_fintegrated_as.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("internal-externc-isystem"), $("Add directory to the internal system include search path with implicit extern \"C\" semantics; these are assumed to not be user-provided and are used to model system and standard headers' paths."), $("<directory>"), ID.OPT_internal_externc_isystem.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("internal-isystem"), $("Add directory to the internal system include search path; these are assumed to not be user-provided and are used to model system and standard headers' paths."), $("<directory>"), ID.OPT_internal_isystem.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("iprefix"), $("Set the -iwithprefix/-iwithprefixbefore prefix"), $("<dir>"), ID.OPT_iprefix.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("iquote"), $("Add directory to QUOTE include search path"), $("<directory>"), ID.OPT_iquote.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("isysroot"), $("Set the system root directory (usually /)"), $("<dir>"), ID.OPT_isysroot.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("isystem-after"), $("Add directory to end of the SYSTEM include search path"), $("<directory>"), ID.OPT_isystem_after.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("isystem"), $("Add directory to SYSTEM include search path"), $("<directory>"), ID.OPT_isystem.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ivfsoverlay"), $("Overlay the virtual filesystem described by file over the real file system"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ivfsoverlay.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("iwithprefixbefore"), $("Set directory to include search path with prefix"), $("<dir>"), ID.OPT_iwithprefixbefore.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("iwithprefix"), $("Set directory to SYSTEM include search path with prefix"), $("<dir>"), ID.OPT_iwithprefix.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("iwithsysroot"), $("Add directory to SYSTEM include search path, absolute paths are relative to -isysroot"), $("<directory>"), ID.OPT_iwithsysroot.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $I, $("Add directory to include search path"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_I.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption, ID.OPT_I_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $I, $("Add directory to include search path"), $("<dir>"), ID.OPT__SLASH_I.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_I.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $i, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_i.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $J, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_J.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(DriverFlag.RenderJoined), ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $J, $("Make char type unsigned"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_J.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_funsigned_char.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("keep_private_externs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_keep__private__externs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("kernel-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_kernel_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $kernel, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_kernel.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("language="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__language_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_x.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("language"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__language.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_x.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("lazy_framework"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_lazy__framework.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.LinkerInput), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("lazy_library"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_lazy__library.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.LinkerInput), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("LDd"), $("Create debug DLL"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_LDd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("LD"), $("Create DLL"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_LD.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("library-directory="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__library_directory_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_L.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("library-directory"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__library_directory.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_L.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("linker-option="), $("Add linker option"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_linker_option.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("link"), $("Forward options to the linker"), $("<options>"), ID.OPT__SLASH_link.getValue(), $uint2uchar(Option.OptionClass.RemainingArgsJoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("LN"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_LN.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("load"), $("Load the named plugin (dynamic shared object)"), $("<dsopath>"), ID.OPT_load.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $L, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_L.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(DriverFlag.RenderJoined), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $l, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_l.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.LinkerInput | DriverFlag.RenderJoined, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("m16"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m16.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("m32"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m32.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("m3dnowa"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m3dnowa.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("m3dnow"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m3dnow.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("m64"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m64.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("m80387"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_m80387.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mx87.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mabi="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mabi_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mabicalls"), $("Enable SVR4-style position-independent code (Mips only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mabicalls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Mach"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Mach.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("madx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_madx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("maes"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_maes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("main-file-name"), $("Main file name to use for debug info"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_main_file_name.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("malign-double"), $("Align doubles to two words in structs (x86 only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_malign_double.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("malign-functions="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_malign_functions_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("malign-jumps="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_malign_jumps_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("malign-loops="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_malign_loops_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("maltivec"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_maltivec.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_faltivec.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mamdgpu-debugger-abi="), $("Generate additional code for specified <version> of debugger ABI (AMDGPU only)"), $("<version>"), ID.OPT_mamdgpu_debugger_abi.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mappletvos-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mappletvos_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mtvos_version_min_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mappletvsimulator-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mappletvsimulator_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mtvos_version_min_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("march="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_march_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("marm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_marm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mno_thumb.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("masm-verbose"), $("Generate verbose assembly output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_masm_verbose.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("masm="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_masm_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("massembler-fatal-warnings"), $("Make assembler warnings fatal"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_massembler_fatal_warnings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx512bw"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx512bw.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx512cd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx512cd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx512dq"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx512dq.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx512er"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx512er.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx512f"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx512f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx512ifma"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx512ifma.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx512pf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx512pf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx512vbmi"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx512vbmi.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx512vl"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx512vl.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mavx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mavx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mbackchain"), $("Link stack frames through backchain on System Z"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mbackchain.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mbig-endian"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mbig_endian.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mbmi2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mbmi2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mbmi"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mbmi.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcheck-zero-division"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mcheck_zero_division.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcmodel="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mcmodel_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcmpb"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mcmpb.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcode-model"), $("The code model to use"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mcode_model.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcompact-branches="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mcompact_branches_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mconsole"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mconsole.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mconstant-cfstrings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mconstant_cfstrings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mconstructor-aliases"), $("Emit complete constructors and destructors as aliases when possible"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mconstructor_aliases.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcpu="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mcpu_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcrbits"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mcrbits.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcrc"), $("Allow use of CRC instructions (ARM only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mcrc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcrypto"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mpower8_crypto.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mcx16"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mcx16.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("MDd"), $("Use DLL debug run-time"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_MDd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT__SLASH_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mdebug-pass"), $("Enable additional debug output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mdebug_pass.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mdirect-move"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mdirect_move.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mdisable-fp-elim"), $("Disable frame pointer elimination optimization"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mdisable_fp_elim.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mdisable-tail-calls"), $("Disable tail call optimization, keeping the call stack accurate"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mdisable_tail_calls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mdll"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mdll.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mdouble-float"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mdouble_float.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mdspr2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mdspr2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mdsp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mdsp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mdynamic-no-pic"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mdynamic_no_pic.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("MD"), $("Write a depfile containing user and system headers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_MD.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("MD"), $("Use DLL run-time"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_MD.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT__SLASH_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("meabi"), $("Set EABI type, e.g. 4, 5 or gnu (default depends on triple)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_meabi.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("menable-no-infs"), $("Allow optimization to assume there are no infinities."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_menable_no_infinities.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("menable-no-nans"), $("Allow optimization to assume there are no NaNs."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_menable_no_nans.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("menable-unsafe-fp-math"), $("Allow unsafe floating-point math optimizations which may decrease precision"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_menable_unsafe_fp_math.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mf16c"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mf16c.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfancy-math-387"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfancy_math_387.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfix-and-continue"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfix_and_continue.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfix-cortex-a53-835769"), $("Workaround Cortex-A53 erratum 835769 (AArch64 only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfix_cortex_a53_835769.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_aarch64_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfloat-abi="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfloat_abi_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfloat-abi"), $("The float ABI to use"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfloat_abi.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfloat128"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfloat128.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfma4"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfma4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfma"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfma.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfp32"), $("Use 32-bit floating point registers (MIPS only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfp32.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfp64"), $("Use 64-bit floating point registers (MIPS only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfp64.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfpmath="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfpmath_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfpmath"), $("Which unit to use for fp math"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfpmath.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfprnd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfprnd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfpu="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfpu_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfpxx"), $("Avoid FPU mode dependent operations when used with the O32 ABI"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfpxx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfsgsbase"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfsgsbase.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mfxsr"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mfxsr.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("MF"), $("Write depfile output from -MMD, -MD, -MM, or -M to <file>"), $("<file>"), ID.OPT_MF.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mgeneral-regs-only"), $("Generate code which only uses the general purpose registers (AArch64 only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mgeneral_regs_only.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_aarch64_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mglibc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mglibc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_m_libc_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mglobal-merge"), $("Enable merging of globals"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mglobal_merge.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("MG"), $("Add missing headers to depfile"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_MG.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mhard-float"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mhard_float.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mhtm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mhtm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mhvx-double"), $("Enable Hexagon Double Vector eXtensions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mhexagon_hvx_double.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_hexagon_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mhvx"), $("Enable Hexagon Vector eXtensions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mhexagon_hvx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_hexagon_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("mhwdiv="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__mhwdiv_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mhwdiv_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mhwdiv="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mhwdiv_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("mhwdiv"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__mhwdiv.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mhwdiv_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("miamcu"), $("Use Intel MCU ABI"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_miamcu.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mieee-fp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mieee_fp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mieee-rnd-near"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mieee_rnd_near.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_hexagon_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("migrate"), $("Run the migrator"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__migrate.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("migrate"), $("Migrate source code"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_migrate.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mimplicit-float"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mimplicit_float.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mincremental-linker-compatible"), $("(integrated-as) Emit an object file which can be used with an incremental linker"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mincremental_linker_compatible.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("minline-all-stringops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_minline_all_stringops.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("minvariant-function-descriptors"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_minvariant_function_descriptors.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mios-simulator-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mios_simulator_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_miphoneos_version_min_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mios-version-min="), $("Set iOS deployment target"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mios_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_miphoneos_version_min_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("miphoneos-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_miphoneos_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("miphonesimulator-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_miphonesimulator_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_miphoneos_version_min_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mips16"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips16.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mips1"), $("Equivalent to -march=mips1"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips1\000")), 
  new OptTable.Info(prefix_1, $("mips2"), $("Equivalent to -march=mips2"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips2\000")), 
  new OptTable.Info(prefix_1, $("mips32r2"), $("Equivalent to -march=mips32r2"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips32r2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips32r2\000")), 
  new OptTable.Info(prefix_1, $("mips32r3"), $("Equivalent to -march=mips32r3"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips32r3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips32r3\000")), 
  new OptTable.Info(prefix_1, $("mips32r5"), $("Equivalent to -march=mips32r5"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips32r5.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips32r5\000")), 
  new OptTable.Info(prefix_1, $("mips32r6"), $("Equivalent to -march=mips32r6"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips32r6.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips32r6\000")), 
  new OptTable.Info(prefix_1, $("mips32"), $("Equivalent to -march=mips32"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips32.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips32\000")), 
  new OptTable.Info(prefix_1, $("mips3"), $("Equivalent to -march=mips3"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips3\000")), 
  new OptTable.Info(prefix_1, $("mips4"), $("Equivalent to -march=mips4"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips4\000")), 
  new OptTable.Info(prefix_1, $("mips5"), $("Equivalent to -march=mips5"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips5.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips5\000")), 
  new OptTable.Info(prefix_1, $("mips64r2"), $("Equivalent to -march=mips64r2"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips64r2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips64r2\000")), 
  new OptTable.Info(prefix_1, $("mips64r3"), $("Equivalent to -march=mips64r3"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips64r3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips64r3\000")), 
  new OptTable.Info(prefix_1, $("mips64r5"), $("Equivalent to -march=mips64r5"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips64r5.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips64r5\000")), 
  new OptTable.Info(prefix_1, $("mips64r6"), $("Equivalent to -march=mips64r6"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips64r6.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips64r6\000")), 
  new OptTable.Info(prefix_1, $("mips64"), $("Equivalent to -march=mips64"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mips64.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_march_EQ.getValue(), $("mips64\000")), 
  new OptTable.Info(prefix_1, $("misel"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_misel.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mkernel"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mkernel.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mldc1-sdc1"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mldc1_sdc1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mlimit-float-precision"), $("Limit float precision to the given value"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mlimit_float_precision.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mlink-bitcode-file"), $("Link the given bitcode file before performing optimizations."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mlink_bitcode_file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mlink-cuda-bitcode"), $("Link and internalize needed symbols from the given bitcode file before performing optimizations."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mlink_cuda_bitcode.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mlinker-version="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mlinker_version_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mlittle-endian"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mlittle_endian.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mllvm"), $("Additional arguments to forward to LLVM's option processing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mllvm.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.CoreOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mlong-calls"), $("Generate an indirect jump to enable jumps further than 64M"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mlong_calls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mlzcnt"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mlzcnt.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mmacosx-version-min="), $("Set Mac OS X deployment target"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mmacosx_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("MMD"), $("Write a depfile containing user headers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_MMD.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mmfcrf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mmfcrf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mmfocrf.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mmfocrf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mmfocrf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mmicromips"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mmicromips.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mmmx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mmmx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mms-bitfields"), $("Set the default structure layout to be compatible with the Microsoft compiler standard"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mms_bitfields.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mmsa"), $("Enable MSA ASE (MIPS only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mmsa.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mmwaitx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mmwaitx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("MM"), $("Like -MMD, but also implies -E and writes to stdout by default"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_MM.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mnan="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mnan_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-3dnowa"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_3dnowa.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-3dnow"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_3dnow.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-80387"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_80387.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mno_x87.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-abicalls"), $("Disable SVR4-style position-independent code (Mips only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_abicalls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-adx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_adx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-aes"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_aes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-altivec"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_altivec.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fno_altivec.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx512bw"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx512bw.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx512cd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx512cd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx512dq"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx512dq.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx512er"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx512er.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx512f"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx512f.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx512ifma"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx512ifma.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx512pf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx512pf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx512vbmi"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx512vbmi.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx512vl"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx512vl.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-avx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_avx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-backchain"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_backchain.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-bmi2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_bmi2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-bmi"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_bmi.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-check-zero-division"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_check_zero_division.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-cmpb"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_cmpb.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-constant-cfstrings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_constant_cfstrings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-crbits"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_crbits.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-crypto"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mnopower8_crypto.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-cx16"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_cx16.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-direct-move"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mnodirect_move.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-dspr2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_dspr2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-dsp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_dsp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-f16c"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_f16c.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-fix-cortex-a53-835769"), $("Don't workaround Cortex-A53 erratum 835769 (AArch64 only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_fix_cortex_a53_835769.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_aarch64_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-float128"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_float128.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-fma4"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_fma4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-fma"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_fma.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-fprnd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_fprnd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-fsgsbase"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_fsgsbase.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-fxsr"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_fxsr.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-global-merge"), $("Disable merging of globals"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_global_merge.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-htm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_htm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-hvx-double"), $("Disable Hexagon Double Vector eXtensions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_hexagon_hvx_double.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_hexagon_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-hvx"), $("Disable Hexagon Vector eXtensions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_hexagon_hvx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_hexagon_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-iamcu"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_iamcu.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-implicit-float"), $("Don't generate implicit floating point instructions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_implicit_float.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-incremental-linker-compatible"), $("(integrated-as) Emit an object file which cannot be used with an incremental linker"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_incremental_linker_compatible.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-inline-all-stringops"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_inline_all_stringops.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-invariant-function-descriptors"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_invariant_function_descriptors.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-isel"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_isel.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-ldc1-sdc1"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_ldc1_sdc1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-long-calls"), $("Restore the default behaviour of not generating long calls"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_long_calls.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-lzcnt"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_lzcnt.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-mfcrf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_mfcrf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mno_mfocrf.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-mfocrf"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_mfocrf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-micromips"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_micromips.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-mips16"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_mips16.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-mmx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_mmx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-movt"), $("Disallow use of movt/movw pairs (ARM only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_movt.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-ms-bitfields"), $("Do not set the default structure layout to be compatible with the Microsoft compiler standard"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_ms_bitfields.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-msa"), $("Disable MSA ASE (MIPS only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_msa.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-mwaitx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_mwaitx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-odd-spreg"), $("Disable odd single-precision floating point registers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_odd_spreg.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-omit-leaf-frame-pointer"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_omit_leaf_frame_pointer.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-pascal-strings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_pascal_strings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fno_pascal_strings.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-pclmul"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_pclmul.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-pku"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_pku.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-popcntd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_popcntd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-popcnt"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_popcnt.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-power8-vector"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_power8_vector.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-prfchw"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_prfchw.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-qpx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_qpx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-rdrnd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_rdrnd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-rdseed"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_rdseed.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-red-zone"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_red_zone.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-relax-all"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_relax_all.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-restrict-it"), $("Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_restrict_it.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-rtd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_rtd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-rtm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_rtm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-sha"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_sha.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-simd128"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_simd128.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_wasm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-soft-float"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_soft_float.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-sse2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_sse2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-sse3"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_sse3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-sse4.1"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_sse4_1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-sse4.2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_sse4_2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-sse4a"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_sse4a.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-sse4"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_sse4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mno_sse4_1.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-sse"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_sse.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-ssse3"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_ssse3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-stackrealign"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_stackrealign.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-tbm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_tbm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-thumb"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_thumb.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-unaligned-access"), $("Force all memory accesses to be aligned (AArch32/AArch64 only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_unaligned_access.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-vsx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_vsx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-vx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_vx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-warn-nonportable-cfstrings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_warn_nonportable_cfstrings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-x87"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_x87.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-xgot"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_xgot.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-xop"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_xop.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-xsavec"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_xsavec.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-xsaveopt"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_xsaveopt.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-xsaves"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_xsaves.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-xsave"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_xsave.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-zero-initialized-in-bss"), $("Do not put zero initialized data in the BSS"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_zero_initialized_in_bss.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mno-zvector"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_zvector.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fno_zvector.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mnocrc"), $("Disallow use of CRC instructions (ARM only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mnocrc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mnoexecstack"), $("Mark the file as not needing an executable stack"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mno_exec_stack.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("modd-spreg"), $("Enable odd single-precision floating point registers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_modd_spreg.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("module-dependency-dir"), $("Directory to dump module dependencies to"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_module_dependency_dir.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("module-file-deps"), $("Include module files in dependency output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_module_file_deps.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("module-file-info"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_module_file_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("momit-leaf-frame-pointer"), $("Omit frame pointer setup for leaf functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_momit_leaf_frame_pointer.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("moslib="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_moslib_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mpascal-strings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mpascal_strings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fpascal_strings.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mpclmul"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mpclmul.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mpku"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mpku.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mpopcntd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mpopcntd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mpopcnt"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mpopcnt.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mpower8-vector"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mpower8_vector.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mprfchw"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mprfchw.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("MP"), $("Create phony target for each dependency (other than main file)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_MP.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("MP"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_MP.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mqdsp6-compat"), $("Enable hexagon-qdsp6 backward compatibility"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mqdsp6_compat.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mqpx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mqpx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("MQ"), $("Specify name of main file output to quote in depfile"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_MQ.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mrdrnd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrdrnd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mrdseed"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrdseed.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mrecip="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrecip_EQ.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mrecip"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrecip.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mred-zone"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mred_zone.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mregparm="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mregparm_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mregparm"), $("Limit the number of registers available for integer arguments"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mregparm.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mrelax-all"), $("(integrated-as) Relax all machine instructions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrelax_all.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("mrelax-relocations"), $("Use relaxable elf relocations"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrelax_relocations.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mrelocation-model"), $("The relocation model to use"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrelocation_model.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mrestrict-it"), $("Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrestrict_it.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mrtd"), $("Make StdCall calling convention the default"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrtd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mrtm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mrtm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msave-temp-labels"), $("Save temporary labels in the symbol table. Note this may change .s semantics and shouldn't generally be used on compiler-generated code."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_msave_temp_labels.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msha"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msha.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msimd128"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msimd128.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_wasm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msingle-float"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msingle_float.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msmall-data-threshold="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msmall_data_threshold_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msoft-float"), $("Use software floating point"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_msoft_float.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msse2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msse2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msse3"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msse3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msse4.1"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msse4_1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msse4.2"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msse4_2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msse4a"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msse4a.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msse4"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msse4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_msse4_2.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("msse"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_msse.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mssse3"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mssse3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mstack-alignment="), $("Set the stack alignment"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mstack_alignment.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mstack-probe-size="), $("Set the stack probe size"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mstack_probe_size.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mstackrealign"), $("Force realign the stack at entry to every function"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mstackrealign.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mstrict-align"), $("Force all memory accesses to be aligned (same as mno-unaligned-access)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mstrict_align.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | DriverFlag.HelpHidden, ID.OPT_INVALID.getValue(), ID.OPT_mno_unaligned_access.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mt-migrate-directory"), $("Directory for temporary files produced during ARC or ObjC migration"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mt_migrate_directory.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mtbm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mtbm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("MTd"), $("Use static debug run-time"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_MTd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT__SLASH_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mthread-model"), $("The thread model to use, e.g. posix, single (posix by default)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_mthread_model.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mthreads"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mthreads.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mthumb"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mthumb.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mtune="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mtune_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mtvos-simulator-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mtvos_simulator_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mtvos_version_min_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mtvos-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mtvos_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("MT"), $("Specify name of main file output in depfile"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_MT.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("MT"), $("Use static run-time"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_MT.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT__SLASH_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("muclibc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_muclibc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_m_libc_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("multi_module"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_multi__module.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("multiply_defined_unused"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_multiply__defined__unused.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("multiply_defined"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_multiply__defined.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("munaligned-access"), $("Allow memory accesses to be unaligned (AArch32/AArch64 only)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_munaligned_access.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_arm_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("municode"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_municode.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("munwind-tables"), $("Generate unwinding tables for all functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_munwind_tables.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mv4"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mv4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_hexagon_Features_Group.getValue(), ID.OPT_mcpu_EQ.getValue(), $("hexagonv4\000")), 
  new OptTable.Info(prefix_1, $("mv55"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mv55.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_hexagon_Features_Group.getValue(), ID.OPT_mcpu_EQ.getValue(), $("hexagonv55\000")), 
  new OptTable.Info(prefix_1, $("mv5"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mv5.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_hexagon_Features_Group.getValue(), ID.OPT_mcpu_EQ.getValue(), $("hexagonv5\000")), 
  new OptTable.Info(prefix_1, $("mv60"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mv60.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_hexagon_Features_Group.getValue(), ID.OPT_mcpu_EQ.getValue(), $("hexagonv60\000")), 
  new OptTable.Info(prefix_1, $("mvsx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mvsx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_ppc_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mvx"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mvx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("MV"), $("Use NMake/Jom format for the depfile"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_MV.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mwarn-nonportable-cfstrings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mwarn_nonportable_cfstrings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mwatchos-simulator-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mwatchos_simulator_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mwatchos_version_min_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mwatchos-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mwatchos_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mwatchsimulator-version-min="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mwatchsimulator_version_min_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_mwatchos_version_min_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mwindows"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mwindows.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mx32"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mx32.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mx87"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mx87.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mxgot"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mxgot.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_m_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mxop"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mxop.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mxsavec"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mxsavec.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mxsaveopt"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mxsaveopt.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mxsaves"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mxsaves.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mxsave"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mxsave.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CoreOption), ID.OPT_m_x86_Features_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("mzvector"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_mzvector.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fzvector.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $M, $("Like -MD, but also implies -E and writes to stdout by default"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_M.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_M_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-canonical-prefixes"), $("Use relative instead of canonical paths"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_canonical_prefixes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-code-completion-globals"), $("Do not include global declarations in code-completion results."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_code_completion_globals.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-cpp-precomp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_cpp_precomp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("no-cuda-noopt-device-debug"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_cuda_noopt_device_debug.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("no-cuda-version-check"), $("Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_cuda_version_check.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-emit-llvm-uselists"), $("Don't preserve order of LLVM use-lists when serializing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_emit_llvm_uselists.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-finalize-removal"), $("Do not remove finalize method in gc mode"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_migrator_no_finalize_removal.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-implicit-float"), $("Don't generate implicit floating point instructions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_implicit_float.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-integrated-as"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_19.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.DriverOption, ID.OPT_INVALID.getValue(), ID.OPT_fno_integrated_as.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("no-integrated-cpp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_integrated_cpp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("no-line-commands"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__no_line_commands.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_P.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-ns-alloc-error"), $("Do not error on use of NSAllocateCollectable/NSReallocateCollectable"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_migrator_no_nsalloc_error.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("no-pedantic"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_pedantic.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_pedantic_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-pthread"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_pthread.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("no-standard-includes"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__no_standard_includes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_nostdinc.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("no-standard-libraries"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__no_standard_libraries.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_nostdlib.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no-struct-path-tbaa"), $("Turn off struct-path aware Type Based Alias Analysis"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_no_struct_path_tbaa.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("no-system-header-prefix="), $("Treat all #include paths starting with <prefix> as not including a system header."), $("<prefix>"), ID.OPT_no_system_header_prefix.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("no-system-header-prefix"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_17.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_no_system_header_prefix.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("no-undefined"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__no_undefined.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.LinkerInput), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("no-warnings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__no_warnings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_w.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("no_dead_strip_inits_and_terms"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_no__dead__strip__inits__and__terms.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nobuiltininc"), $("Disable builtin #include directories"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_nobuiltininc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nocpp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nocpp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nocudainc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nocudainc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nocudalib"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nocudalib.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nodefaultlibs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nodefaultlibs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nofixprebinding"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nofixprebinding.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nolibc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nolibc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("nologo"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_nologo.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nomultidefs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nomultidefs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nopie"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nopie.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("noprebind"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_noprebind.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("noseglinkedit"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_noseglinkedit.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nostartfiles"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nostartfiles.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nostdinc++"), $("Disable standard #include directories for the C++ standard library"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_nostdincxx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nostdinc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nostdinc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nostdlibinc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nostdlibinc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nostdlib"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_nostdlib.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("nostdsysteminc"), $("Disable standard system #include directories"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_nostdsysteminc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $n, $("Don't automatically start assembly file with a text section"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_n.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("O0"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_O0.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_O_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("O0"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_O0.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_O0.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("O4"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_O4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_O_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ObjC++"), $("Treat source input files as Objective-C++ inputs"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ObjCXX.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objc-isystem"), $("Add directory to the ObjC SYSTEM include search path"), $("<directory>"), ID.OPT_objc_isystem.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-atomic-property"), $("Make migration to 'atomic' properties"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_atomic_property.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-all"), $("Enable migration to modern ObjC"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_all.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-annotation"), $("Enable migration to property and method annotations"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_annotation.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-designated-init"), $("Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_designated_init.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-instancetype"), $("Enable migration to infer instancetype for method result type"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_instancetype.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-literals"), $("Enable migration to modern ObjC literals"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_literals.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-ns-macros"), $("Enable migration to NS_ENUM/NS_OPTIONS macros"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_nsmacros.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-property-dot-syntax"), $("Enable migration of setter/getter messages to property-dot syntax"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_property_dot_syntax.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-property"), $("Enable migration to modern ObjC property"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_property.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-protocol-conformance"), $("Enable migration to add protocol conformance on classes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_protocol_conformance.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-readonly-property"), $("Enable migration to modern ObjC readonly property"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_readonly_property.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-readwrite-property"), $("Enable migration to modern ObjC readwrite property"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_readwrite_property.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-migrate-subscripting"), $("Enable migration to modern ObjC subscripting"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_migrate_subscripting.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-ns-nonatomic-iosonly"), $("Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_ns_nonatomic_iosonly.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-returns-innerpointer-property"), $("Enable migration to annotate property with NS_RETURNS_INNER_POINTER"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_returns_innerpointer_property.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-white-list-dir-path="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_0.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_objcmt_whitelist_dir_path.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcmt-whitelist-dir-path="), $("Only modify files with a filename contained in the provided directory path"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_objcmt_whitelist_dir_path.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("objcxx-isystem"), $("Add directory to the ObjC++ SYSTEM include search path"), $("<directory>"), ID.OPT_objcxx_isystem.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("ObjC"), $("Treat source input files as Objective-C inputs"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_ObjC.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("object"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_object.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Od"), $("Disable optimization"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Od.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_O0.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Ofast"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Ofast.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_O_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Og"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Og.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Oi-"), $("Disable use of builtin functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Oi_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_builtin.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Oi"), $("Enable use of builtin functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Oi.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fbuiltin.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("openmp-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_openmp_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("openmp"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_openmp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("optimize="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__optimize_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_O.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("optimize"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__optimize.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_O.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Os"), $("Optimize for size"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Os.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_O.getValue(), $("s\000")), 
  new OptTable.Info(prefix_2, $("Ot"), $("Optimize for speed"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Ot.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_O.getValue(), $("2\000")), 
  new OptTable.Info(prefix_1, $("output-asm-variant"), $("Select the asm variant index to use for output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_output_asm_variant.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("output-class-directory="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__output_class_directory_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_foutput_class_dir_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("output-class-directory"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__output_class_directory.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_foutput_class_dir_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("output="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__output_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_o.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("output"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__output.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_o.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $O, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_O_flag.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_O.getValue(), $("2\000")), 
  new OptTable.Info(prefix_1, $O, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_O.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_O_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $O, $("Optimization level"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_O.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $o, $("Write output to <file>"), $("<file>"), ID.OPT_o.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.DriverOption | DriverFlag.RenderAsInput | ClangFlags.CC1Option | ClangFlags.CC1AsOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $o, $("Set output file or directory (ends in / or \\)"), $("<file or directory>"), ID.OPT__SLASH_o.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("pagezero_size"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_pagezero__size.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("param="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__param_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT__param.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("param"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__param.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("pass-exit-codes"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_pass_exit_codes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("pedantic-errors"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_pedantic_errors.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_pedantic_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("pedantic"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_pedantic.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_pedantic_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("pg"), $("Enable mcount instrumentation"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_pg.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("pic-is-pie"), $("File is for a position independent executable"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_pic_is_pie.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("pic-level"), $("Value for __PIC__"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_pic_level.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("pie"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_pie.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $pipe, $("Use pipes between commands, when possible"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_pipe.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("plugin-arg-"), $("Pass <arg> to plugin <name>"), $("<name> <arg>"), ID.OPT_plugin_arg.getValue(), $uint2uchar(Option.OptionClass.JoinedAndSeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("plugin"), $("Use the named plugin action instead of the default action (use \"help\" to list available options)"), $("<name>"), ID.OPT_plugin.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("preamble-bytes="), $("Assume that the precompiled header is a precompiled preamble covering the first N bytes of the main file"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_preamble_bytes_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("prebind_all_twolevel_modules"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_prebind__all__twolevel__modules.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("prebind"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_prebind.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("prefix="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__prefix_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_B.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("prefix"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__prefix.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_B.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("preload"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_preload.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("preprocess"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__preprocess.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_E.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("print-decl-contexts"), $("Print DeclContexts and their Decls"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_print_decl_contexts.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("print-diagnostic-categories"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__print_diagnostic_categories.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("print-file-name="), $("Print the full library path of <file>"), $("<file>"), ID.OPT_print_file_name_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("print-file-name"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__print_file_name.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_print_file_name_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("print-ivar-layout"), $("Enable Objective-C Ivar layout bitmap print trace"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_print_ivar_layout.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("print-libgcc-file-name"), $("Print the library path for \"libgcc.a\""), (/*const*/char$ptr/*char P*/ )null, ID.OPT_print_libgcc_file_name.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("print-missing-file-dependencies"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__print_missing_file_dependencies.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_MG.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("print-multi-directory"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_print_multi_directory.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("print-multi-lib"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_print_multi_lib.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("print-multi-os-directory"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_print_multi_os_directory.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("print-preamble"), $("Print the \"preamble\" of a file, which is a candidate for implicit precompiled headers."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_print_preamble.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("print-prog-name="), $("Print the full program path of <name>"), $("<name>"), ID.OPT_print_prog_name_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("print-prog-name"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__print_prog_name.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_print_prog_name_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("print-search-dirs"), $("Print the paths used for finding libraries and programs"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_print_search_dirs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("print-stats"), $("Print performance metrics and statistics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_print_stats.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("private_bundle"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_private__bundle.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("profile-blocks"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__profile_blocks.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_a.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("profile"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__profile.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_p.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("pthreads"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_pthreads.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("pthread"), $("Support POSIX threads in generated code"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_pthread.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $P, $("Disable linemarker output in -E mode"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_P.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $P, $("Preprocess to file"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_P.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $p, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_p.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Qfast_transcendentals"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Qfast_transcendentals.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("QIfist"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_QIfist.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Qimprecise_fwaits"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Qimprecise_fwaits.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Qn"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Qn.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Qpar"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Qpar.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Qunused-arguments"), $("Don't emit warning for unused driver arguments"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_Qunused_arguments.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Qvec-report"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Qvec_report.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Qvec-"), $("Disable the loop vectorization passes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Qvec_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_vectorize.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Qvec"), $("Enable the loop vectorization passes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Qvec.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fvectorize.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $Q, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Q.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("rdynamic"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_rdynamic.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("read_only_relocs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_read__only__relocs.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("relaxed-aliasing"), $("Turn off Type Based Alias Analysis"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_relaxed_aliasing.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("relocatable-pch"), $("Whether to build a relocatable precompiled header"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_relocatable_pch.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("remap-file"), $("Replace the contents of the <from> file with the contents of the <to> file"), $("<from>;<to>"), ID.OPT_remap_file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("remap"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_remap.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("resource-dir="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_resource_dir_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_resource_dir.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("resource-dir"), $("The directory which holds the compiler resource files"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_resource_dir.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option | ClangFlags.CoreOption | DriverFlag.HelpHidden, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("resource="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__resource_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fcompile_resource_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("resource"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__resource.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fcompile_resource_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("rewrite-legacy-objc"), $("Rewrite Legacy Objective-C source to C++"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_rewrite_legacy_objc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("rewrite-macros"), $("Expand macros without full preprocessing"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_rewrite_macros.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("rewrite-objc"), $("Rewrite Objective-C source to C++"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_rewrite_objc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("rewrite-test"), $("Rewriter playground"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_rewrite_test.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Rpass-analysis="), $("Report transformation analysis from optimization passes whose name matches the given POSIX regular expression"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_Rpass_analysis_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_R_value_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Rpass-missed="), $("Report missed transformations by optimization passes whose name matches the given POSIX regular expression"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_Rpass_missed_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_R_value_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Rpass="), $("Report transformations performed by optimization passes whose name matches the given POSIX regular expression"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_Rpass_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_R_value_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("rpath"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_rpath.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.LinkerInput), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("rsp-quoting="), $("Set the rsp quoting to either 'posix', or 'windows'"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_rsp_quoting.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CoreOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_internal_driver_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("RTC"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_RTC.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("rtlib="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_rtlib_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("rtlib"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__rtlib.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_rtlib_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $R, $("Enable the specified remark"), $("<remark>"), ID.OPT_R_Joined.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_R_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $r, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_r.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.LinkerInput | ClangFlags.NoArgumentUnused, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("save-temps="), $("Save intermediate compilation results."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_save_temps_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("save-temps"), $("Save intermediate compilation results"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_save_temps.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_save_temps_EQ.getValue(), $("cwd\000")), 
  new OptTable.Info(prefix_2, $("sdl-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_sdl_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("sdl"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_sdl.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("sectalign"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_sectalign.getValue(), $uint2uchar(Option.OptionClass.MultiArgClass), 3, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("sectcreate"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_sectcreate.getValue(), $uint2uchar(Option.OptionClass.MultiArgClass), 3, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("sectobjectsymbols"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_sectobjectsymbols.getValue(), $uint2uchar(Option.OptionClass.MultiArgClass), 2, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("sectorder"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_sectorder.getValue(), $uint2uchar(Option.OptionClass.MultiArgClass), 3, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("seg1addr"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_seg1addr.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("seg_addr_table_filename"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_seg__addr__table__filename.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("seg_addr_table"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_seg__addr__table.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("segaddr"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_segaddr.getValue(), $uint2uchar(Option.OptionClass.MultiArgClass), 2, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("segcreate"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_segcreate.getValue(), $uint2uchar(Option.OptionClass.MultiArgClass), 3, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("seglinkedit"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_seglinkedit.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("segprot"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_segprot.getValue(), $uint2uchar(Option.OptionClass.MultiArgClass), 3, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("segs_read_only_addr"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_segs__read__only__addr.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("segs_read_write_addr"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_segs__read__write__addr.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("segs_read_"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_segs__read__.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("serialize-diagnostic-file"), $("File for serializing diagnostics in a binary format"), $("<filename>"), ID.OPT_diagnostic_serialized_file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("serialize-diagnostics"), $("Serialize compiler diagnostics to a file"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__serialize_diags.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("shared-libasan"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_shared_libasan.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("shared-libgcc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_shared_libgcc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("shared"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_shared.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("show-encoding"), $("Show instruction encoding information in transliterate mode"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_show_encoding.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("show-includes"), $("Print cl.exe style /showIncludes to stdout"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_show_includes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("show-inst"), $("Show internal instruction representation in transliterate mode"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_show_inst.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("showIncludes"), $("Print info about included files to stderr"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_showIncludes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_show_includes.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("signed-char"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__signed_char.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_fsigned_char.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("single_module"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_single__module.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("specs="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_specs_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("specs"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_specs.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("split-dwarf-file"), $("File name to use for split dwarf debug info output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_split_dwarf_file.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("split-dwarf"), $("Split out the dwarf .dwo sections"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_split_dwarf.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("split-stacks"), $("Try to use a split stack if possible."), (/*const*/char$ptr/*char P*/ )null, ID.OPT_split_stacks.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("stack-protector-buffer-size"), $("Lower bound for a buffer to be considered for stack protection"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_stack_protector_buffer_size.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("stack-protector"), $("Enable stack protectors"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_stack_protector.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("static-define"), $("Should __STATIC__ be defined"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_static_define.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("static-libgcc"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_static_libgcc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("static-libgfortran"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_static_libgfortran.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_gfortran_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("static-libstdc++"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_static_libstdcxx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $static, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_static.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.NoArgumentUnused), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("std-default="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_std_default_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("std:"), $("Language standard to compile for"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_std.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("std="), $("Language standard to compile for"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_std_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("stdlib="), $("C++ standard library to use"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_stdlib_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("stdlib"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__stdlib.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_stdlib_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("std"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__std.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_std_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("sub_library"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_sub__library.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("sub_umbrella"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_sub__umbrella.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("sys-header-deps"), $("Include system headers in dependency output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_sys_header_deps.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("sysroot="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__sysroot_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("sysroot"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__sysroot.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT__sysroot_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("system-header-prefix="), $("Treat all #include paths starting with <prefix> as including a system header."), $("<prefix>"), ID.OPT_system_header_prefix.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_clang_i_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("system-header-prefix"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_anonymous_16.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_system_header_prefix.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $S, $("Only run preprocess and compilation steps"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_S.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $s, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_s.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("target-abi"), $("Target a particular ABI type"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_target_abi.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("target-cpu"), $("Target a specific cpu type"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_target_cpu.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("target-feature"), $("Target specific attributes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_target_feature.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("target-help"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__target_help.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("target-linker-version"), $("Target linker version"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_target_linker_version.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("target="), $("Generate code for the given target"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_target.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("target"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_target_legacy_spelling.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_target.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Tbss"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Tbss.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_T_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("TC"), $("Treat all source files as C"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_TC.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Tc"), $("Specify a C source file"), $("<filename>"), ID.OPT__SLASH_Tc.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Tdata"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Tdata.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_T_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("test-coverage"), $("Do not generate coverage files or remove coverage changes from IR"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_test_coverage.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("time"), $("Time individual commands"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_time.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("token-cache"), $("Use specified token cache file"), $("<path>"), ID.OPT_token_cache.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("TP"), $("Treat all source files as C++"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_TP.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Tp"), $("Specify a C++ source file"), $("<filename>"), ID.OPT__SLASH_Tp.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_compile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("trace-includes"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__trace_includes.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_H.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("traditional-cpp"), $("Enable some traditional CPP emulation"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_traditional_cpp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("traditional"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_traditional.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("trigraphs"), $("Process trigraph sequences"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_trigraphs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_ftrigraphs.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("trim-egraph"), $("Only show error-related paths in the analysis graph"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_trim_egraph.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("triple="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_triple_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_triple.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("triple"), $("Specify target triple (e.g. i686-apple-darwin9)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_triple.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Ttext"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Ttext.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_T_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("twolevel_namespace_hints"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_twolevel__namespace__hints.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("twolevel_namespace"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_twolevel__namespace.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $T, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_T.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_T_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $t, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_t.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("umbrella"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_umbrella.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("undefine-macro="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__undefine_macro_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_U.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("undefine-macro"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__undefine_macro.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_U.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("undefined"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_undefined.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_u_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $undef, $("undef all system defines"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_undef.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_u_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("unexported_symbols_list"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_unexported__symbols__list.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("unoptimized-cfg"), $("Generate unoptimized CFGs for all analyses"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_analysis_UnoptimizedCFG.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("unsigned-char"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__unsigned_char.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_funsigned_char.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("user-dependencies"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__user_dependencies.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_MM.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $U, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_U.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $U, $("Undefine macro"), $("<macro>"), ID.OPT__SLASH_U.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_U.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $u, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_u.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, 0, ID.OPT_u_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $u, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_u.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("vd"), $("Control vtordisp placement"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_vd.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_vtordisp_mode_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("vectorize-loops"), $("Run the Loop vectorization passes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_vectorize_loops.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("vectorize-slp-aggressive"), $("Run the BB vectorization passes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_vectorize_slp_aggressive.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("vectorize-slp"), $("Run the SLP vectorization passes"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_vectorize_slp.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("verbose"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__verbose.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_v.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("verify-debug-info"), $("Verify the binary representation of debug output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_verify_debug_info.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("verify-ignore-unexpected="), $("Ignore unexpected diagnostic messages"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_verify_ignore_unexpected_EQ.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("verify-ignore-unexpected"), $("Ignore unexpected diagnostic messages"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_verify_ignore_unexpected.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("verify-pch"), $("Load and verify that a pre-compiled header file is not stale"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_verify_pch.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_Action_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("verify"), $("Verify diagnostic output using comment directives"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_verify.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("version"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__version.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("version"), $("Print the compiler version"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_version.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_4, $("via-file-asm"), $("Write assembly to file for input to assemble jobs"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_via_file_asm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.DriverOption | DriverFlag.HelpHidden | ClangFlags.CoreOption, ID.OPT_internal_debug_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("vmb"), $("Use a best-case representation method for member pointers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_vmb.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("vmg"), $("Use a most-general representation for member pointers"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_vmg.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("vmm"), $("Set the default most-general representation to multiple inheritance"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_vmm.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("vms"), $("Set the default most-general representation to single inheritance"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_vms.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("vmv"), $("Set the default most-general representation to virtual inheritance"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_vmv.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("volatile:iso"), $("Volatile loads and stores have standard semantics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_volatile_iso.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT__SLASH_volatile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("volatile:ms"), $("Volatile loads and stores have acquire and release semantics"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_volatile_ms.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT__SLASH_volatile_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("vtordisp-mode="), $("Control vtordisp placement on win32 targets"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_vtordisp_mode_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $V, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_V.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.DriverOption | ClangFlags.Unsupported, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $V, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_V.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $v, $("Show commands to run and use verbose output"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_v.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("W0"), $("Disable all warnings"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_W0.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_w.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("W1"), $("Enable -Wall"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_W1.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_Wall.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("W2"), $("Enable -Wall"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_W2.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_Wall.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("W3"), $("Enable -Wall"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_W3.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_Wall.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("W4"), $("Enable -Wall and -Wextra"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_W4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_WCL4.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wa,"), $("Pass the comma separated arguments in <arg> to the assembler"), $("<arg>"), ID.OPT_Wa_COMMA.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wall"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wall.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Wall"), $("Enable -Wall and -Wextra"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Wall.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_WCL4.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("warn-="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__warn__EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_W_Joined.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("warn-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__warn_.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_W_Joined.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("WCL4"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_WCL4.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("wd4005"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_wd4005.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_W_Joined.getValue(), $("no-macro-redefined\000")), 
  new OptTable.Info(prefix_2, $("wd4100"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_wd4100.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_W_Joined.getValue(), $("no-unused-parameter\000")), 
  new OptTable.Info(prefix_2, $("wd4910"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_wd4910.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_W_Joined.getValue(), $("no-dllexport-explicit-instantiation-decl\000")), 
  new OptTable.Info(prefix_2, $("wd4996"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_wd4996.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_W_Joined.getValue(), $("no-deprecated-declarations\000")), 
  new OptTable.Info(prefix_1, $("Wdeprecated"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wdeprecated.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("weak-l"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_weak_l.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.LinkerInput), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("weak_framework"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_weak__framework.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.LinkerInput), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("weak_library"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_weak__library.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, $uint2ushort(ClangFlags.LinkerInput), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("weak_reference_mismatches"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_weak__reference__mismatches.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wextra"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wextra.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wframe-larger-than="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wframe_larger_than_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("whatsloaded"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_whatsloaded.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("whyload"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_whyload.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wl,"), $("Pass the comma separated arguments in <arg> to the linker"), $("<arg>"), ID.OPT_Wl_COMMA.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, ClangFlags.LinkerInput | DriverFlag.RenderAsInput, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wlarge-by-value-copy="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wlarge_by_value_copy_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wlarge-by-value-copy"), $("Warn if a function definition returns or accepts an object larger in bytes than a given value"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wlarge_by_value_copy_def.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(DriverFlag.HelpHidden), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wlarger-than-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wlarger_than_.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_Wlarger_than_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wlarger-than="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wlarger_than_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_clang_ignored_f_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("WL"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_WL.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wno-deprecated"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wno_deprecated.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wno-nonportable-cfstrings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wno_nonportable_cfstrings.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wno-rewrite-macros"), $("Silence ObjC rewriting warnings"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wno_rewrite_macros.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CC1Option | ClangFlags.NoDriverOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wno-write-strings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wno_write_strings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wnonportable-cfstrings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wnonportable_cfstrings.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("working-directory="), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_working_directory_EQ.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_working_directory.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("working-directory"), $("Resolve file paths relative to the specified directory"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_working_directory.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wp,"), $("Pass the comma separated arguments in <arg> to the preprocessor"), $("<arg>"), ID.OPT_Wp_COMMA.getValue(), $uint2uchar(Option.OptionClass.CommaJoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Wp64"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Wp64.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("write-dependencies"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__write_dependencies.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_MD.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $("write-user-dependencies"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__write_user_dependencies.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_MMD.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Wwrite-strings"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Wwrite_strings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("WX-"), $("Do not treat warnings as errors"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_WX_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_W_Joined.getValue(), $("no-error\000")), 
  new OptTable.Info(prefix_2, $("WX"), $("Treat warnings as errors"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_WX.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_W_Joined.getValue(), $("error\000")), 
  new OptTable.Info(prefix_1, $W, $("Enable the specified warning"), $("<warning>"), ID.OPT_W_Joined.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CC1Option | ClangFlags.CoreOption, ID.OPT_W_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $w, $("Suppress all warnings"), (/*const*/char$ptr/*char P*/ )null, ID.OPT_w.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, $uint2ushort(ClangFlags.CC1Option), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $w, $("Disable all warnings"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_w_flag.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_w.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $w, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_w.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Xanalyzer"), $("Pass <arg> to the static analyzer"), $("<arg>"), ID.OPT_Xanalyzer.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Xarch_"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Xarch__.getValue(), $uint2uchar(Option.OptionClass.JoinedAndSeparateClass), 0, $uint2ushort(ClangFlags.DriverOption), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Xassembler"), $("Pass <arg> to the assembler"), $("<arg>"), ID.OPT_Xassembler.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Xclang"), $("Pass <arg> to the clang compiler"), $("<arg>"), ID.OPT_Xclang.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_CompileOnly_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Xcuda-fatbinary"), $("Pass <arg> to fatbinary invocation"), $("<arg>"), ID.OPT_Xcuda_fatbinary.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Xcuda-ptxas"), $("Pass <arg> to the ptxas assembler"), $("<arg>"), ID.OPT_Xcuda_ptxas.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Xlinker"), $("Pass <arg> to the linker"), $("<arg>"), ID.OPT_Xlinker.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.LinkerInput | DriverFlag.RenderAsInput, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Xpreprocessor"), $("Pass <arg> to the preprocessor"), $("<arg>"), ID.OPT_Xpreprocessor.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $X, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_X_Flag.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $X, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_X_Joined.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $X, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_X.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $x, $("Treat subsequent input files as having type <language>"), $("<language>"), ID.OPT_x.getValue(), $uint2uchar(Option.OptionClass.JoinedOrSeparateClass), 0, ClangFlags.DriverOption | ClangFlags.CC1Option, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Y-"), $("Disable precompiled headers, overrides /Yc and /Yu"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Y_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Yc"), $("Generate a pch file for all code up to and including <filename>"), $("<filename>"), ID.OPT__SLASH_Yc.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Yd"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Yd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Yl"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Yl.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Yu"), $("Load a pch file and use it instead of all code up to and including <filename>"), $("<filename>"), ID.OPT__SLASH_Yu.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $y, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_y.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Z-reserved-lib-cckext"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Z_reserved_lib_cckext.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.LinkerInput | ClangFlags.NoArgumentUnused | ClangFlags.Unsupported, ID.OPT_reserved_lib_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Z-reserved-lib-stdc++"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Z_reserved_lib_stdcxx.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.LinkerInput | ClangFlags.NoArgumentUnused | ClangFlags.Unsupported, ID.OPT_reserved_lib_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Z-Xlinker-no-demangle"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Z_Xlinker__no_demangle.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.Unsupported | ClangFlags.NoArgumentUnused, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Z7"), $("Enable CodeView debug information in object files"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Z7.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Za"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Za.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:auto"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_auto.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:forScope"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_forScope.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:inline"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_inline.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:rvalueCast"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_rvalueCast.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:sizedDealloc-"), $("Disable C++14 sized global deallocation functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_sizedDealloc_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_sized_deallocation.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:sizedDealloc"), $("Enable C++14 sized global deallocation functions"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_sizedDealloc.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fsized_deallocation.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:strictStrings"), $("Treat string literals as const"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_strictStrings.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_W_Joined.getValue(), $("error=c++11-compat-deprecated-writable-strings\000")), 
  new OptTable.Info(prefix_2, $("Zc:threadSafeInit-"), $("Disable thread-safe initialization of static variables"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_threadSafeInit_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_threadsafe_statics.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:threadSafeInit"), $("Enable thread-safe initialization of static variables"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_threadSafeInit.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fthreadsafe_statics.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:trigraphs-"), $("Disable trigraphs (default)"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_trigraphs_off.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fno_trigraphs.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:trigraphs"), $("Enable trigraphs"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_trigraphs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_ftrigraphs.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:wchar_t"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc_wchar_t.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zc:"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zc.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zd"), $("Emit debug line number tables only"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zd.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Ze"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Ze.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zg"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zg.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("ZI"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_ZI.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zi"), $("Alias for /Z7. Does not produce PDBs."), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zi.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT__SLASH_Z7.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $("Zlinker-input"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Zlinker_input.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.Unsupported | ClangFlags.NoArgumentUnused, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zl"), $("Don't mention any default libraries in the object file"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zl.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zm"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zm.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zo-"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zo_.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zo"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zo.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption | DriverFlag.HelpHidden, ID.OPT_cl_ignored_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zp"), $("Set the default maximum struct packing alignment to 1"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zp_flag.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fpack_struct_EQ.getValue(), $("1\000")), 
  new OptTable.Info(prefix_2, $("Zp"), $("Specify the default maximum struct packing alignment"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zp.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fpack_struct_EQ.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("Zs"), $("Syntax-check only"), (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_Zs.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_fsyntax_only.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_2, $("ZW"), (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__SLASH_ZW.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, ClangFlags.CLOption | ClangFlags.DriverOption, ID.OPT_cl_Group.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $Z, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Z_Flag.getValue(), $uint2uchar(Option.OptionClass.FlagClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $Z, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT_Z_Joined.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, 0, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_1, $z, $("Pass -z <arg> to the linker"), $("<arg>"), ID.OPT_z.getValue(), $uint2uchar(Option.OptionClass.SeparateClass), 0, ClangFlags.LinkerInput | DriverFlag.RenderAsInput, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $EMPTY, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__DASH_DASH.getValue(), $uint2uchar(Option.OptionClass.RemainingArgsClass), 0, ClangFlags.DriverOption | ClangFlags.CoreOption, ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null), 
  new OptTable.Info(prefix_3, $EMPTY, (/*const*/char$ptr/*char P*/ )null, (/*const*/char$ptr/*char P*/ )null, ID.OPT__.getValue(), $uint2uchar(Option.OptionClass.JoinedClass), 0, $uint2ushort(ClangFlags.Unsupported), ID.OPT_INVALID.getValue(), ID.OPT_INVALID.getValue(), (/*const*/char$ptr/*char P*/ )null)  
};
}
} // END OF class DriverOptionsStatics
