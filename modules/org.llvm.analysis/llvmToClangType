#add common conversions of types
<include> "../../contrib/JConvert/llvmToClankType"

[DELEGATE_BODY=LLVM39]
<include> "./commands_org.llvm.analysis_delegates.properties"
[DELEGATE_BODY=LLVM38]
<include> "./commands_org.llvm.analysis_delegates.properties"
[DELEGATE_BODY=LLVM36]
<include> "./commands_prev_org.llvm.analysis_delegates.properties"

[IMPORTS]
<include> "./JavaImports"

[OLD_NEW_POSITIONS_MAP]
path = ./updated_positions.txt

[TYPES_MAP]

BlockFrequencyInfo * (const Function & ) = Function2BlockFrequencyInfo
Result (const Function & ) = Function2TargetTransformInfo

bool (const Loop * , const Loop * ) const = LoopLoop2Bool

const SCEV * (ScalarEvolution::*)(const SCEV * , Type * ) = SCEVType2SCEV

const SCEV * (ScalarEvolution::*const)(const SCEV * , Type * ) = SCEVType2SCEV

const SCEV * (const SCEV * , Type * ) = SCEVType2SCEV

double (* )(double) = Double2Double

double (* )(double, double) = DoubleDouble2Double
void (* )(Function & , AnalysisManager<Function> & , AAResults & ) = FunctionAnalysisManager$FunctionAAResults2Void

void (Pass & , Function & , AAResults & ) = PassFunctionAAResults2Void

[EXTRA_MEMBERS]
(anonymous namespace)::AliasSetPrinter = TEXT#public static final/*char*/Class<AliasSetPrinter> ID $EQ AliasSetPrinter.class; // Pass identification, replacement for typeid
(anonymous namespace)::CFGOnlyPrinter = TEXT#public static final/*char*/Class<CFGOnlyPrinter> ID $EQ CFGOnlyPrinter.class; // Pass identification, replacement for typeid
(anonymous namespace)::CFGPrinter = TEXT#public static final/*char*/Class<CFGPrinter> ID $EQ CFGPrinter.class; // Pass identification, replacement for typeid
(anonymous namespace)::CFGViewer = TEXT#public static final/*char*/Class<CFGViewer> ID $EQ CFGViewer.class; // Pass identifcation, replacement for typeid
(anonymous namespace)::CGPassManager = TEXT#public static final/*char*/Class<CGPassManager> ID $EQ CGPassManager.class;
(anonymous namespace)::CallGraphDOTPrinter = TEXT#public static final/*char*/Class<CallGraphDOTPrinter> ID $EQ CallGraphDOTPrinter.class;
(anonymous namespace)::CallGraphPrinterLegacyPass = TEXT#public static final/*char*/Class<CallGraphPrinterLegacyPass> ID $EQ CallGraphPrinterLegacyPass.class; // Pass ID, replacement for typeid
(anonymous namespace)::CallGraphViewer = TEXT#public static final/*char*/Class<CallGraphViewer> ID $EQ CallGraphViewer.class;
(anonymous namespace)::CostModelAnalysis = TEXT#public static final/*char*/Class<CostModelAnalysis> ID $EQ CostModelAnalysis.class; // Class identification, replacement for typeinfo
(anonymous namespace)::Delinearization = TEXT#public static final/*char*/Class<Delinearization> ID $EQ Delinearization.class; // Pass identification, replacement for typeid
(anonymous namespace)::DomOnlyPrinter = TEXT#public static final/*char*/Class<DomOnlyPrinter> ID $EQ DomOnlyPrinter.class;
(anonymous namespace)::DomOnlyViewer = TEXT#public static final/*char*/Class<DomOnlyViewer> ID $EQ DomOnlyViewer.class;
(anonymous namespace)::DomPrinter = TEXT#public static final/*char*/Class<DomPrinter> ID $EQ DomPrinter.class;
(anonymous namespace)::DomViewer = TEXT#public static final/*char*/Class<DomViewer> ID $EQ DomViewer.class;
(anonymous namespace)::DominatorTreeWrapperPassAnalysisGraphTraits = EXTENDS#DefaultAnalysisGraphTraits<DominatorTreeWrapperPass,DominatorTree>
(anonymous namespace)::ExternalAAWrapperPass = TEXT#public static final/*char*/Class<ExternalAAWrapperPass> ID $EQ ExternalAAWrapperPass.class;
(anonymous namespace)::InstCount = TEXT#public static final/*char*/Class<InstCount> ID $EQ InstCount.class; // Pass identification, replacement for typeid
(anonymous namespace)::Lint = TEXT#public static final/*char*/Class<Lint> ID $EQ Lint.class; // Pass identification, replacement for typeid
(anonymous namespace)::MemDepPrinter = TEXT#public static final/*char*/Class<MemDepPrinter> ID $EQ MemDepPrinter.class; // Pass identifcation, replacement for typeid
(anonymous namespace)::MemDerefPrinter = TEXT#public static final/*char*/Class<MemDerefPrinter> ID $EQ MemDerefPrinter.class; // Pass identification, replacement for typeid
(anonymous namespace)::ModuleDebugInfoPrinter = TEXT#public static final/*char*/Class<ModuleDebugInfoPrinter> ID $EQ ModuleDebugInfoPrinter.class; // Pass identification, replacement for typeid
(anonymous namespace)::PostDomOnlyPrinter = TEXT#public static final/*char*/Class<PostDomOnlyPrinter> ID $EQ PostDomOnlyPrinter.class;
(anonymous namespace)::PostDomOnlyViewer = TEXT#public static final/*char*/Class<PostDomOnlyViewer> ID $EQ PostDomOnlyViewer.class;
(anonymous namespace)::PostDomPrinter = TEXT#public static final/*char*/Class<PostDomPrinter> ID $EQ PostDomPrinter.class;
(anonymous namespace)::PostDomViewer = TEXT#public static final/*char*/Class<PostDomViewer> ID $EQ PostDomViewer.class;
(anonymous namespace)::PostDominatorTreeWrapperPassAnalysisGraphTraits = EXTENDS#DefaultAnalysisGraphTraits<PostDominatorTreeWrapperPass, PostDominatorTree>
(anonymous namespace)::PrintCallGraphPass = TEXT#public static final/*char*/Class<PrintCallGraphPass> ID $EQ PrintCallGraphPass.class;
(anonymous namespace)::PrintLoopPassWrapper = TEXT#public static final/*char*/Class<PrintLoopPassWrapper> ID $EQ PrintLoopPassWrapper.class;
(anonymous namespace)::PrintRegionPass = TEXT#public static final/*char*/Class<PrintRegionPass> ID $EQ PrintRegionPass.class;
(anonymous namespace)::RegionInfoPassGraphTraits = EXTENDS#DefaultAnalysisGraphTraits<RegionInfoPass,RegionInfo>
(anonymous namespace)::RegionOnlyPrinter = TEXT#public static final/*char*/Class<RegionOnlyPrinter> ID $EQ RegionOnlyPrinter.class;
(anonymous namespace)::RegionOnlyViewer = TEXT#public static final/*char*/Class<RegionOnlyViewer> ID $EQ RegionOnlyViewer.class;
(anonymous namespace)::RegionPrinter = TEXT#public static final/*char*/Class<RegionPrinter> ID $EQ RegionPrinter.class;
(anonymous namespace)::RegionViewer = TEXT#public static final/*char*/Class<RegionViewer> ID $EQ RegionViewer.class;
(anonymous namespace)::WorkListItem = FILE#./extra_members/WorkListItemExtraMembers.java
AllocFnsTy = FILE#./extra_members/AllocFnsTyExtraMembers.java
llvm::AAEvalLegacyPass = TEXT#public static final/*char*/Class<AAEvalLegacyPass> ID $EQ AAEvalLegacyPass.class; // Pass identification, replacement for typeid
llvm::AAManager::getFunctionAAResultImpl = T0EXTENDS#AnalysisInfoMixin<AnalysisT>
llvm::AAManager::getModuleAAResultImpl = T0EXTENDS#AnalysisInfoMixin<AnalysisT>
llvm::AAManager::registerFunctionAnalysis = T0EXTENDS#AnalysisInfoMixin<AnalysisT>
llvm::AAManager::registerModuleAnalysis = T0EXTENDS#AnalysisInfoMixin<AnalysisT>
llvm::AAResultBase = T0EXTENDS#AAResultBase
llvm::AAResultBase = TEXT#public void $destroy() { }
llvm::AAResultBase::AAResultsProxy = T0EXTENDS#AAResultBase
llvm::AAResults::addAAResult = T0EXTENDS#AAResultBase
llvm::AAResultsWrapperPass = TEXT#public static final/*char*/Class<AAResultsWrapperPass> ID $EQ AAResultsWrapperPass.class;
llvm::AliasSetTracker = IMPLEMENTS#Iterable<AliasSet>
llvm::AliasSetTracker = FILE#./extra_members/AliasSetTrackerExtraMembers.java
llvm::AnalysisCallGraphWrapperPassTraits = EXTENDS#DefaultAnalysisGraphTraits<CallGraphWrapperPass,CallGraph>
llvm::AssumptionCacheTracker = FILE#./extra_members/AssumptionCacheTrackerExtraMembers.java
llvm::AssumptionCacheTracker::FunctionCallbackVH = FILE#./extra_members/FunctionCallbackVHExtraMembers.java
llvm::AssumptionPrinterPass = IMPLEMENTS#IPassFunction<PreservedAnalyses>
llvm::BasicAA = TEXT#public static final/*char*/Class<BasicAA> PassID $EQ BasicAA.class;
llvm::BasicAA = IMPLEMENTS#IPassFunction<BasicAAResult>
llvm::BasicAAResult::VariableGEPIndex = FILE#./extra_members/VariableGEPIndexExtraMembers.java
llvm::BasicAAWrapperPass = TEXT#public static final/*char*/Class<BasicAAWrapperPass> ID $EQ BasicAAWrapperPass.class;
llvm::BlockFrequencyAnalysis = TEXT#public static final/*char*/Class<BlockFrequencyAnalysis> PassID $EQ BlockFrequencyAnalysis.class;
llvm::BlockFrequencyAnalysis = IMPLEMENTS#IPassFunction<BlockFrequencyInfo>
llvm::BlockFrequencyInfoImpl = FILE#./extra_members/BlockFrequencyInfoImplExtraMembers.java
llvm::BlockFrequencyInfoImplBase::BlockNode = FILE#./extra_members/BlockNodeExtraMembers.java
llvm::BlockFrequencyInfoImplBase::BlockNode = IMPLEMENTS#NativeCloneable<BlockNode>, Comparable<BlockNode>
llvm::BlockFrequencyInfoImplBase::LoopData = TEXT#public LoopData() { }
llvm::BlockFrequencyInfoImplBase::LoopData::LoopData = T0EXTENDS#type$iterator<?, ? extends BlockNode>
llvm::BlockFrequencyInfoImplBase::LoopData::LoopData = T1EXTENDS#type$iterator<?, ? extends BlockNode>
llvm::BlockFrequencyInfoImplBase::WorkingData = TEXT#public WorkingData() {}
llvm::BlockFrequencyInfoWrapperPass = TEXT#public static final/*char*/Class<BlockFrequencyInfoWrapperPass> ID $EQ BlockFrequencyInfoWrapperPass.class;
llvm::BlockFrequencyPrinterPass = IMPLEMENTS#IPassFunction<PreservedAnalyses>
llvm::BranchProbabilityAnalysis = TEXT#private static Class<BranchProbabilityAnalysis> PassID $EQ BranchProbabilityAnalysis.class;
llvm::BranchProbabilityAnalysis = IMPLEMENTS#IPassFunction<BranchProbabilityInfo>
llvm::BranchProbabilityInfoWrapperPass = TEXT#public static final/*char*/Class<BranchProbabilityInfoWrapperPass> ID $EQ BranchProbabilityInfoWrapperPass.class;
llvm::BranchProbabilityPrinterPass = IMPLEMENTS#IPassFunction<PreservedAnalyses>
llvm::CFLAndersAA = TEXT#private static Class<CFLAndersAA> PassID $EQ CFLAndersAA.class;
llvm::CFLAndersAA = IMPLEMENTS#IPassFunction<CFLAndersAAResult>
llvm::CFLAndersAAWrapperPass = TEXT#public static final/*char*/Class<CFLAndersAAWrapperPass> ID $EQ CFLAndersAAWrapperPass.class;
llvm::CFLSteensAA = IMPLEMENTS#IPassFunction<CFLSteensAAResult>
llvm::CFLSteensAA = TEXT#private static Class<CFLSteensAA> PassID $EQ CFLSteensAA.class;
llvm::CFLSteensAAWrapperPass = TEXT#public static final/*char*/Class<CFLSteensAAWrapperPass> ID $EQ CFLSteensAAWrapperPass.class;
llvm::CGSCCToFunctionPassAdaptor = T0EXTENDS#IPassFunction<PreservedAnalyses>
llvm::CallGraph = TEXT#public @Override Iterator<std.pairPtrType<Function,unique_ptr<CallGraphNode>>> iterator() { return new JavaIterator<>(begin(), end()); }
llvm::CallGraph = IMPLEMENTS#Iterable<std.pairPtrType<Function,unique_ptr<CallGraphNode>>>
llvm::CallGraphAnalysis = TEXT#private static Class<CallGraphAnalysis> PassID $EQ CallGraphAnalysis.class;
llvm::CallGraphAnalysis = IMPLEMENTS#IPassModule<CallGraph>
llvm::CallGraphNode = TEXT#public @Override Iterator<pairTypePtr<WeakVH, CallGraphNode>> iterator() { return new JavaIterator<>(begin(), end()); }
llvm::CallGraphNode = IMPLEMENTS#CallGraphNodeBase, Iterable<std.pairTypePtr<WeakVH, CallGraphNode /*P*/ >>
llvm::CallGraphPrinterPass = IMPLEMENTS#IPassModule<PreservedAnalyses>
llvm::CallGraphSCC = IMPLEMENTS#CallGraphSCCBase
llvm::CallGraphSCC = FILE#./extra_members/CallGraphSCCExtraMembers.java
llvm::CallGraphWrapperPass = TEXT#public static final/*char*/Class<CallGraphWrapperPass> ID $EQ CallGraphWrapperPass.class; // Class identification, replacement for typeinfo
llvm::DFCalculateWorkObject = FILE#./extra_members/DFCalculateWorkObjectExtraMembers.java
llvm::DOTGraphTraitsModulePrinter = T0EXTENDS#ModulePass
llvm::DOTGraphTraitsModulePrinter = T3EXTENDS#DefaultAnalysisGraphTraits<AnalysisT,GraphT>
llvm::DOTGraphTraitsModulePrinter = FILE#./extra_members/DOTGraphTraitsModulePrinterExtraMembers.java
llvm::DOTGraphTraitsModuleViewer = T0EXTENDS#ModulePass
llvm::DOTGraphTraitsModuleViewer = T3EXTENDS#DefaultAnalysisGraphTraits<AnalysisT,GraphT>
llvm::DOTGraphTraitsModuleViewer = FILE#./extra_members/DOTGraphTraitsModuleViewerExtraMembers.java
llvm::DOTGraphTraitsPrinter = T0EXTENDS#Pass
llvm::DOTGraphTraitsPrinter = T3EXTENDS#DefaultAnalysisGraphTraits<AnalysisT,GraphT>
llvm::DOTGraphTraitsPrinter = FILE#./extra_members/DOTGraphTraitsPrinterExtraMembers.java
llvm::DOTGraphTraitsViewer = T0EXTENDS#Pass
llvm::DOTGraphTraitsViewer = T3EXTENDS#DefaultAnalysisGraphTraits<AnalysisT,GraphT>
llvm::DOTGraphTraitsViewer = FILE#./extra_members/DOTGraphTraitsViewerExtraMembers.java
llvm::DemandedBitsAnalysis = IMPLEMENTS#IPassFunction<DemandedBits>
llvm::DemandedBitsAnalysis = TEXT#private static Class<DemandedBitsAnalysis> PassID $EQ DemandedBitsAnalysis.class;
llvm::DemandedBitsPrinterPass = IMPLEMENTS#IPassFunction<PreservedAnalyses>
llvm::DemandedBitsWrapperPass = TEXT#public static final/*char*/Class<DemandedBitsWrapperPass> ID $EQ DemandedBitsWrapperPass.class; // Pass identification, replacement for typeid
llvm::DenseMapInfo<MemoryLocation> = FILE#./extra_members/DenseMapInfoMemoryLocationExtraMembers.java
llvm::DenseMapInfo<MemoryLocation> = IMPLEMENTS#DenseMapInfo<MemoryLocation>
llvm::DependenceAnalysis = IMPLEMENTS#IPassFunction<DependenceInfo>
llvm::DependenceAnalysis = TEXT#private static Class<DependenceAnalysis> PassID $EQ DependenceAnalysis.class;
llvm::DependenceAnalysisWrapperPass = TEXT#public static final/*char*/Class<DependenceAnalysisWrapperPass> ID $EQ DependenceAnalysisWrapperPass.class; // Class identification, replacement for typeinfo
llvm::DependenceInfo::Subscript = FILE#./extra_members/SubscriptExtraMembers.java
llvm::DivergenceAnalysis = TEXT#public static final/*char*/Class<DivergenceAnalysis> ID $EQ DivergenceAnalysis.class;
llvm::DominanceFrontierAnalysis = IMPLEMENTS#IPassFunction<DominanceFrontier>
llvm::DominanceFrontierBase = T0EXTENDS#Value
llvm::DominanceFrontierBase = FILE#./extra_members/DominanceFrontierBaseExtraMembers.java
llvm::DominanceFrontierPrinterPass = IMPLEMENTS#IPassFunction<PreservedAnalyses>
llvm::DominanceFrontierWrapperPass = TEXT#public static final/*char*/Class<DominanceFrontierWrapperPass> ID $EQ DominanceFrontierWrapperPass.class; // Pass ID, replacement for typeid
llvm::DummyCGSCCPass = TEXT#public static final/*char*/Class<DummyCGSCCPass> ID $EQ DummyCGSCCPass.class;
llvm::ForwardDominanceFrontierBase = FILE#./extra_members/ForwardDominanceFrontierBaseExtraMembers.java
llvm::ForwardDominanceFrontierBase = T0EXTENDS#Value
llvm::FullDependence = FILE#./extra_members/FullDependenceExtraMembers.java
llvm::FunctionToLoopPassAdaptor = IMPLEMENTS#IPassFunction<PreservedAnalyses>
llvm::FunctionToLoopPassAdaptor = T0EXTENDS#IPassLoop<PreservedAnalyses>
llvm::GlobalsAA = TEXT#private static Class<GlobalsAA> PassID $EQ GlobalsAA.class;
llvm::GlobalsAA = IMPLEMENTS#IPassModule<GlobalsAAResult>
llvm::GlobalsAAResult::DeletionCallbackHandle = FILE#./extra_members/DeletionCallbackHandleExtraMembers.java
llvm::GlobalsAAWrapperPass = TEXT#public static final/*char*/Class<GlobalsAAWrapperPass> ID $EQ GlobalsAAWrapperPass.class;
llvm::GraphTraits<IrreducibleGraph> = IMPLEMENTS#GraphTraits<IrreducibleGraph, IrreducibleGraph.IrrNode, IrreducibleGraph.IrrNode>
llvm::IDFCalculator = FILE#./extra_members/IDFCalculatorExtraMembers.java
llvm::IVUsersWrapperPass = TEXT#public static final/*char*/Class<IVUsersWrapperPass> ID $EQ IVUsersWrapperPass.class;
llvm::IntervalPartition = TEXT#public static final/*char*/Class<IntervalPartition> ID $EQ IntervalPartition.class; // Pass identification, replacement for typeid
llvm::LazyBlockFrequencyInfoPass = TEXT#public static final/*char*/Class<LazyBlockFrequencyInfoPass> ID $EQ LazyBlockFrequencyInfoPass.class;
llvm::LazyCallGraph::SCC = IMPLEMENTS#Iterable<Node /*P*/>
llvm::LazyCallGraph::SCC = FILE#./extra_members/SCCExtraMembers.java
llvm::LazyCallGraphDOTPrinterPass = IMPLEMENTS#IPassModule<PreservedAnalyses>
llvm::LoopAccessLegacyAnalysis = TEXT#public static final/*char*/Class<LoopAccessLegacyAnalysis> ID $EQ LoopAccessLegacyAnalysis.class;
llvm::LoopInfoBase = IMPLEMENTS#Iterable<LoopT /*P*/>
llvm::LoopInfoBase = FILE#./extra_members/LoopInfoBaseExtraMembers.java
llvm::LoopInfoWrapperPass = TEXT#public static final/*char*/Class<LoopInfoWrapperPass> ID $EQ LoopInfoWrapperPass.class; // Pass identification, replacement for typeid
llvm::MemoryDependenceWrapperPass = TEXT#public static final/*char*/Class<MemoryDependenceWrapperPass> ID $EQ MemoryDependenceWrapperPass.class;
llvm::OptimizationRemarkEmitterWrapperPass = TEXT#public static final/*char*/Class<OptimizationRemarkEmitterWrapperPass> ID $EQ OptimizationRemarkEmitterWrapperPass.class;
llvm::PostDominatorTreeWrapperPass = TEXT#public static final/*char*/Class<PostDominatorTreeWrapperPass> ID $EQ PostDominatorTreeWrapperPass.class; // Pass identification, replacement for typeid
llvm::ProfileSummaryInfoWrapperPass = TEXT#public static final/*char*/Class<ProfileSummaryInfoWrapperPass> ID $EQ ProfileSummaryInfoWrapperPass.class;
llvm::RGPassManager = TEXT#public static final/*char*/Class<RGPassManager> ID $EQ RGPassManager.class;
llvm::RegionInfoPass = TEXT#public static final/*char*/Class<RegionInfoPass> ID $EQ RegionInfoPass.class;
llvm::SCEVAAWrapperPass = TEXT#public static final/*char*/Class<SCEVAAWrapperPass> ID $EQ SCEVAAWrapperPass.class;
llvm::ScalarEvolutionAnalysis = IMPLEMENTS#IPassFunction<ScalarEvolution>
llvm::ScalarEvolutionWrapperPass = TEXT#public static final/*char*/Class<ScalarEvolutionWrapperPass> ID $EQ ScalarEvolutionWrapperPass.class;
llvm::ScopedNoAliasAAWrapperPass = TEXT#public static final/*char*/Class<ScopedNoAliasAAWrapperPass> ID $EQ ScopedNoAliasAAWrapperPass.class;
llvm::TargetFolder = IMPLEMENTS#org.llvm.ir.java.IFolder<Constant, Constant>
llvm::TargetFolder = FILE#./extra_members/TargetFolderExtraMembers.java
llvm::TargetLibraryAnalysis = IMPLEMENTS#IPassModule<TargetLibraryInfo>, IPassFunction<TargetLibraryInfo>
llvm::TargetLibraryInfoWrapperPass = TEXT#public static final/*char*/Class<TargetLibraryInfoWrapperPass> ID $EQ TargetLibraryInfoWrapperPass.class;
llvm::TargetTransformInfoWrapperPass = TEXT#public static final/*char*/Class<TargetTransformInfoWrapperPass> ID $EQ TargetTransformInfoWrapperPass.class;// it is effectively const in C++
llvm::TypeBasedAA = IMPLEMENTS#IPassFunction<TypeBasedAAResult>
llvm::TypeBasedAAWrapperPass = TEXT#public static final/*char*/Class<TypeBasedAAWrapperPass> ID $EQ TypeBasedAAWrapperPass.class;
llvm::VecDesc = FILE#./extra_members/VecDescExtraMembers.java
llvm::VecDesc = IMPLEMENTS#NativeCloneable<VecDesc>
llvm::bfi_detail::BlockMass = IMPLEMENTS#NativeCloneable<BlockMass>
llvm::bfi_detail::BlockMass = FILE#./extra_members/BlockMassExtraMembers.java
llvm::cflaa::CFLGraphBuilder = FILE#./extra_members/CFLGraphBuilderExtraMembers.java
llvm::cflaa::ExternalAttribute = FILE#./extra_members/ExternalAttributeExtraMembers.java
llvm::cflaa::ExternalRelation = FILE#./extra_members/ExternalRelationExtraMembers.java
llvm::cflaa::InstantiatedValue = FILE#./extra_members/InstantiatedValueExtraMembers.java
llvm::cflaa::InterfaceValue = FILE#./extra_members/InterfaceValueExtraMembers.java
llvm::cflaa::InterfaceValue = IMPLEMENTS#NativeCloneable<InterfaceValue>
llvm::cflaa::StratifiedSets = TEXT#@Override public void $destroy() { }
llvm::cflaa::StratifiedSetsBuilder = FILE#./extra_members/StratifiedSetsBuilderExtraMembers.java
llvm::createCGSCCToFunctionPassAdaptor = T0EXTENDS#IPassFunction<PreservedAnalyses>
llvm::createFunctionToLoopPassAdaptor = T0EXTENDS#IPassLoop<PreservedAnalyses>
llvm::objcarc::ObjCARCAAWrapperPass = TEXT#public static final/*char*/Class<ObjCARCAAWrapperPass> ID $EQ ObjCARCAAWrapperPass.class;
llvm::swap = T0EXTENDS#IPassLoop<PreservedAnalyses>
org.llvm.analysis.impl.LoopInfoStatics = FILE#./extra_members/LoopInfoStaticsExtraMembers.java

[MEMBER_ACCESS]
(anonymous namespace)::CGPassManager::ID = // JAVA: moved to extra members
(anonymous namespace)::CallAnalyzer::visit = public
(anonymous namespace)::CallAnalyzer::visitAlloca = public
(anonymous namespace)::CallAnalyzer::visitBinaryOperator = public
(anonymous namespace)::CallAnalyzer::visitBitCast = public
(anonymous namespace)::CallAnalyzer::visitBranchInst = public
(anonymous namespace)::CallAnalyzer::visitCallSite = public
(anonymous namespace)::CallAnalyzer::visitCastInst = public
(anonymous namespace)::CallAnalyzer::visitCatchReturnInst = public
(anonymous namespace)::CallAnalyzer::visitCleanupReturnInst = public
(anonymous namespace)::CallAnalyzer::visitCmpInst = public
(anonymous namespace)::CallAnalyzer::visitExtractValue = public
(anonymous namespace)::CallAnalyzer::visitGetElementPtr = public
(anonymous namespace)::CallAnalyzer::visitIndirectBrInst = public
(anonymous namespace)::CallAnalyzer::visitInsertValue = public
(anonymous namespace)::CallAnalyzer::visitInstruction = public
(anonymous namespace)::CallAnalyzer::visitIntToPtr = public
(anonymous namespace)::CallAnalyzer::visitLoad = public
(anonymous namespace)::CallAnalyzer::visitPHI = public
(anonymous namespace)::CallAnalyzer::visitPtrToInt = public
(anonymous namespace)::CallAnalyzer::visitResumeInst = public
(anonymous namespace)::CallAnalyzer::visitReturnInst = public
(anonymous namespace)::CallAnalyzer::visitStore = public
(anonymous namespace)::CallAnalyzer::visitSub = public
(anonymous namespace)::CallAnalyzer::visitSwitchInst = public
(anonymous namespace)::CallAnalyzer::visitUnaryInstruction = public
(anonymous namespace)::CallAnalyzer::visitUnreachableInst = public
(anonymous namespace)::DomOnlyViewer::ID = // JAVA: moved to extra
(anonymous namespace)::DomPrinter::ID = // JAVA: moved to extra
(anonymous namespace)::DomViewer::ID = // JAVA: moved to extra
(anonymous namespace)::InstCount::visitAShr = public
(anonymous namespace)::InstCount::visitAdd = public
(anonymous namespace)::InstCount::visitAddrSpaceCast = public
(anonymous namespace)::InstCount::visitAlloca = public
(anonymous namespace)::InstCount::visitAllocaInst = public
(anonymous namespace)::InstCount::visitAnd = public
(anonymous namespace)::InstCount::visitAtomicCmpXchg = public
(anonymous namespace)::InstCount::visitAtomicRMW = public
(anonymous namespace)::InstCount::visitBasicBlock = public
(anonymous namespace)::InstCount::visitBitCast = public
(anonymous namespace)::InstCount::visitBr = public
(anonymous namespace)::InstCount::visitCall = public
(anonymous namespace)::InstCount::visitCallInst = public
(anonymous namespace)::InstCount::visitCallSite = public
(anonymous namespace)::InstCount::visitCatchPad = public
(anonymous namespace)::InstCount::visitCatchRet = public
(anonymous namespace)::InstCount::visitCatchSwitch = public
(anonymous namespace)::InstCount::visitCleanupPad = public
(anonymous namespace)::InstCount::visitCleanupRet = public
(anonymous namespace)::InstCount::visitExtractElement = public
(anonymous namespace)::InstCount::visitExtractElementInst = public
(anonymous namespace)::InstCount::visitExtractValue = public
(anonymous namespace)::InstCount::visitFAdd = public
(anonymous namespace)::InstCount::visitFCmp = public
(anonymous namespace)::InstCount::visitFDiv = public
(anonymous namespace)::InstCount::visitFMul = public
(anonymous namespace)::InstCount::visitFPExt = public
(anonymous namespace)::InstCount::visitFPToSI = public
(anonymous namespace)::InstCount::visitFPToUI = public
(anonymous namespace)::InstCount::visitFPTrunc = public
(anonymous namespace)::InstCount::visitFRem = public
(anonymous namespace)::InstCount::visitFSub = public
(anonymous namespace)::InstCount::visitFence = public
(anonymous namespace)::InstCount::visitFunction = public
(anonymous namespace)::InstCount::visitGetElementPtr = public
(anonymous namespace)::InstCount::visitICmp = public
(anonymous namespace)::InstCount::visitIndirectBr = public
(anonymous namespace)::InstCount::visitIndirectBrInst = public
(anonymous namespace)::InstCount::visitInsertElement = public
(anonymous namespace)::InstCount::visitInsertElementInst = public
(anonymous namespace)::InstCount::visitInsertValue = public
(anonymous namespace)::InstCount::visitInstruction = public
(anonymous namespace)::InstCount::visitIntToPtr = public
(anonymous namespace)::InstCount::visitInvoke = public
(anonymous namespace)::InstCount::visitInvokeInst = public
(anonymous namespace)::InstCount::visitLShr = public
(anonymous namespace)::InstCount::visitLandingPad = public
(anonymous namespace)::InstCount::visitLoad = public
(anonymous namespace)::InstCount::visitLoadInst = public
(anonymous namespace)::InstCount::visitMul = public
(anonymous namespace)::InstCount::visitOr = public
(anonymous namespace)::InstCount::visitPHI = public
(anonymous namespace)::InstCount::visitPtrToInt = public
(anonymous namespace)::InstCount::visitResume = public
(anonymous namespace)::InstCount::visitRet = public
(anonymous namespace)::InstCount::visitReturnInst = public
(anonymous namespace)::InstCount::visitSDiv = public
(anonymous namespace)::InstCount::visitSExt = public
(anonymous namespace)::InstCount::visitSIToFP = public
(anonymous namespace)::InstCount::visitSRem = public
(anonymous namespace)::InstCount::visitSelect = public
(anonymous namespace)::InstCount::visitShl = public
(anonymous namespace)::InstCount::visitShuffleVector = public
(anonymous namespace)::InstCount::visitStore = public
(anonymous namespace)::InstCount::visitStoreInst = public
(anonymous namespace)::InstCount::visitSub = public
(anonymous namespace)::InstCount::visitSwitch = public
(anonymous namespace)::InstCount::visitTrunc = public
(anonymous namespace)::InstCount::visitUDiv = public
(anonymous namespace)::InstCount::visitUIToFP = public
(anonymous namespace)::InstCount::visitURem = public
(anonymous namespace)::InstCount::visitUnreachable = public
(anonymous namespace)::InstCount::visitUnreachableInst = public
(anonymous namespace)::InstCount::visitUserOp1 = public
(anonymous namespace)::InstCount::visitUserOp2 = public
(anonymous namespace)::InstCount::visitVAArg = public
(anonymous namespace)::InstCount::visitVAArgInst = public
(anonymous namespace)::InstCount::visitXor = public
(anonymous namespace)::InstCount::visitZExt = public
(anonymous namespace)::Lint::visitAShr = public
(anonymous namespace)::Lint::visitAllocaInst = public
(anonymous namespace)::Lint::visitCallInst = public
(anonymous namespace)::Lint::visitCallSite = public
(anonymous namespace)::Lint::visitExtractElementInst = public
(anonymous namespace)::Lint::visitFunction = public
(anonymous namespace)::Lint::visitIndirectBrInst = public
(anonymous namespace)::Lint::visitInsertElementInst = public
(anonymous namespace)::Lint::visitInvokeInst = public
(anonymous namespace)::Lint::visitLShr = public
(anonymous namespace)::Lint::visitLoadInst = public
(anonymous namespace)::Lint::visitReturnInst = public
(anonymous namespace)::Lint::visitSDiv = public
(anonymous namespace)::Lint::visitSRem = public
(anonymous namespace)::Lint::visitShl = public
(anonymous namespace)::Lint::visitStoreInst = public
(anonymous namespace)::Lint::visitSub = public
(anonymous namespace)::Lint::visitUDiv = public
(anonymous namespace)::Lint::visitURem = public
(anonymous namespace)::Lint::visitUnreachableInst = public
(anonymous namespace)::Lint::visitVAArgInst = public
(anonymous namespace)::Lint::visitXor = public
(anonymous namespace)::PostDomOnlyPrinter::ID = // JAVA: moved to extra
(anonymous namespace)::PostDomOnlyViewer::ID = // JAVA: moved to extra
(anonymous namespace)::PostDomViewer::ID = // JAVA: moved to extra
(anonymous namespace)::RegionOnlyPrinter::ID = // JAVA: moved to extra
(anonymous namespace)::RegionOnlyViewer::ID = // JAVA: moved to extra
(anonymous namespace)::RegionPrinter::ID = // JAVA: moved to extra
(anonymous namespace)::RegionViewer::ID = // JAVA: moved to extra
llvm::AAEvaluator::runInternal = /*friend*/public
llvm::AAResultBase::setAAResults = /*friend*/public
llvm::AAResultsWrapperPass::ID = // JAVA: moved to extra
llvm::AliasSet::Access = /*friend*/public
llvm::AliasSet::AccessLattice = /*friend*/public
llvm::AliasSet::AliasSet = /*friend*/public
llvm::AliasSet::Forward = /*friend*/public
llvm::AliasSet::PointerRec = /*friend*/public
llvm::AliasSet::PtrList = /*friend*/public
llvm::AliasSet::RefCount = /*friend*/public
llvm::AliasSet::UnknownInsts = /*friend*/public
llvm::AliasSet::addPointer = /*friend*/public
llvm::AliasSet::addUnknownInst = /*friend*/public
llvm::AliasSet::dropRef = /*friend*/public
llvm::AliasSet::getForwardedTarget = /*friend*/public
llvm::AliasSet::removeFromTracker = /*friend*/public
llvm::AliasSet::removeUnknownInst = /*friend*/public
llvm::AliasSet::setVolatile = /*friend*/public
llvm::AliasSetTracker::ASTCallbackVH = /*friend*/public
llvm::AliasSetTracker::removeAliasSet = /*friend*/public
llvm::AssumptionCacheTracker::ID = // JAVA: moved to extra
llvm::BasicAA::PassID = // JAVA: moved to extra members
llvm::BasicAAWrapperPass::ID = // JAVA: moved to extra
llvm::BlockFrequencyAnalysis::PassID = // JAVA: moved to extra
llvm::BlockFrequencyInfoWrapperPass::ID = // JAVA: moved to extra
llvm::BranchProbabilityAnalysis::PassID = // JAVA: moved to extra
llvm::BranchProbabilityInfoWrapperPass::ID = // JAVA: moved to extra
llvm::CFLAndersAA::PassID = // JAVA: moved to extra
llvm::CFLAndersAAWrapperPass::ID = // JAVA: moved to extra
llvm::CFLSteensAA::PassID = // JAVA: moved to extra
llvm::CFLSteensAAWrapperPass::ID = // JAVA: moved to extra
llvm::CallGraphAnalysis::PassID = // JAVA: moved to extra
llvm::CallGraphNode::F = /*friend*/public
llvm::CallGraphNode::allReferencesDropped = /*friend*/public
llvm::CallGraphWrapperPass::ID = // JAVA: moved to extra
llvm::DemandedBitsAnalysis::PassID = // JAVA: moved to extra
llvm::DemandedBitsWrapperPass::ID = // JAVA: moved to extra
llvm::DependenceAnalysis::PassID = // JAVA: moved to extra
llvm::DependenceAnalysisWrapperPass::ID = // JAVA: moved to extra
llvm::DivergenceAnalysis::ID = // JAVA: moved to extra
llvm::DominanceFrontierWrapperPass::ID = // JAVA: moved to extra
llvm::DummyCGSCCPass::ID = // JAVA: moved to extra
llvm::FullDependence::Consistent = /*friend*/public
llvm::FullDependence::DV = /*friend*/public
llvm::FullDependence::LoopIndependent = /*friend*/public
llvm::GlobalsAA::PassID = // JAVA: moved to extra
llvm::GlobalsAAWrapperPass::ID = // JAVA: moved to extra
llvm::LoopInfoBase::RemovedLoops = /*friend*/public
llvm::ProfileSummaryInfoWrapperPass::ID = // JAVA: moved to extra
llvm::PtrUseVisitor::visitBitCastInst = public
llvm::PtrUseVisitor::visitCallSite = public
llvm::PtrUseVisitor::visitDbgInfoIntrinsic = public
llvm::PtrUseVisitor::visitGetElementPtrInst = public
llvm::PtrUseVisitor::visitIntrinsicInst = public
llvm::PtrUseVisitor::visitMemIntrinsic = public
llvm::PtrUseVisitor::visitPtrToIntInst = public
llvm::PtrUseVisitor::visitStoreInst = public
llvm::SCEV::FastID = /*friend*/public
llvm::SCEVPredicate::FastID = /*friend*/public
llvm::TargetLibraryInfoImpl::AvailabilityState = /*friend*/public
llvm::TargetLibraryInfoImpl::CustomNames = /*friend*/public
llvm::TargetLibraryInfoImpl::StandardNames = /*friend*/public
llvm::TargetLibraryInfoImpl::getState = /*friend*/public
llvm::TargetLibraryInfoWrapperPass::ID = // JAVA: moved to extra
llvm::UnrolledInstAnalyzer::visitBinaryOperator = public
llvm::UnrolledInstAnalyzer::visitCastInst = public
llvm::UnrolledInstAnalyzer::visitCmpInst = public
llvm::UnrolledInstAnalyzer::visitInstruction = public
llvm::UnrolledInstAnalyzer::visitLoad = public
llvm::UnrolledInstAnalyzer::visitPHINode = public
