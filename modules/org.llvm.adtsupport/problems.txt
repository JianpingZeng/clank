/////////////////////////////////////////////
/// MODULE org.llvm.adtsupport

/// Non virtual functions with the same name
APInt.$add()->APSInt.$add() [1]
APInt.$addassign()->APSInt.$addassign() [1]
APInt.$andassign()->APSInt.$andassign() [1]
APInt.$assign()->APSInt.$assign() [1]
APInt.$bitand()->APSInt.$bitand() [1]
APInt.$bitnot()->APSInt.$bitnot() [1]
APInt.$bitor()->APSInt.$bitor() [1]
APInt.$bitxor()->APSInt.$bitxor() [1]
APInt.$eq()->APSInt.$eq() [1]
APInt.$lshiftassign()->APSInt.$lshiftassign() [1]
APInt.$minusassign()->APSInt.$minusassign() [1]
APInt.$noteq()->APSInt.$noteq() [1]
APInt.$orassign()->APSInt.$orassign() [1]
APInt.$out()->APSInt.$out() [1]
APInt.$postDec()->APSInt.$postDec() [1]
APInt.$postInc()->APSInt.$postInc() [1]
APInt.$preDec()->APSInt.$preDec() [1]
APInt.$preInc()->APSInt.$preInc() [1]
APInt.$star()->APSInt.$star() [1]
APInt.$starassign()->APSInt.$starassign() [1]
APInt.$sub()->APSInt.$sub() [1]
APInt.$xorassign()->APSInt.$xorassign() [1]
APInt.And()->APSInt.And() [1]
APInt.Or()->APSInt.Or() [1]
APInt.Profile()->APSInt.Profile() [1]
APInt.Xor()->APSInt.Xor() [1]
APInt.__toString()->APSInt.__toString() [1]
APInt.getMaxValue()->APSInt.getMaxValue() [1]
APInt.getMinValue()->APSInt.getMinValue() [1]
APInt.isSameValue()->APSInt.isSameValue() [1]
APInt.trunc()->APSInt.trunc() [1]
AllocatorBase.Allocate()->MallocAllocator.Allocate() [2]
ArrayRef.$at()->MutableArrayRef.$at() [1]
ArrayRef.back()->MutableArrayRef.back() [1]
ArrayRef.begin()->MutableArrayRef.begin() [1]
ArrayRef.data()->MutableArrayRef.data() [1]
ArrayRef.drop_back()->MutableArrayRef.drop_back() [1]
ArrayRef.drop_front()->MutableArrayRef.drop_front() [1]
ArrayRef.end()->MutableArrayRef.end() [1]
ArrayRef.front()->MutableArrayRef.front() [1]
ArrayRef.rbegin()->MutableArrayRef.rbegin() [1]
ArrayRef.rend()->MutableArrayRef.rend() [1]
ArrayRef.slice()->MutableArrayRef.slice() [1]
DefaultDOTGraphTraits.addCustomGraphFeatures()->DOTGraphTraitsRegionInfo$P.addCustomGraphFeatures() [1]
DefaultDOTGraphTraits.getEdgeAttributes()->BFIDOTGraphTraitsBase.getEdgeAttributes()->DOTGraphTraitsBlockFrequencyInfo$P.getEdgeAttributes() [2]
DefaultDOTGraphTraits.getEdgeSourceLabel()->DOTGraphTraitsFunction$C$P.getEdgeSourceLabel() [1]
DefaultDOTGraphTraits.getGraphName()->BFIDOTGraphTraitsBase.getGraphName() [6]
DefaultDOTGraphTraits.getNodeAttributes()->BFIDOTGraphTraitsBase.getNodeAttributes()->DOTGraphTraitsBlockFrequencyInfo$P.getNodeAttributes() [2]
DefaultDOTGraphTraits.getNodeLabel()->DOTGraphTraitsCallGraph$C$P.getNodeLabel() [11]
DefaultDOTGraphTraits.renderGraphFromBottomUp()->DOTGraphTraitsModuleManager.renderGraphFromBottomUp() [1]
DefaultFoldingSetTrait.ComputeHash()->FoldingSetTraitSCEV.ComputeHash() [2]
DefaultFoldingSetTrait.Equals()->FoldingSetTraitSCEV.Equals() [2]
DenseMapBase.copyFrom()->DenseMap.copyFrom() [2]
DenseMapBase.getBuckets()->DenseMap.getBuckets() [2]
DenseMapBase.getBuckets$Const()->SmallDenseMap.getBuckets$Const() [1]
DenseMapBase.getNumBuckets()->DenseMap.getNumBuckets() [2]
DenseMapBase.getNumEntries()->DenseMap.getNumEntries() [2]
DenseMapBase.getNumTombstones()->DenseMap.getNumTombstones() [2]
DenseMapBase.grow()->DenseMap.grow() [2]
DenseMapBase.setNumEntries()->DenseMap.setNumEntries() [2]
DenseMapBase.setNumTombstones()->DenseMap.setNumTombstones() [2]
DenseMapBase.shrink_and_clear()->DenseMap.shrink_and_clear() [2]
DominatorBase.$assignMove()->DominatorTreeBase.$assignMove() [1]
DominatorTreeBase.compare()->DominatorTree.compare() [1]
DominatorTreeBase.dominates()->DominatorTree.dominates() [1]
DominatorTreeBase.isReachableFromEntry()->DominatorTree.isReachableFromEntry() [1]
FoldingSetImpl.FindNodeOrInsertPos()->FoldingSet.FindNodeOrInsertPos() [2]
FoldingSetImpl.GetOrInsertNode()->FoldingSet.GetOrInsertNode() [2]
ImmutableMapRef.add()->RegionBindingsRef.add() [1]
ImmutableMapRef.lookup()->RegionBindingsRef.lookup() [1]
ImmutableMapRef.remove()->RegionBindingsRef.remove() [1]
ImutContainerInfo.isLess()->RangeTrait.isLess() [1]
MCAsmParser.parseExpression()->AsmParser.parseExpression() [1]
MCExpr.evaluateAsRelocatableImpl()->MCTargetExpr.evaluateAsRelocatableImpl() [1]
MCExpr.findAssociatedFragment()->MCTargetExpr.findAssociatedFragment() [1]
MCExpr.getKind()->MCSymbolRefExpr.getKind() [1]
Option.getPosition()->list.getPosition() [2]
Option.setNumAdditionalVals()->list.setNumAdditionalVals() [1]
OptionValueCopy.$assign()->OptionValueBaseTFalse.$assign() [1]
ScaledNumberBase.__toString()->ScaledNumber.__toString() [1]
ScaledNumberBase.dump()->ScaledNumber.dump() [1]
ScaledNumberBase.print()->ScaledNumber.print() [1]
SmallPtrSetImplBase.swap()->SmallPtrSet.swap() [1]
SmallVectorBase.grow_pod()->SmallVectorTemplateCommon.grow_pod() [1]
SmallVectorImpl.$assign()->SmallVector.$assign()->SmallString.$assign() [1]
SmallVectorImpl.$assignMove()->SmallVector.$assignMove() [1]
SmallVectorImpl.append()->SmallString.append() [1]
SmallVectorImpl.assign()->SmallString.assign() [1]
SmallVectorImpl.insert()->ReadyList.insert() [1]
StringMap.insert()->StringSet.insert() [1]
StringMapConstIterator.$arrow()->StringMapIterator.$arrow() [1]
StringMapConstIterator.$star()->StringMapIterator.$star() [1]
basic_parser_impl.getValueExpectedFlagDefault()->parserBool.getValueExpectedFlagDefault() [2]
basic_parser_impl.initialize()->parserBool.initialize() [1]
const_iterator.$postDec()->iterator.$postDec() [1]
const_iterator.$postInc()->iterator.$postInc() [1]
const_iterator.$preDec()->iterator.$preDec() [1]
const_iterator.$preInc()->iterator.$preInc() [1]
df_iterator.$star()->block_iterator_wrapper.$star() [1]
generic_parser_base.initialize()->RegisterPassParser.initialize() [2]
ilist_node_traits.addNodeToList()->ilist_traitsNamedMDNode.addNodeToList() [9]
ilist_node_traits.removeNodeFromList()->ilist_traitsNamedMDNode.removeNodeFromList() [9]
ilist_node_traits.transferNodesFromList()->SymbolTableListTraits.transferNodesFromList() [8]
ilist_sentinel_traits.createSentinel()->ilist_traitsNamedMDNode.createSentinel() [5]
ilist_sentinel_traits.destroySentinel()->ilist_traitsNamedMDNode.destroySentinel() [5]
ilist_sentinel_traits.ensureHead()->ilist_traitsNamedMDNode.ensureHead() [5]
ilist_sentinel_traits.noteHead()->ilist_traitsNamedMDNode.noteHead() [4]
ilist_sentinel_traits.provideInitialHead()->ilist_traitsNamedMDNode.provideInitialHead() [5]
iplist.push_back()->ilist.push_back() [1]
iplist.push_front()->ilist.push_front() [1]
iterator_adaptor_base.$eq()->ModuleDeclIterator.$eq() [1]
iterator_adaptor_base.$star()->pointee_iterator.$star() [16]
iterator_facade_base.$arrow()->value_op_iterator.$arrow() [8]
iterator_facade_base.$preDec()->iterator_adaptor_base.$preDec() [1]
iterator_facade_base.$preInc()->iterator_adaptor_base.$preInc()->filter_iterator.$preInc() [13]
iterator_facade_base.$sub()->iterator_adaptor_base.$sub() [1]

CHECKS FROM DiagCommonHeaderInUnionsChecker
UNION llvm::MachO::macho_load_command [${LLVM_SRC}/llvm/include/llvm/Support/MachO.h:1716]:
  /*uint*/int cmd
  /*uint*/int cmdsize