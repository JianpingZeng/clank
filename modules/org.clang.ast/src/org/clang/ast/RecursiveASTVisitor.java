/**
 * This file was converted to Java from the original LLVM source file. The original
 * source file follows the LLVM Release License, outlined below.
 * 
 * ==============================================================================
 * LLVM Release License
 * ==============================================================================
 * University of Illinois/NCSA
 * Open Source License
 * 
 * Copyright (c) 2003-2017 University of Illinois at Urbana-Champaign.
 * All rights reserved.
 * 
 * Developed by:
 * 
 *     LLVM Team
 * 
 *     University of Illinois at Urbana-Champaign
 * 
 *     http://llvm.org
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal with
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimers.
 * 
 *     * Redistributions in binary form must reproduce the above copyright notice
 *       this list of conditions and the following disclaimers in the
 *       documentation and/or other materials provided with the distribution.
 * 
 *     * Neither the names of the LLVM Team, University of Illinois at
 *       Urbana-Champaign, nor the names of its contributors may be used to
 *       endorse or promote products derived from this Software without specific
 *       prior written permission.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
 * SOFTWARE.
 * 
 * ==============================================================================
 * Copyrights and Licenses for Third Party Software Distributed with LLVM:
 * ==============================================================================
 * The LLVM software contains code written by third parties.  Such software will
 * have its own individual LICENSE.TXT file in the directory in which it appears.
 * This file will describe the copyrights, license, and restrictions which apply
 * to that code.
 * 
 * The disclaimer of warranty in the University of Illinois Open Source License
 * applies to all code in the LLVM Distribution, and nothing in any of the
 * other licenses gives permission to use the names of the LLVM Team or the
 * University of Illinois to endorse or promote products derived from this
 * Software.
 * 
 * The following pieces of software have additional or alternate copyrights,
 * licenses, and/or restrictions:
 * 
 * Program             Directory
 * -------             ---------
 * Autoconf            llvm/autoconf
 *                     llvm/projects/ModuleMaker/autoconf
 * Google Test         llvm/utils/unittest/googletest
 * OpenBSD regex       llvm/lib/Support/{reg*, COPYRIGHT.regex}
 * pyyaml tests        llvm/test/YAMLParser/{*.data, LICENSE.TXT}
 * ARM contributions   llvm/lib/Target/ARM/LICENSE.TXT
 * md5 contributions   llvm/lib/Support/MD5.cpp llvm/include/llvm/Support/MD5.h
 */

package org.clang.ast;

import static org.clank.support.Native.$Deref;
import static org.clank.support.Native.$AddrOf;
import org.clank.java.*;
import org.clank.support.*;
import org.clank.support.aliases.*;
import static org.clank.java.std.*;
import static org.llvm.adt.ADTAliases.*;
import static org.clank.support.Native.*;
import static org.clank.support.Unsigned.*;
import org.llvm.support.*;
import org.llvm.adt.aliases.*;
import org.clang.basic.*;
import static org.clang.ast.java.AstRTTI.*;
import static org.clang.ast.java.AstJavaFixedRTTI.*;
import static org.clang.ast.java.AstAttributesRTTI.*;
import static org.clang.ast.java.AstDeclarationsRTTI.*;
import static org.clang.ast.java.AstExpressionsRTTI.*;
// JAVA: see important comments in the EXTRA MEMBERS section how to fix this class

/// \brief A class that does preordor or postorder
/// depth-first traversal on the entire Clang AST and visits each node.
///
/// This class performs three distinct tasks:
///   1. traverse the AST (i.e. go to each node);
///   2. at a given node, walk up the class hierarchy, starting from
///      the node's dynamic type, until the top-most class (e.g. Stmt,
///      Decl, or Type) is reached.
///   3. given a (node, class) combination, where 'class' is some base
///      class of the dynamic type of 'node', call a user-overridable
///      function to actually visit the node.
///
/// These tasks are done by three groups of methods, respectively:
///   1. TraverseDecl(Decl *x) does task #1.  It is the entry point
///      for traversing an AST rooted at x.  This method simply
///      dispatches (i.e. forwards) to TraverseFoo(Foo *x) where Foo
///      is the dynamic type of *x, which calls WalkUpFromFoo(x) and
///      then recursively visits the child nodes of x.
///      TraverseStmt(Stmt *x) and TraverseType(QualType x) work
///      similarly.
///   2. WalkUpFromFoo(Foo *x) does task #2.  It does not try to visit
///      any child node of x.  Instead, it first calls WalkUpFromBar(x)
///      where Bar is the direct parent class of Foo (unless Foo has
///      no parent), and then calls VisitFoo(x) (see the next list item).
///   3. VisitFoo(Foo *x) does task #3.
///
/// These three method groups are tiered (Traverse* > WalkUpFrom* >
/// Visit*).  A method (e.g. Traverse*) may call methods from the same
/// tier (e.g. other Traverse*) or one tier lower (e.g. WalkUpFrom*).
/// It may not call methods from a higher tier.
///
/// Note that since WalkUpFromFoo() calls WalkUpFromBar() (where Bar
/// is Foo's super class) before calling VisitFoo(), the result is
/// that the Visit*() methods for a given node are called in the
/// top-down order (e.g. for a node of type NamespaceDecl, the order will
/// be VisitDecl(), VisitNamedDecl(), and then VisitNamespaceDecl()).
///
/// This scheme guarantees that all Visit*() calls for the same AST
/// node are grouped together.  In other words, Visit*() methods for
/// different nodes are never interleaved.
///
/// Clients of this visitor should subclass the visitor (providing
/// themselves as the template argument, using the curiously recurring
/// template pattern) and override any of the Traverse*, WalkUpFrom*,
/// and Visit* methods for declarations, types, statements,
/// expressions, or other AST nodes where the visitor should customize
/// behavior.  Most users only need to override Visit*.  Advanced
/// users may override Traverse* and WalkUpFrom* to implement custom
/// traversal strategies.  Returning false from one of these overridden
/// functions will abort the entire traversal.
///
/// By default, this visitor tries to visit every part of the explicit
/// source code exactly once.  The default policy towards templates
/// is to descend into the 'pattern' class or function body, not any
/// explicit or implicit instantiations.  Explicit specializations
/// are still visited, and the patterns of partial specializations
/// are visited separately.  This behavior can be changed by
/// overriding shouldVisitTemplateInstantiations() in the derived class
/// to return true, in which case all known implicit and explicit
/// instantiations will be visited at the same time as the pattern
/// from which they were produced.
///
/// By default, this visitor preorder traverses the AST. If postorder traversal
/// is needed, the \c shouldTraversePostOrder method needs to be overriden
/// to return \c true.
/*template <typename Derived> TEMPLATE*/
//<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor">
@Converted(kind = Converted.Kind.MANUAL/*a lot of regexp-based replacements, see instruction at the end of file + compilation fixes*/,
 source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 140,
 FQN="clang::RecursiveASTVisitor", NM="_ZN5clang19RecursiveASTVisitorE",
 cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitorE")
//</editor-fold>
public interface/*class*/ RecursiveASTVisitor</*typename*/ Derived extends RecursiveASTVisitor<?>>  {
/*public:*/
  /// A queue used for performing data recursion over statements.
  /// Parameters involving this type are used to implement data
  /// recursion over Stmts and Exprs within this class, and should
  /// typically not be explicitly specified by derived classes.
  /// The bool bit indicates whether the statement has been traversed or not.
  /*typedef SmallVectorImpl<llvm::PointerIntPair<Stmt *, 1, bool> > DataRecursionQueue*/
//  public final class DataRecursionQueue extends SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > >{ };
  
  /// \brief Return a reference to the derived class.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::getDerived">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 151,
   FQN="clang::RecursiveASTVisitor::getDerived", NM="_ZN5clang19RecursiveASTVisitor10getDerivedEv",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor10getDerivedEv")
  //</editor-fold>
  public default/*interface*/ Derived /*&*/ getDerived() {
    return Native.$star(((/*static_cast*/Derived /*P*/ )(this)));
  }

  
  /// \brief Return whether this visitor should recurse into
  /// template instantiations.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::shouldVisitTemplateInstantiations">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 155,
   FQN="clang::RecursiveASTVisitor::shouldVisitTemplateInstantiations", NM="_ZNK5clang19RecursiveASTVisitor33shouldVisitTemplateInstantiationsEv",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZNK5clang19RecursiveASTVisitor33shouldVisitTemplateInstantiationsEv")
  //</editor-fold>
  public default/*interface*/ boolean shouldVisitTemplateInstantiations() /*const*/ {
    return false;
  }

  
  /// \brief Return whether this visitor should recurse into the types of
  /// TypeLocs.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::shouldWalkTypesOfTypeLocs">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 159,
   FQN="clang::RecursiveASTVisitor::shouldWalkTypesOfTypeLocs", NM="_ZNK5clang19RecursiveASTVisitor25shouldWalkTypesOfTypeLocsEv",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZNK5clang19RecursiveASTVisitor25shouldWalkTypesOfTypeLocsEv")
  //</editor-fold>
  public default/*interface*/ boolean shouldWalkTypesOfTypeLocs() /*const*/ {
    return true;
  }

  
  /// \brief Return whether this visitor should recurse into implicit
  /// code, e.g., implicit constructors and destructors.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::shouldVisitImplicitCode">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 163,
   FQN="clang::RecursiveASTVisitor::shouldVisitImplicitCode", NM="_ZNK5clang19RecursiveASTVisitor23shouldVisitImplicitCodeEv",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZNK5clang19RecursiveASTVisitor23shouldVisitImplicitCodeEv")
  //</editor-fold>
  public default/*interface*/ boolean shouldVisitImplicitCode() /*const*/ {
    return false;
  }

  
  /// \brief Return whether this visitor should traverse post-order.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::shouldTraversePostOrder">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 166,
   FQN="clang::RecursiveASTVisitor::shouldTraversePostOrder", NM="_ZNK5clang19RecursiveASTVisitor23shouldTraversePostOrderEv",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZNK5clang19RecursiveASTVisitor23shouldTraversePostOrderEv")
  //</editor-fold>
  public default/*interface*/ boolean shouldTraversePostOrder() /*const*/ {
    return false;
  }

  
  /// \brief Recursively visit a statement or expression, by
  /// dispatching to Traverse*() based on the argument's dynamic type.
  ///
  /// \returns false if the visitation was terminated early, true
  /// otherwise (including when the argument is nullptr).
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 586,
   FQN="clang::RecursiveASTVisitor::TraverseStmt", NM="_ZN5clang19RecursiveASTVisitor12TraverseStmtEPNS_4StmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIS2_Lj1EbNS3_21PointerLikeTypeTraitsIS2_EENS3_18PointerIntPairInfoIS2_Lj1ES7_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12TraverseStmtEPNS_4StmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIS2_Lj1EbNS3_21PointerLikeTypeTraitsIS2_EENS3_18PointerIntPairInfoIS2_Lj1ES7_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseStmt(Stmt /*P*/ S) {
    return TraverseStmt(S, 
              (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseStmt(Stmt /*P*/ S, 
              SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!(S != null)) {
      return true;
    }
    if ((Queue != null)) {
      Queue.push_back(/*{ */new PointerBoolPair<Stmt /*P*/>(S, false)/* }*/);
      return true;
    }
    
    SmallVector<PointerBoolPair<Stmt /*P*/ >> LocalQueue/*J*/= new SmallVector<PointerBoolPair<Stmt /*P*/ >>(8, new PointerBoolPair<Stmt /*P*/ >());
    LocalQueue.push_back(/*{ */new PointerBoolPair<Stmt /*P*/>(S, false)/* }*/);
    while (!LocalQueue.empty()) {
      final PointerBoolPair<Stmt /*P*/>/*&*/ CurrSAndVisited = LocalQueue.back();
      Stmt /*P*/ CurrS = CurrSAndVisited.getPointer();
      boolean Visited = CurrSAndVisited.getInt();
      if (Visited) {
        LocalQueue.pop_back();
        do {
          if (!getDerived().dataTraverseStmtPost(CurrS)) {
            return false;
          }
        } while (false);
        if (getDerived().shouldTraversePostOrder()) {
          do {
            if (!getDerived().PostVisitStmt(CurrS)) {
              return false;
            }
          } while (false);
        }
        continue;
      }
      if (getDerived().dataTraverseStmtPre(CurrS)) {
        CurrSAndVisited.setInt(true);
        /*size_t*/int N = LocalQueue.size();
        do {
          if (!getDerived().dataTraverseNode(CurrS, $AddrOf(LocalQueue))) {
            return false;
          }
        } while (false);
        // Process new children in the order they were added.
        std.reverse(LocalQueue.begin().$add(N), LocalQueue.end());
      } else {
        LocalQueue.pop_back();
      }
    }
    
    return true;
  }

  
  /// Invoked before visiting a statement or expression via data recursion.
  ///
  /// \returns false to skip visiting the node, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::dataTraverseStmtPre">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 178,
   FQN="clang::RecursiveASTVisitor::dataTraverseStmtPre", NM="_ZN5clang19RecursiveASTVisitor19dataTraverseStmtPreEPNS_4StmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19dataTraverseStmtPreEPNS_4StmtE")
  //</editor-fold>
  public default/*interface*/ boolean dataTraverseStmtPre(Stmt /*P*/ S) {
    return true;
  }

  
  /// Invoked after visiting a statement or expression via data recursion.
  /// This is not invoked if the previously invoked \c dataTraverseStmtPre
  /// returned false.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::dataTraverseStmtPost">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 185,
   FQN="clang::RecursiveASTVisitor::dataTraverseStmtPost", NM="_ZN5clang19RecursiveASTVisitor20dataTraverseStmtPostEPNS_4StmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20dataTraverseStmtPostEPNS_4StmtE")
  //</editor-fold>
  public default/*interface*/ boolean dataTraverseStmtPost(Stmt /*P*/ S) {
    return true;
  }

  
  /// \brief Recursively visit a type, by dispatching to
  /// Traverse*Type() based on the argument's getTypeClass() property.
  ///
  /// \returns false if the visitation was terminated early, true
  /// otherwise (including when the argument is a Null type).
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 630,
   FQN="clang::RecursiveASTVisitor::TraverseType", NM="_ZN5clang19RecursiveASTVisitor12TraverseTypeENS_8QualTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12TraverseTypeENS_8QualTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseType(QualType T) {
    if (T.isNull()) {
      return true;
    }
    switch (T.$arrow().getTypeClass()) {
     case Builtin:
      return getDerived().TraverseBuiltinType(((/*static_cast*/BuiltinType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Complex:
      return getDerived().TraverseComplexType(((/*static_cast*/ComplexType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Pointer:
      return getDerived().TraversePointerType(((/*static_cast*/PointerType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case BlockPointer:
      return getDerived().TraverseBlockPointerType(((/*static_cast*/BlockPointerType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case LValueReference:
      return getDerived().TraverseLValueReferenceType(((/*static_cast*/LValueReferenceType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case RValueReference:
      return getDerived().TraverseRValueReferenceType(((/*static_cast*/RValueReferenceType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case MemberPointer:
      return getDerived().TraverseMemberPointerType(((/*static_cast*/MemberPointerType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case ConstantArray:
      return getDerived().TraverseConstantArrayType(((/*static_cast*/ConstantArrayType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case IncompleteArray:
      return getDerived().TraverseIncompleteArrayType(((/*static_cast*/IncompleteArrayType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case VariableArray:
      return getDerived().TraverseVariableArrayType(((/*static_cast*/VariableArrayType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case DependentSizedArray:
      return getDerived().TraverseDependentSizedArrayType(((/*static_cast*/DependentSizedArrayType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case DependentSizedExtVector:
      return getDerived().TraverseDependentSizedExtVectorType(((/*static_cast*/DependentSizedExtVectorType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Vector:
      return getDerived().TraverseVectorType(((/*static_cast*/VectorType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case ExtVector:
      return getDerived().TraverseExtVectorType(((/*static_cast*/ExtVectorType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case FunctionProto:
      return getDerived().TraverseFunctionProtoType(((/*static_cast*/FunctionProtoType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case FunctionNoProto:
      return getDerived().TraverseFunctionNoProtoType(((/*static_cast*/FunctionNoProtoType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case UnresolvedUsing:
      return getDerived().TraverseUnresolvedUsingType(((/*static_cast*/UnresolvedUsingType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Paren:
      return getDerived().TraverseParenType(((/*static_cast*/ParenType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Typedef:
      return getDerived().TraverseTypedefType(((/*static_cast*/TypedefType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Adjusted:
      return getDerived().TraverseAdjustedType(((/*static_cast*/AdjustedType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Decayed:
      return getDerived().TraverseDecayedType(((/*static_cast*/DecayedType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case TypeOfExpr:
      return getDerived().TraverseTypeOfExprType(((/*static_cast*/TypeOfExprType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case TypeOf:
      return getDerived().TraverseTypeOfType(((/*static_cast*/TypeOfType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Decltype:
      return getDerived().TraverseDecltypeType(((/*static_cast*/DecltypeType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case UnaryTransform:
      return getDerived().TraverseUnaryTransformType(((/*static_cast*/UnaryTransformType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Record:
      return getDerived().TraverseRecordType(((/*static_cast*/RecordType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Enum:
      return getDerived().TraverseEnumType(((/*static_cast*/EnumType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Elaborated:
      return getDerived().TraverseElaboratedType(((/*static_cast*/ElaboratedType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Attributed:
      return getDerived().TraverseAttributedType(((/*static_cast*/AttributedType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case TemplateTypeParm:
      return getDerived().TraverseTemplateTypeParmType(((/*static_cast*/TemplateTypeParmType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case SubstTemplateTypeParm:
      return getDerived().TraverseSubstTemplateTypeParmType(((/*static_cast*/SubstTemplateTypeParmType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case SubstTemplateTypeParmPack:
      return getDerived().TraverseSubstTemplateTypeParmPackType(((/*static_cast*/SubstTemplateTypeParmPackType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case TemplateSpecialization:
      return getDerived().TraverseTemplateSpecializationType(((/*static_cast*/TemplateSpecializationType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Auto:
      return getDerived().TraverseAutoType(((/*static_cast*/AutoType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case InjectedClassName:
      return getDerived().TraverseInjectedClassNameType(((/*static_cast*/InjectedClassNameType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case DependentName:
      return getDerived().TraverseDependentNameType(((/*static_cast*/DependentNameType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case DependentTemplateSpecialization:
      return getDerived().TraverseDependentTemplateSpecializationType(((/*static_cast*/DependentTemplateSpecializationType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case PackExpansion:
      return getDerived().TraversePackExpansionType(((/*static_cast*/PackExpansionType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case ObjCObject:
      return getDerived().TraverseObjCObjectType(((/*static_cast*/ObjCObjectType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case ObjCInterface:
      return getDerived().TraverseObjCInterfaceType(((/*static_cast*/ObjCInterfaceType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case ObjCObjectPointer:
      return getDerived().TraverseObjCObjectPointerType(((/*static_cast*/ObjCObjectPointerType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Pipe:
      return getDerived().TraversePipeType(((/*static_cast*/PipeType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
     case Atomic:
      return getDerived().TraverseAtomicType(((/*static_cast*/AtomicType /*P*/ )(((/*const_cast*/Type /*P*/ )(T.getTypePtr())))));
    }
    
    return true;
  }

  
  /// \brief Recursively visit a type with location, by dispatching to
  /// Traverse*TypeLoc() based on the argument type's getTypeClass() property.
  ///
  /// \returns false if the visitation was terminated early, true
  /// otherwise (including when the argument is a Null type location).
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 646,
   FQN="clang::RecursiveASTVisitor::TraverseTypeLoc", NM="_ZN5clang19RecursiveASTVisitor15TraverseTypeLocENS_7TypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15TraverseTypeLocENS_7TypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeLoc(TypeLoc TL) {
    if (TL.isNull()) {
      return true;
    }
    switch (TL.getTypeLocClass()) {
     case Qualified:
      return getDerived().TraverseQualifiedTypeLoc(TL.castAs(QualifiedTypeLoc.class));
     case Builtin:
      return getDerived().TraverseBuiltinTypeLoc(TL.castAs(BuiltinTypeLoc.class));
     case Complex:
      return getDerived().TraverseComplexTypeLoc(TL.castAs(ComplexTypeLoc.class));
     case Pointer:
      return getDerived().TraversePointerTypeLoc(TL.castAs(PointerTypeLoc.class));
     case BlockPointer:
      return getDerived().TraverseBlockPointerTypeLoc(TL.castAs(BlockPointerTypeLoc.class));
     case LValueReference:
      return getDerived().TraverseLValueReferenceTypeLoc(TL.castAs(LValueReferenceTypeLoc.class));
     case RValueReference:
      return getDerived().TraverseRValueReferenceTypeLoc(TL.castAs(RValueReferenceTypeLoc.class));
     case MemberPointer:
      return getDerived().TraverseMemberPointerTypeLoc(TL.castAs(MemberPointerTypeLoc.class));
     case ConstantArray:
      return getDerived().TraverseConstantArrayTypeLoc(TL.castAs(ConstantArrayTypeLoc.class));
     case IncompleteArray:
      return getDerived().TraverseIncompleteArrayTypeLoc(TL.castAs(IncompleteArrayTypeLoc.class));
     case VariableArray:
      return getDerived().TraverseVariableArrayTypeLoc(TL.castAs(VariableArrayTypeLoc.class));
     case DependentSizedArray:
      return getDerived().TraverseDependentSizedArrayTypeLoc(TL.castAs(DependentSizedArrayTypeLoc.class));
     case DependentSizedExtVector:
      return getDerived().TraverseDependentSizedExtVectorTypeLoc(TL.castAs(DependentSizedExtVectorTypeLoc.class));
     case Vector:
      return getDerived().TraverseVectorTypeLoc(TL.castAs(VectorTypeLoc.class));
     case ExtVector:
      return getDerived().TraverseExtVectorTypeLoc(TL.castAs(ExtVectorTypeLoc.class));
     case FunctionProto:
      return getDerived().TraverseFunctionProtoTypeLoc(TL.castAs(FunctionProtoTypeLoc.class));
     case FunctionNoProto:
      return getDerived().TraverseFunctionNoProtoTypeLoc(TL.castAs(FunctionNoProtoTypeLoc.class));
     case UnresolvedUsing:
      return getDerived().TraverseUnresolvedUsingTypeLoc(TL.castAs(UnresolvedUsingTypeLoc.class));
     case Paren:
      return getDerived().TraverseParenTypeLoc(TL.castAs(ParenTypeLoc.class));
     case Typedef:
      return getDerived().TraverseTypedefTypeLoc(TL.castAs(TypedefTypeLoc.class));
     case Adjusted:
      return getDerived().TraverseAdjustedTypeLoc(TL.castAs(AdjustedTypeLoc.class));
     case Decayed:
      return getDerived().TraverseDecayedTypeLoc(TL.castAs(DecayedTypeLoc.class));
     case TypeOfExpr:
      return getDerived().TraverseTypeOfExprTypeLoc(TL.castAs(TypeOfExprTypeLoc.class));
     case TypeOf:
      return getDerived().TraverseTypeOfTypeLoc(TL.castAs(TypeOfTypeLoc.class));
     case Decltype:
      return getDerived().TraverseDecltypeTypeLoc(TL.castAs(DecltypeTypeLoc.class));
     case UnaryTransform:
      return getDerived().TraverseUnaryTransformTypeLoc(TL.castAs(UnaryTransformTypeLoc.class));
     case Record:
      return getDerived().TraverseRecordTypeLoc(TL.castAs(RecordTypeLoc.class));
     case Enum:
      return getDerived().TraverseEnumTypeLoc(TL.castAs(EnumTypeLoc.class));
     case Elaborated:
      return getDerived().TraverseElaboratedTypeLoc(TL.castAs(ElaboratedTypeLoc.class));
     case Attributed:
      return getDerived().TraverseAttributedTypeLoc(TL.castAs(AttributedTypeLoc.class));
     case TemplateTypeParm:
      return getDerived().TraverseTemplateTypeParmTypeLoc(TL.castAs(TemplateTypeParmTypeLoc.class));
     case SubstTemplateTypeParm:
      return getDerived().TraverseSubstTemplateTypeParmTypeLoc(TL.castAs(SubstTemplateTypeParmTypeLoc.class));
     case SubstTemplateTypeParmPack:
      return getDerived().TraverseSubstTemplateTypeParmPackTypeLoc(TL.castAs(SubstTemplateTypeParmPackTypeLoc.class));
     case TemplateSpecialization:
      return getDerived().TraverseTemplateSpecializationTypeLoc(TL.castAs(TemplateSpecializationTypeLoc.class));
     case Auto:
      return getDerived().TraverseAutoTypeLoc(TL.castAs(AutoTypeLoc.class));
     case InjectedClassName:
      return getDerived().TraverseInjectedClassNameTypeLoc(TL.castAs(InjectedClassNameTypeLoc.class));
     case DependentName:
      return getDerived().TraverseDependentNameTypeLoc(TL.castAs(DependentNameTypeLoc.class));
     case DependentTemplateSpecialization:
      return getDerived().TraverseDependentTemplateSpecializationTypeLoc(TL.castAs(DependentTemplateSpecializationTypeLoc.class));
     case PackExpansion:
      return getDerived().TraversePackExpansionTypeLoc(TL.castAs(PackExpansionTypeLoc.class));
     case ObjCObject:
      return getDerived().TraverseObjCObjectTypeLoc(TL.castAs(ObjCObjectTypeLoc.class));
     case ObjCInterface:
      return getDerived().TraverseObjCInterfaceTypeLoc(TL.castAs(ObjCInterfaceTypeLoc.class));
     case ObjCObjectPointer:
      return getDerived().TraverseObjCObjectPointerTypeLoc(TL.castAs(ObjCObjectPointerTypeLoc.class));
     case Pipe:
      return getDerived().TraversePipeTypeLoc(TL.castAs(PipeTypeLoc.class));
     case Atomic:
      return getDerived().TraverseAtomicTypeLoc(TL.castAs(AtomicTypeLoc.class));
    }
    
    return true;
  }

  
  /// \brief Recursively visit an attribute, by dispatching to
  /// Traverse*Attr() based on the argument's dynamic type.
  ///
  /// \returns false if the visitation was terminated early, true
  /// otherwise (including when the argument is a Null type location).
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2746,
   FQN="clang::RecursiveASTVisitor::TraverseAttr", NM="_ZN5clang19RecursiveASTVisitor12TraverseAttrEPNS_4AttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12TraverseAttrEPNS_4AttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAttr(Attr /*P*/ A) {
    if (!(A != null)) {
      return true;
    }
    switch (A.getKind()) {
     case AMDGPUNumSGPR:
      return getDerived().TraverseAMDGPUNumSGPRAttr(cast_AMDGPUNumSGPRAttr(A));
     case AMDGPUNumVGPR:
      return getDerived().TraverseAMDGPUNumVGPRAttr(cast_AMDGPUNumVGPRAttr(A));
     case ARMInterrupt:
      return getDerived().TraverseARMInterruptAttr(cast_ARMInterruptAttr(A));
     case AbiTag:
      return getDerived().TraverseAbiTagAttr(cast_AbiTagAttr(A));
     case AcquireCapability:
      return getDerived().TraverseAcquireCapabilityAttr(cast_AcquireCapabilityAttr(A));
     case AcquiredAfter:
      return getDerived().TraverseAcquiredAfterAttr(cast_AcquiredAfterAttr(A));
     case AcquiredBefore:
      return getDerived().TraverseAcquiredBeforeAttr(cast_AcquiredBeforeAttr(A));
     case Alias:
      return getDerived().TraverseAliasAttr(cast_AliasAttr(A));
     case AlignMac68k:
      return getDerived().TraverseAlignMac68kAttr(cast_AlignMac68kAttr(A));
     case AlignValue:
      return getDerived().TraverseAlignValueAttr(cast_AlignValueAttr(A));
     case Aligned:
      return getDerived().TraverseAlignedAttr(cast_AlignedAttr(A));
     case AlwaysInline:
      return getDerived().TraverseAlwaysInlineAttr(cast_AlwaysInlineAttr(A));
     case AnalyzerNoReturn:
      return getDerived().TraverseAnalyzerNoReturnAttr(cast_AnalyzerNoReturnAttr(A));
     case Annotate:
      return getDerived().TraverseAnnotateAttr(cast_AnnotateAttr(A));
     case AnyX86Interrupt:
      return getDerived().TraverseAnyX86InterruptAttr(cast_AnyX86InterruptAttr(A));
     case ArcWeakrefUnavailable:
      return getDerived().TraverseArcWeakrefUnavailableAttr(cast_ArcWeakrefUnavailableAttr(A));
     case ArgumentWithTypeTag:
      return getDerived().TraverseArgumentWithTypeTagAttr(cast_ArgumentWithTypeTagAttr(A));
     case AsmLabel:
      return getDerived().TraverseAsmLabelAttr(cast_AsmLabelAttr(A));
     case AssertCapability:
      return getDerived().TraverseAssertCapabilityAttr(cast_AssertCapabilityAttr(A));
     case AssertExclusiveLock:
      return getDerived().TraverseAssertExclusiveLockAttr(cast_AssertExclusiveLockAttr(A));
     case AssertSharedLock:
      return getDerived().TraverseAssertSharedLockAttr(cast_AssertSharedLockAttr(A));
     case AssumeAligned:
      return getDerived().TraverseAssumeAlignedAttr(cast_AssumeAlignedAttr(A));
     case Availability:
      return getDerived().TraverseAvailabilityAttr(cast_AvailabilityAttr(A));
     case Blocks:
      return getDerived().TraverseBlocksAttr(cast_BlocksAttr(A));
     case C11NoReturn:
      return getDerived().TraverseC11NoReturnAttr(cast_C11NoReturnAttr(A));
     case CDecl:
      return getDerived().TraverseCDeclAttr(cast_CDeclAttr(A));
     case CFAuditedTransfer:
      return getDerived().TraverseCFAuditedTransferAttr(cast_CFAuditedTransferAttr(A));
     case CFConsumed:
      return getDerived().TraverseCFConsumedAttr(cast_CFConsumedAttr(A));
     case CFReturnsNotRetained:
      return getDerived().TraverseCFReturnsNotRetainedAttr(cast_CFReturnsNotRetainedAttr(A));
     case CFReturnsRetained:
      return getDerived().TraverseCFReturnsRetainedAttr(cast_CFReturnsRetainedAttr(A));
     case CFUnknownTransfer:
      return getDerived().TraverseCFUnknownTransferAttr(cast_CFUnknownTransferAttr(A));
     case CUDAConstant:
      return getDerived().TraverseCUDAConstantAttr(cast_CUDAConstantAttr(A));
     case CUDADevice:
      return getDerived().TraverseCUDADeviceAttr(cast_CUDADeviceAttr(A));
     case CUDAGlobal:
      return getDerived().TraverseCUDAGlobalAttr(cast_CUDAGlobalAttr(A));
     case CUDAHost:
      return getDerived().TraverseCUDAHostAttr(cast_CUDAHostAttr(A));
     case CUDAInvalidTarget:
      return getDerived().TraverseCUDAInvalidTargetAttr(cast_CUDAInvalidTargetAttr(A));
     case CUDALaunchBounds:
      return getDerived().TraverseCUDALaunchBoundsAttr(cast_CUDALaunchBoundsAttr(A));
     case CUDAShared:
      return getDerived().TraverseCUDASharedAttr(cast_CUDASharedAttr(A));
     case CXX11NoReturn:
      return getDerived().TraverseCXX11NoReturnAttr(cast_CXX11NoReturnAttr(A));
     case CallableWhen:
      return getDerived().TraverseCallableWhenAttr(cast_CallableWhenAttr(A));
     case Capability:
      return getDerived().TraverseCapabilityAttr(cast_CapabilityAttr(A));
     case CapturedRecord:
      return getDerived().TraverseCapturedRecordAttr(cast_CapturedRecordAttr(A));
     case CarriesDependency:
      return getDerived().TraverseCarriesDependencyAttr(cast_CarriesDependencyAttr(A));
     case Cleanup:
      return getDerived().TraverseCleanupAttr(cast_CleanupAttr(A));
     case Cold:
      return getDerived().TraverseColdAttr(cast_ColdAttr(A));
     case Common:
      return getDerived().TraverseCommonAttr(cast_CommonAttr(A));
     case Const:
      return getDerived().TraverseConstAttr(cast_ConstAttr(A));
     case Constructor:
      return getDerived().TraverseConstructorAttr(cast_ConstructorAttr(A));
     case Consumable:
      return getDerived().TraverseConsumableAttr(cast_ConsumableAttr(A));
     case ConsumableAutoCast:
      return getDerived().TraverseConsumableAutoCastAttr(cast_ConsumableAutoCastAttr(A));
     case ConsumableSetOnRead:
      return getDerived().TraverseConsumableSetOnReadAttr(cast_ConsumableSetOnReadAttr(A));
     case DLLExport:
      return getDerived().TraverseDLLExportAttr(cast_DLLExportAttr(A));
     case DLLImport:
      return getDerived().TraverseDLLImportAttr(cast_DLLImportAttr(A));
     case Deprecated:
      return getDerived().TraverseDeprecatedAttr(cast_DeprecatedAttr(A));
     case Destructor:
      return getDerived().TraverseDestructorAttr(cast_DestructorAttr(A));
     case DisableTailCalls:
      return getDerived().TraverseDisableTailCallsAttr(cast_DisableTailCallsAttr(A));
     case EmptyBases:
      return getDerived().TraverseEmptyBasesAttr(cast_EmptyBasesAttr(A));
     case EnableIf:
      return getDerived().TraverseEnableIfAttr(cast_EnableIfAttr(A));
     case ExclusiveTrylockFunction:
      return getDerived().TraverseExclusiveTrylockFunctionAttr(cast_ExclusiveTrylockFunctionAttr(A));
     case FallThrough:
      return getDerived().TraverseFallThroughAttr(cast_FallThroughAttr(A));
     case FastCall:
      return getDerived().TraverseFastCallAttr(cast_FastCallAttr(A));
     case Final:
      return getDerived().TraverseFinalAttr(cast_FinalAttr(A));
     case FlagEnum:
      return getDerived().TraverseFlagEnumAttr(cast_FlagEnumAttr(A));
     case Flatten:
      return getDerived().TraverseFlattenAttr(cast_FlattenAttr(A));
     case Format:
      return getDerived().TraverseFormatAttr(cast_FormatAttr(A));
     case FormatArg:
      return getDerived().TraverseFormatArgAttr(cast_FormatArgAttr(A));
     case GNUInline:
      return getDerived().TraverseGNUInlineAttr(cast_GNUInlineAttr(A));
     case GuardedBy:
      return getDerived().TraverseGuardedByAttr(cast_GuardedByAttr(A));
     case GuardedVar:
      return getDerived().TraverseGuardedVarAttr(cast_GuardedVarAttr(A));
     case Hot:
      return getDerived().TraverseHotAttr(cast_HotAttr(A));
     case IBAction:
      return getDerived().TraverseIBActionAttr(cast_IBActionAttr(A));
     case IBOutlet:
      return getDerived().TraverseIBOutletAttr(cast_IBOutletAttr(A));
     case IBOutletCollection:
      return getDerived().TraverseIBOutletCollectionAttr(cast_IBOutletCollectionAttr(A));
     case IFunc:
      return getDerived().TraverseIFuncAttr(cast_IFuncAttr(A));
     case InitPriority:
      return getDerived().TraverseInitPriorityAttr(cast_InitPriorityAttr(A));
     case InitSeg:
      return getDerived().TraverseInitSegAttr(cast_InitSegAttr(A));
     case IntelOclBicc:
      return getDerived().TraverseIntelOclBiccAttr(cast_IntelOclBiccAttr(A));
     case InternalLinkage:
      return getDerived().TraverseInternalLinkageAttr(cast_InternalLinkageAttr(A));
     case LTOVisibilityPublic:
      return getDerived().TraverseLTOVisibilityPublicAttr(cast_LTOVisibilityPublicAttr(A));
     case LayoutVersion:
      return getDerived().TraverseLayoutVersionAttr(cast_LayoutVersionAttr(A));
     case LockReturned:
      return getDerived().TraverseLockReturnedAttr(cast_LockReturnedAttr(A));
     case LocksExcluded:
      return getDerived().TraverseLocksExcludedAttr(cast_LocksExcludedAttr(A));
     case LoopHint:
      return getDerived().TraverseLoopHintAttr(cast_LoopHintAttr(A));
     case MSABI:
      return getDerived().TraverseMSABIAttr(cast_MSABIAttr(A));
     case MSInheritance:
      return getDerived().TraverseMSInheritanceAttr(cast_MSInheritanceAttr(A));
     case MSNoVTable:
      return getDerived().TraverseMSNoVTableAttr(cast_MSNoVTableAttr(A));
     case MSP430Interrupt:
      return getDerived().TraverseMSP430InterruptAttr(cast_MSP430InterruptAttr(A));
     case MSStruct:
      return getDerived().TraverseMSStructAttr(cast_MSStructAttr(A));
     case MSVtorDisp:
      return getDerived().TraverseMSVtorDispAttr(cast_MSVtorDispAttr(A));
     case MaxFieldAlignment:
      return getDerived().TraverseMaxFieldAlignmentAttr(cast_MaxFieldAlignmentAttr(A));
     case MayAlias:
      return getDerived().TraverseMayAliasAttr(cast_MayAliasAttr(A));
     case MinSize:
      return getDerived().TraverseMinSizeAttr(cast_MinSizeAttr(A));
     case Mips16:
      return getDerived().TraverseMips16Attr(cast_Mips16Attr(A));
     case MipsInterrupt:
      return getDerived().TraverseMipsInterruptAttr(cast_MipsInterruptAttr(A));
     case Mode:
      return getDerived().TraverseModeAttr(cast_ModeAttr(A));
     case NSConsumed:
      return getDerived().TraverseNSConsumedAttr(cast_NSConsumedAttr(A));
     case NSConsumesSelf:
      return getDerived().TraverseNSConsumesSelfAttr(cast_NSConsumesSelfAttr(A));
     case NSReturnsAutoreleased:
      return getDerived().TraverseNSReturnsAutoreleasedAttr(cast_NSReturnsAutoreleasedAttr(A));
     case NSReturnsNotRetained:
      return getDerived().TraverseNSReturnsNotRetainedAttr(cast_NSReturnsNotRetainedAttr(A));
     case NSReturnsRetained:
      return getDerived().TraverseNSReturnsRetainedAttr(cast_NSReturnsRetainedAttr(A));
     case Naked:
      return getDerived().TraverseNakedAttr(cast_NakedAttr(A));
     case NoAlias:
      return getDerived().TraverseNoAliasAttr(cast_NoAliasAttr(A));
     case NoCommon:
      return getDerived().TraverseNoCommonAttr(cast_NoCommonAttr(A));
     case NoDebug:
      return getDerived().TraverseNoDebugAttr(cast_NoDebugAttr(A));
     case NoDuplicate:
      return getDerived().TraverseNoDuplicateAttr(cast_NoDuplicateAttr(A));
     case NoInline:
      return getDerived().TraverseNoInlineAttr(cast_NoInlineAttr(A));
     case NoInstrumentFunction:
      return getDerived().TraverseNoInstrumentFunctionAttr(cast_NoInstrumentFunctionAttr(A));
     case NoMips16:
      return getDerived().TraverseNoMips16Attr(cast_NoMips16Attr(A));
     case NoReturn:
      return getDerived().TraverseNoReturnAttr(cast_NoReturnAttr(A));
     case NoSanitize:
      return getDerived().TraverseNoSanitizeAttr(cast_NoSanitizeAttr(A));
     case NoSplitStack:
      return getDerived().TraverseNoSplitStackAttr(cast_NoSplitStackAttr(A));
     case NoThreadSafetyAnalysis:
      return getDerived().TraverseNoThreadSafetyAnalysisAttr(cast_NoThreadSafetyAnalysisAttr(A));
     case NoThrow:
      return getDerived().TraverseNoThrowAttr(cast_NoThrowAttr(A));
     case NonNull:
      return getDerived().TraverseNonNullAttr(cast_NonNullAttr(A));
     case NotTailCalled:
      return getDerived().TraverseNotTailCalledAttr(cast_NotTailCalledAttr(A));
     case OMPCaptureNoInit:
      return getDerived().TraverseOMPCaptureNoInitAttr(cast_OMPCaptureNoInitAttr(A));
     case OMPDeclareSimdDecl:
      return getDerived().TraverseOMPDeclareSimdDeclAttr(cast_OMPDeclareSimdDeclAttr(A));
     case OMPDeclareTargetDecl:
      return getDerived().TraverseOMPDeclareTargetDeclAttr(cast_OMPDeclareTargetDeclAttr(A));
     case OMPThreadPrivateDecl:
      return getDerived().TraverseOMPThreadPrivateDeclAttr(cast_OMPThreadPrivateDeclAttr(A));
     case ObjCBoxable:
      return getDerived().TraverseObjCBoxableAttr(cast_ObjCBoxableAttr(A));
     case ObjCBridge:
      return getDerived().TraverseObjCBridgeAttr(cast_ObjCBridgeAttr(A));
     case ObjCBridgeMutable:
      return getDerived().TraverseObjCBridgeMutableAttr(cast_ObjCBridgeMutableAttr(A));
     case ObjCBridgeRelated:
      return getDerived().TraverseObjCBridgeRelatedAttr(cast_ObjCBridgeRelatedAttr(A));
     case ObjCDesignatedInitializer:
      return getDerived().TraverseObjCDesignatedInitializerAttr(cast_ObjCDesignatedInitializerAttr(A));
     case ObjCException:
      return getDerived().TraverseObjCExceptionAttr(cast_ObjCExceptionAttr(A));
     case ObjCExplicitProtocolImpl:
      return getDerived().TraverseObjCExplicitProtocolImplAttr(cast_ObjCExplicitProtocolImplAttr(A));
     case ObjCIndependentClass:
      return getDerived().TraverseObjCIndependentClassAttr(cast_ObjCIndependentClassAttr(A));
     case ObjCMethodFamily:
      return getDerived().TraverseObjCMethodFamilyAttr(cast_ObjCMethodFamilyAttr(A));
     case ObjCNSObject:
      return getDerived().TraverseObjCNSObjectAttr(cast_ObjCNSObjectAttr(A));
     case ObjCPreciseLifetime:
      return getDerived().TraverseObjCPreciseLifetimeAttr(cast_ObjCPreciseLifetimeAttr(A));
     case ObjCRequiresPropertyDefs:
      return getDerived().TraverseObjCRequiresPropertyDefsAttr(cast_ObjCRequiresPropertyDefsAttr(A));
     case ObjCRequiresSuper:
      return getDerived().TraverseObjCRequiresSuperAttr(cast_ObjCRequiresSuperAttr(A));
     case ObjCReturnsInnerPointer:
      return getDerived().TraverseObjCReturnsInnerPointerAttr(cast_ObjCReturnsInnerPointerAttr(A));
     case ObjCRootClass:
      return getDerived().TraverseObjCRootClassAttr(cast_ObjCRootClassAttr(A));
     case ObjCRuntimeName:
      return getDerived().TraverseObjCRuntimeNameAttr(cast_ObjCRuntimeNameAttr(A));
     case ObjCRuntimeVisible:
      return getDerived().TraverseObjCRuntimeVisibleAttr(cast_ObjCRuntimeVisibleAttr(A));
     case OpenCLAccess:
      return getDerived().TraverseOpenCLAccessAttr(cast_OpenCLAccessAttr(A));
     case OpenCLKernel:
      return getDerived().TraverseOpenCLKernelAttr(cast_OpenCLKernelAttr(A));
     case OpenCLUnrollHint:
      return getDerived().TraverseOpenCLUnrollHintAttr(cast_OpenCLUnrollHintAttr(A));
     case OptimizeNone:
      return getDerived().TraverseOptimizeNoneAttr(cast_OptimizeNoneAttr(A));
     case Overloadable:
      return getDerived().TraverseOverloadableAttr(cast_OverloadableAttr(A));
     case Override:
      return getDerived().TraverseOverrideAttr(cast_OverrideAttr(A));
     case Ownership:
      return getDerived().TraverseOwnershipAttr(cast_OwnershipAttr(A));
     case Packed:
      return getDerived().TraversePackedAttr(cast_PackedAttr(A));
     case ParamTypestate:
      return getDerived().TraverseParamTypestateAttr(cast_ParamTypestateAttr(A));
     case Pascal:
      return getDerived().TraversePascalAttr(cast_PascalAttr(A));
     case PassObjectSize:
      return getDerived().TraversePassObjectSizeAttr(cast_PassObjectSizeAttr(A));
     case Pcs:
      return getDerived().TraversePcsAttr(cast_PcsAttr(A));
     case PreserveAll:
      return getDerived().TraversePreserveAllAttr(cast_PreserveAllAttr(A));
     case PreserveMost:
      return getDerived().TraversePreserveMostAttr(cast_PreserveMostAttr(A));
     case PtGuardedBy:
      return getDerived().TraversePtGuardedByAttr(cast_PtGuardedByAttr(A));
     case PtGuardedVar:
      return getDerived().TraversePtGuardedVarAttr(cast_PtGuardedVarAttr(A));
     case Pure:
      return getDerived().TraversePureAttr(cast_PureAttr(A));
     case ReleaseCapability:
      return getDerived().TraverseReleaseCapabilityAttr(cast_ReleaseCapabilityAttr(A));
     case RenderScriptKernel:
      return getDerived().TraverseRenderScriptKernelAttr(cast_RenderScriptKernelAttr(A));
     case ReqdWorkGroupSize:
      return getDerived().TraverseReqdWorkGroupSizeAttr(cast_ReqdWorkGroupSizeAttr(A));
     case RequiresCapability:
      return getDerived().TraverseRequiresCapabilityAttr(cast_RequiresCapabilityAttr(A));
     case Restrict:
      return getDerived().TraverseRestrictAttr(cast_RestrictAttr(A));
     case ReturnTypestate:
      return getDerived().TraverseReturnTypestateAttr(cast_ReturnTypestateAttr(A));
     case ReturnsNonNull:
      return getDerived().TraverseReturnsNonNullAttr(cast_ReturnsNonNullAttr(A));
     case ReturnsTwice:
      return getDerived().TraverseReturnsTwiceAttr(cast_ReturnsTwiceAttr(A));
     case ScopedLockable:
      return getDerived().TraverseScopedLockableAttr(cast_ScopedLockableAttr(A));
     case Section:
      return getDerived().TraverseSectionAttr(cast_SectionAttr(A));
     case SelectAny:
      return getDerived().TraverseSelectAnyAttr(cast_SelectAnyAttr(A));
     case Sentinel:
      return getDerived().TraverseSentinelAttr(cast_SentinelAttr(A));
     case SetTypestate:
      return getDerived().TraverseSetTypestateAttr(cast_SetTypestateAttr(A));
     case SharedTrylockFunction:
      return getDerived().TraverseSharedTrylockFunctionAttr(cast_SharedTrylockFunctionAttr(A));
     case StdCall:
      return getDerived().TraverseStdCallAttr(cast_StdCallAttr(A));
     case SwiftCall:
      return getDerived().TraverseSwiftCallAttr(cast_SwiftCallAttr(A));
     case SwiftContext:
      return getDerived().TraverseSwiftContextAttr(cast_SwiftContextAttr(A));
     case SwiftErrorResult:
      return getDerived().TraverseSwiftErrorResultAttr(cast_SwiftErrorResultAttr(A));
     case SwiftIndirectResult:
      return getDerived().TraverseSwiftIndirectResultAttr(cast_SwiftIndirectResultAttr(A));
     case SysVABI:
      return getDerived().TraverseSysVABIAttr(cast_SysVABIAttr(A));
     case TLSModel:
      return getDerived().TraverseTLSModelAttr(cast_TLSModelAttr(A));
     case Target:
      return getDerived().TraverseTargetAttr(cast_TargetAttr(A));
     case TestTypestate:
      return getDerived().TraverseTestTypestateAttr(cast_TestTypestateAttr(A));
     case ThisCall:
      return getDerived().TraverseThisCallAttr(cast_ThisCallAttr(A));
     case Thread:
      return getDerived().TraverseThreadAttr(cast_ThreadAttr(A));
     case TransparentUnion:
      return getDerived().TraverseTransparentUnionAttr(cast_TransparentUnionAttr(A));
     case TryAcquireCapability:
      return getDerived().TraverseTryAcquireCapabilityAttr(cast_TryAcquireCapabilityAttr(A));
     case TypeTagForDatatype:
      return getDerived().TraverseTypeTagForDatatypeAttr(cast_TypeTagForDatatypeAttr(A));
     case TypeVisibility:
      return getDerived().TraverseTypeVisibilityAttr(cast_TypeVisibilityAttr(A));
     case Unavailable:
      return getDerived().TraverseUnavailableAttr(cast_UnavailableAttr(A));
     case Unused:
      return getDerived().TraverseUnusedAttr(cast_UnusedAttr(A));
     case Used:
      return getDerived().TraverseUsedAttr(cast_UsedAttr(A));
     case Uuid:
      return getDerived().TraverseUuidAttr(cast_UuidAttr(A));
     case VecReturn:
      return getDerived().TraverseVecReturnAttr(cast_VecReturnAttr(A));
     case VecTypeHint:
      return getDerived().TraverseVecTypeHintAttr(cast_VecTypeHintAttr(A));
     case VectorCall:
      return getDerived().TraverseVectorCallAttr(cast_VectorCallAttr(A));
     case Visibility:
      return getDerived().TraverseVisibilityAttr(cast_VisibilityAttr(A));
     case WarnUnused:
      return getDerived().TraverseWarnUnusedAttr(cast_WarnUnusedAttr(A));
     case WarnUnusedResult:
      return getDerived().TraverseWarnUnusedResultAttr(cast_WarnUnusedResultAttr(A));
     case Weak:
      return getDerived().TraverseWeakAttr(cast_WeakAttr(A));
     case WeakImport:
      return getDerived().TraverseWeakImportAttr(cast_WeakImportAttr(A));
     case WeakRef:
      return getDerived().TraverseWeakRefAttr(cast_WeakRefAttr(A));
     case WorkGroupSizeHint:
      return getDerived().TraverseWorkGroupSizeHintAttr(cast_WorkGroupSizeHintAttr(A));
     case X86ForceAlignArgPointer:
      return getDerived().TraverseX86ForceAlignArgPointerAttr(cast_X86ForceAlignArgPointerAttr(A));
     case XRayInstrument:
      return getDerived().TraverseXRayInstrumentAttr(cast_XRayInstrumentAttr(A));
    }
    throw new llvm_unreachable("bad attribute kind");
  }

  
  /// \brief Recursively visit a declaration, by dispatching to
  /// Traverse*Decl() based on the argument's dynamic type.
  ///
  /// \returns false if the visitation was terminated early, true
  /// otherwise (including when the argument is NULL).
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDecl">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 667,
   FQN="clang::RecursiveASTVisitor::TraverseDecl", NM="_ZN5clang19RecursiveASTVisitor12TraverseDeclEPNS_4DeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12TraverseDeclEPNS_4DeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDecl(Decl /*P*/ D) {
    if (!(D != null)) {
      return true;
    }
    
    // As a syntax visitor, by default we want to ignore declarations for
    // implicit declarations (ones not typed explicitly by the user).
    if (!getDerived().shouldVisitImplicitCode() && D.isImplicit()) {
      return true;
    }
    switch (D.getKind()) {
     case AccessSpec:
      if (!getDerived().TraverseAccessSpecDecl(((/*static_cast*/AccessSpecDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Block:
      if (!getDerived().TraverseBlockDecl(((/*static_cast*/BlockDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Captured:
      if (!getDerived().TraverseCapturedDecl(((/*static_cast*/CapturedDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ClassScopeFunctionSpecialization:
      if (!getDerived().TraverseClassScopeFunctionSpecializationDecl(((/*static_cast*/ClassScopeFunctionSpecializationDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Empty:
      if (!getDerived().TraverseEmptyDecl(((/*static_cast*/EmptyDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ExternCContext:
      if (!getDerived().TraverseExternCContextDecl(((/*static_cast*/ExternCContextDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case FileScopeAsm:
      if (!getDerived().TraverseFileScopeAsmDecl(((/*static_cast*/FileScopeAsmDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Friend:
      if (!getDerived().TraverseFriendDecl(((/*static_cast*/FriendDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case FriendTemplate:
      if (!getDerived().TraverseFriendTemplateDecl(((/*static_cast*/FriendTemplateDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Import:
      if (!getDerived().TraverseImportDecl(((/*static_cast*/ImportDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case LinkageSpec:
      if (!getDerived().TraverseLinkageSpecDecl(((/*static_cast*/LinkageSpecDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Label:
      if (!getDerived().TraverseLabelDecl(((/*static_cast*/LabelDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Namespace:
      if (!getDerived().TraverseNamespaceDecl(((/*static_cast*/NamespaceDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case NamespaceAlias:
      if (!getDerived().TraverseNamespaceAliasDecl(((/*static_cast*/NamespaceAliasDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCCompatibleAlias:
      if (!getDerived().TraverseObjCCompatibleAliasDecl(((/*static_cast*/ObjCCompatibleAliasDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCCategory:
      if (!getDerived().TraverseObjCCategoryDecl(((/*static_cast*/ObjCCategoryDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCCategoryImpl:
      if (!getDerived().TraverseObjCCategoryImplDecl(((/*static_cast*/ObjCCategoryImplDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCImplementation:
      if (!getDerived().TraverseObjCImplementationDecl(((/*static_cast*/ObjCImplementationDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCInterface:
      if (!getDerived().TraverseObjCInterfaceDecl(((/*static_cast*/ObjCInterfaceDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCProtocol:
      if (!getDerived().TraverseObjCProtocolDecl(((/*static_cast*/ObjCProtocolDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCMethod:
      if (!getDerived().TraverseObjCMethodDecl(((/*static_cast*/ObjCMethodDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCProperty:
      if (!getDerived().TraverseObjCPropertyDecl(((/*static_cast*/ObjCPropertyDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case BuiltinTemplate:
      if (!getDerived().TraverseBuiltinTemplateDecl(((/*static_cast*/BuiltinTemplateDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ClassTemplate:
      if (!getDerived().TraverseClassTemplateDecl(((/*static_cast*/ClassTemplateDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case FunctionTemplate:
      if (!getDerived().TraverseFunctionTemplateDecl(((/*static_cast*/FunctionTemplateDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case TypeAliasTemplate:
      if (!getDerived().TraverseTypeAliasTemplateDecl(((/*static_cast*/TypeAliasTemplateDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case VarTemplate:
      if (!getDerived().TraverseVarTemplateDecl(((/*static_cast*/VarTemplateDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case TemplateTemplateParm:
      if (!getDerived().TraverseTemplateTemplateParmDecl(((/*static_cast*/TemplateTemplateParmDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Enum:
      if (!getDerived().TraverseEnumDecl(((/*static_cast*/EnumDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Record:
      if (!getDerived().TraverseRecordDecl(((/*static_cast*/RecordDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case CXXRecord:
      if (!getDerived().TraverseCXXRecordDecl(((/*static_cast*/CXXRecordDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ClassTemplateSpecialization:
      if (!getDerived().TraverseClassTemplateSpecializationDecl(((/*static_cast*/ClassTemplateSpecializationDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ClassTemplatePartialSpecialization:
      if (!getDerived().TraverseClassTemplatePartialSpecializationDecl(((/*static_cast*/ClassTemplatePartialSpecializationDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case TemplateTypeParm:
      if (!getDerived().TraverseTemplateTypeParmDecl(((/*static_cast*/TemplateTypeParmDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCTypeParam:
      if (!getDerived().TraverseObjCTypeParamDecl(((/*static_cast*/ObjCTypeParamDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case TypeAlias:
      if (!getDerived().TraverseTypeAliasDecl(((/*static_cast*/TypeAliasDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Typedef:
      if (!getDerived().TraverseTypedefDecl(((/*static_cast*/TypedefDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case UnresolvedUsingTypename:
      if (!getDerived().TraverseUnresolvedUsingTypenameDecl(((/*static_cast*/UnresolvedUsingTypenameDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Using:
      if (!getDerived().TraverseUsingDecl(((/*static_cast*/UsingDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case UsingDirective:
      if (!getDerived().TraverseUsingDirectiveDecl(((/*static_cast*/UsingDirectiveDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case UsingShadow:
      if (!getDerived().TraverseUsingShadowDecl(((/*static_cast*/UsingShadowDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ConstructorUsingShadow:
      if (!getDerived().TraverseConstructorUsingShadowDecl(((/*static_cast*/ConstructorUsingShadowDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Field:
      if (!getDerived().TraverseFieldDecl(((/*static_cast*/FieldDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCAtDefsField:
      if (!getDerived().TraverseObjCAtDefsFieldDecl(((/*static_cast*/ObjCAtDefsFieldDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCIvar:
      if (!getDerived().TraverseObjCIvarDecl(((/*static_cast*/ObjCIvarDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Function:
      if (!getDerived().TraverseFunctionDecl(((/*static_cast*/FunctionDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case CXXMethod:
      if (!getDerived().TraverseCXXMethodDecl(((/*static_cast*/CXXMethodDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case CXXConstructor:
      if (!getDerived().TraverseCXXConstructorDecl(((/*static_cast*/CXXConstructorDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case CXXConversion:
      if (!getDerived().TraverseCXXConversionDecl(((/*static_cast*/CXXConversionDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case CXXDestructor:
      if (!getDerived().TraverseCXXDestructorDecl(((/*static_cast*/CXXDestructorDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case MSProperty:
      if (!getDerived().TraverseMSPropertyDecl(((/*static_cast*/MSPropertyDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case NonTypeTemplateParm:
      if (!getDerived().TraverseNonTypeTemplateParmDecl(((/*static_cast*/NonTypeTemplateParmDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case Var:
      if (!getDerived().TraverseVarDecl(((/*static_cast*/VarDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ImplicitParam:
      if (!getDerived().TraverseImplicitParamDecl(((/*static_cast*/ImplicitParamDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case OMPCapturedExpr:
      if (!getDerived().TraverseOMPCapturedExprDecl(((/*static_cast*/OMPCapturedExprDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ParmVar:
      if (!getDerived().TraverseParmVarDecl(((/*static_cast*/ParmVarDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case VarTemplateSpecialization:
      if (!getDerived().TraverseVarTemplateSpecializationDecl(((/*static_cast*/VarTemplateSpecializationDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case VarTemplatePartialSpecialization:
      if (!getDerived().TraverseVarTemplatePartialSpecializationDecl(((/*static_cast*/VarTemplatePartialSpecializationDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case EnumConstant:
      if (!getDerived().TraverseEnumConstantDecl(((/*static_cast*/EnumConstantDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case IndirectField:
      if (!getDerived().TraverseIndirectFieldDecl(((/*static_cast*/IndirectFieldDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case OMPDeclareReduction:
      if (!getDerived().TraverseOMPDeclareReductionDecl(((/*static_cast*/OMPDeclareReductionDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case UnresolvedUsingValue:
      if (!getDerived().TraverseUnresolvedUsingValueDecl(((/*static_cast*/UnresolvedUsingValueDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case OMPThreadPrivate:
      if (!getDerived().TraverseOMPThreadPrivateDecl(((/*static_cast*/OMPThreadPrivateDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case ObjCPropertyImpl:
      if (!getDerived().TraverseObjCPropertyImplDecl(((/*static_cast*/ObjCPropertyImplDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case PragmaComment:
      if (!getDerived().TraversePragmaCommentDecl(((/*static_cast*/PragmaCommentDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case PragmaDetectMismatch:
      if (!getDerived().TraversePragmaDetectMismatchDecl(((/*static_cast*/PragmaDetectMismatchDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case StaticAssert:
      if (!getDerived().TraverseStaticAssertDecl(((/*static_cast*/StaticAssertDecl /*P*/ )(D)))) {
        return false;
      }
      break;
     case TranslationUnit:
      if (!getDerived().TraverseTranslationUnitDecl(((/*static_cast*/TranslationUnitDecl /*P*/ )(D)))) {
        return false;
      }
      break;
    }
    
    // Visit any attributes attached to this declaration.
    for (Attr /*P*/ I : D.attrs()) {
      if (!getDerived().TraverseAttr(I)) {
        return false;
      }
    }
    return true;
  }

  
  /// \brief Recursively visit a C++ nested-name-specifier.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNestedNameSpecifier">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 697,
   FQN="clang::RecursiveASTVisitor::TraverseNestedNameSpecifier", NM="_ZN5clang19RecursiveASTVisitor27TraverseNestedNameSpecifierEPNS_19NestedNameSpecifierE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseNestedNameSpecifierEPNS_19NestedNameSpecifierE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNestedNameSpecifier(NestedNameSpecifier /*P*/ NNS) {
    if (!(NNS != null)) {
      return true;
    }
    if ((NNS.getPrefix() != null)) {
      do {
        if (!getDerived().TraverseNestedNameSpecifier(NNS.getPrefix())) {
          return false;
        }
      } while (false);
    }
    switch (NNS.getKind()) {
     case Identifier:
     case Namespace:
     case NamespaceAlias:
     case Global:
     case Super:
      return true;
     case TypeSpec:
     case TypeSpecWithTemplate:
      do {
        if (!getDerived().TraverseType(new QualType(NNS.getAsType(), 0))) {
          return false;
        }
      } while (false);
    }
    
    return true;
  }

  
  /// \brief Recursively visit a C++ nested-name-specifier with location
  /// information.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNestedNameSpecifierLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 722,
   FQN="clang::RecursiveASTVisitor::TraverseNestedNameSpecifierLoc", NM="_ZN5clang19RecursiveASTVisitor30TraverseNestedNameSpecifierLocENS_22NestedNameSpecifierLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseNestedNameSpecifierLocENS_22NestedNameSpecifierLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNestedNameSpecifierLoc(NestedNameSpecifierLoc NNS) {
    if (!NNS.$bool()) {
      return true;
    }
    {
      
      NestedNameSpecifierLoc Prefix = NNS.getPrefix();
      if (Prefix.$bool()) {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(Prefix)) {
            return false;
          }
        } while (false);
      }
    }
    switch (NNS.getNestedNameSpecifier().getKind()) {
     case Identifier:
     case Namespace:
     case NamespaceAlias:
     case Global:
     case Super:
      return true;
     case TypeSpec:
     case TypeSpecWithTemplate:
      do {
        if (!getDerived().TraverseTypeLoc(NNS.getTypeLoc())) {
          return false;
        }
      } while (false);
      break;
    }
    
    return true;
  }

  
  /// \brief Recursively visit a name with its location information.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDeclarationNameInfo">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 748,
   FQN="clang::RecursiveASTVisitor::TraverseDeclarationNameInfo", NM="_ZN5clang19RecursiveASTVisitor27TraverseDeclarationNameInfoENS_19DeclarationNameInfoE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseDeclarationNameInfoENS_19DeclarationNameInfoE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDeclarationNameInfo(DeclarationNameInfo NameInfo) {
    switch (NameInfo.getName().getNameKind()) {
     case CXXConstructorName:
     case CXXDestructorName:
     case CXXConversionFunctionName:
      {
        TypeSourceInfo /*P*/ TSInfo = NameInfo.getNamedTypeInfo();
        if ((TSInfo != null)) {
          do {
            if (!getDerived().TraverseTypeLoc(TSInfo.getTypeLoc())) {
              return false;
            }
          } while (false);
        }
      }
      
      break;
     case Identifier:
     case ObjCZeroArgSelector:
     case ObjCOneArgSelector:
     case ObjCMultiArgSelector:
     case CXXOperatorName:
     case CXXLiteralOperatorName:
     case CXXUsingDirective:
      break;
    }
    
    return true;
  }

  
  /// \brief Recursively visit a template name and dispatch to the
  /// appropriate method.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateName">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 773,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateName", NM="_ZN5clang19RecursiveASTVisitor20TraverseTemplateNameENS_12TemplateNameE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseTemplateNameENS_12TemplateNameE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateName(TemplateName Template) {
    {
      DependentTemplateName /*P*/ DTN = Template.getAsDependentTemplateName();
      if ((DTN != null)) {
        do {
          if (!getDerived().TraverseNestedNameSpecifier(DTN.getQualifier())) {
            return false;
          }
        } while (false);
      } else {
        QualifiedTemplateName /*P*/ QTN = Template.getAsQualifiedTemplateName();
        if ((QTN != null)) {
          do {
            if (!getDerived().TraverseNestedNameSpecifier(QTN.getQualifier())) {
              return false;
            }
          } while (false);
        }
      }
    }
    
    return true;
  }

  
  /// \brief Recursively visit a template argument and dispatch to the
  /// appropriate method for the argument type.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  // FIXME: migrate callers to TemplateArgumentLoc instead.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateArgument">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 783,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateArgument", NM="_ZN5clang19RecursiveASTVisitor24TraverseTemplateArgumentERKNS_16TemplateArgumentE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseTemplateArgumentERKNS_16TemplateArgumentE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateArgument(final /*const*/ TemplateArgument /*&*/ Arg) {
    switch (Arg.getKind()) {
     case Null:
     case Declaration:
     case Integral:
     case NullPtr:
      return true;
     case Type:
      return getDerived().TraverseType(Arg.getAsType());
     case Template:
     case TemplateExpansion:
      return getDerived().TraverseTemplateName(Arg.getAsTemplateOrTemplatePattern());
     case Expression:
      return getDerived().TraverseStmt(Arg.getAsExpr());
     case Pack:
      return getDerived().TraverseTemplateArguments(Arg.pack_begin(), 
          Arg.pack_size());
    }
    
    return true;
  }

  
  /// \brief Recursively visit a template argument location and dispatch to the
  /// appropriate method for the argument type.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  
  // FIXME: no template name location?
  // FIXME: no source locations for a template argument pack?
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateArgumentLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 814,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateArgumentLoc", NM="_ZN5clang19RecursiveASTVisitor27TraverseTemplateArgumentLocERKNS_19TemplateArgumentLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseTemplateArgumentLocERKNS_19TemplateArgumentLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateArgumentLoc(final /*const*/ TemplateArgumentLoc /*&*/ ArgLoc) {
    final /*const*/ TemplateArgument /*&*/ Arg = ArgLoc.getArgument();
    switch (Arg.getKind()) {
     case Null:
     case Declaration:
     case Integral:
     case NullPtr:
      return true;
     case Type:
      {
        {
          // FIXME: how can TSI ever be NULL?
          TypeSourceInfo /*P*/ TSI = ArgLoc.getTypeSourceInfo();
          if ((TSI != null)) {
            return getDerived().TraverseTypeLoc(TSI.getTypeLoc());
          } else {
            return getDerived().TraverseType(Arg.getAsType());
          }
        }
      }
     case Template:
     case TemplateExpansion:
      if (ArgLoc.getTemplateQualifierLoc().$bool()) {
        do {
          if (!getDerived().getDerived().TraverseNestedNameSpecifierLoc(ArgLoc.getTemplateQualifierLoc())) {
            return false;
          }
        } while (false);
      }
      return getDerived().TraverseTemplateName(Arg.getAsTemplateOrTemplatePattern());
     case Expression:
      return getDerived().TraverseStmt(ArgLoc.getSourceExpression());
     case Pack:
      return getDerived().TraverseTemplateArguments(Arg.pack_begin(), 
          Arg.pack_size());
    }
    
    return true;
  }

  
  /// \brief Recursively visit a set of template arguments.
  /// This can be overridden by a subclass, but it's not expected that
  /// will be needed -- this visitor always dispatches to another.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  // FIXME: take a TemplateArgumentLoc* (or TemplateArgumentListInfo) instead.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateArguments">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 853,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateArguments", NM="_ZN5clang19RecursiveASTVisitor25TraverseTemplateArgumentsEPKNS_16TemplateArgumentEj",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseTemplateArgumentsEPKNS_16TemplateArgumentEj")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateArguments(/*const*/type$ptr<TemplateArgument/*P*/> Args, /*uint*/int NumArgs) {
    for (/*uint*/int I = 0; I != NumArgs; ++I) {
      do {
        if (!getDerived().TraverseTemplateArgument(Args.$at(I))) {
          return false;
        }
      } while (false);
    }
    
    return true;
  }

  
  /// \brief Recursively visit a constructor initializer.  This
  /// automatically dispatches to another visitor for the initializer
  /// expression, but not for the name of the initializer, so may
  /// be overridden for clients that need access to the name.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConstructorInitializer">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 863,
   FQN="clang::RecursiveASTVisitor::TraverseConstructorInitializer", NM="_ZN5clang19RecursiveASTVisitor30TraverseConstructorInitializerEPNS_18CXXCtorInitializerE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseConstructorInitializerEPNS_18CXXCtorInitializerE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConstructorInitializer(CXXCtorInitializer /*P*/ Init) {
    {
      TypeSourceInfo /*P*/ TInfo = Init.getTypeSourceInfo();
      if ((TInfo != null)) {
        do {
          if (!getDerived().TraverseTypeLoc(TInfo.getTypeLoc())) {
            return false;
          }
        } while (false);
      }
    }
    if (Init.isWritten() || getDerived().shouldVisitImplicitCode()) {
      do {
        if (!getDerived().TraverseStmt(Init.getInit())) {
          return false;
        }
      } while (false);
    }
    if (getDerived().shouldVisitImplicitCode()) {
      // The braces for this one-line loop are required for MSVC2013.  It
      // refuses to compile
      //     for (int i : int_vec)
      //       do {} while(false);
      // without braces on the for loop.
      for (VarDecl /*P*/ VD : Init.getArrayIndices()) {
        do {
          if (!getDerived().TraverseDecl(VD)) {
            return false;
          }
        } while (false);
      }
    }
    
    return true;
  }

  
  /// \brief Recursively visit a lambda capture.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLambdaCapture">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 885,
   FQN="clang::RecursiveASTVisitor::TraverseLambdaCapture", NM="_ZN5clang19RecursiveASTVisitor21TraverseLambdaCaptureEPNS_10LambdaExprEPKNS_13LambdaCaptureE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseLambdaCaptureEPNS_10LambdaExprEPKNS_13LambdaCaptureE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLambdaCapture(LambdaExpr /*P*/ LE, 
                       /*const*/ LambdaCapture /*P*/ C) {
    if (LE.isInitCapture(C)) {
      do {
        if (!getDerived().TraverseDecl(C.getCapturedVar())) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  
  /// \brief Recursively visit the body of a lambda expression.
  ///
  /// This provides a hook for visitors that need more context when visiting
  /// \c LE->getBody().
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLambdaBody">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 894,
   FQN="clang::RecursiveASTVisitor::TraverseLambdaBody", NM="_ZN5clang19RecursiveASTVisitor18TraverseLambdaBodyEPNS_10LambdaExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseLambdaBodyEPNS_10LambdaExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLambdaBody(LambdaExpr /*P*/ LE) {
    return TraverseLambdaBody(LE, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseLambdaBody(LambdaExpr /*P*/ LE, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(LE.getBody())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(LE.getBody()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  
  /// \brief Recursively visit the syntactic or semantic form of an
  /// initialization list.
  ///
  /// \returns false if the visitation was terminated early, true otherwise.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSynOrSemInitListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2123,
   FQN="clang::RecursiveASTVisitor::TraverseSynOrSemInitListExpr", NM="_ZN5clang19RecursiveASTVisitor28TraverseSynOrSemInitListExprEPNS_12InitListExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseSynOrSemInitListExprEPNS_12InitListExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSynOrSemInitListExpr(InitListExpr /*P*/ S) {
    return TraverseSynOrSemInitListExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseSynOrSemInitListExpr(InitListExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if ((S != null)) {
      // Skip this if we traverse postorder. We will visit it later
      // in PostVisitStmt.
      if (!getDerived().shouldTraversePostOrder()) {
        do {
          if (!getDerived().WalkUpFromInitListExpr(S)) {
            return false;
          }
        } while (false);
      }
      
      // All we need are the default actions.  FIXME: use a helper function.
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    return true;
  }

  
  // ---- Methods on Attrs ----
  
  // \brief Visit an attribute.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 290,
   FQN="clang::RecursiveASTVisitor::VisitAttr", NM="_ZN5clang19RecursiveASTVisitor9VisitAttrEPNS_4AttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor9VisitAttrEPNS_4AttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAttr(Attr /*P*/ A) {
    return true;
  }

  
  // ATTR_VISITOR_DECLS_ONLY
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAMDGPUNumSGPRAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 806,
   FQN="clang::RecursiveASTVisitor::TraverseAMDGPUNumSGPRAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseAMDGPUNumSGPRAttrEPNS_17AMDGPUNumSGPRAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseAMDGPUNumSGPRAttrEPNS_17AMDGPUNumSGPRAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAMDGPUNumSGPRAttr(AMDGPUNumSGPRAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAMDGPUNumSGPRAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAMDGPUNumSGPRAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 12,
   FQN="clang::RecursiveASTVisitor::VisitAMDGPUNumSGPRAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitAMDGPUNumSGPRAttrEPNS_17AMDGPUNumSGPRAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitAMDGPUNumSGPRAttrEPNS_17AMDGPUNumSGPRAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAMDGPUNumSGPRAttr(AMDGPUNumSGPRAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAMDGPUNumVGPRAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 815,
   FQN="clang::RecursiveASTVisitor::TraverseAMDGPUNumVGPRAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseAMDGPUNumVGPRAttrEPNS_17AMDGPUNumVGPRAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseAMDGPUNumVGPRAttrEPNS_17AMDGPUNumVGPRAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAMDGPUNumVGPRAttr(AMDGPUNumVGPRAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAMDGPUNumVGPRAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAMDGPUNumVGPRAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 16,
   FQN="clang::RecursiveASTVisitor::VisitAMDGPUNumVGPRAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitAMDGPUNumVGPRAttrEPNS_17AMDGPUNumVGPRAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitAMDGPUNumVGPRAttrEPNS_17AMDGPUNumVGPRAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAMDGPUNumVGPRAttr(AMDGPUNumVGPRAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseARMInterruptAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 824,
   FQN="clang::RecursiveASTVisitor::TraverseARMInterruptAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseARMInterruptAttrEPNS_16ARMInterruptAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseARMInterruptAttrEPNS_16ARMInterruptAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseARMInterruptAttr(ARMInterruptAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitARMInterruptAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitARMInterruptAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 20,
   FQN="clang::RecursiveASTVisitor::VisitARMInterruptAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitARMInterruptAttrEPNS_16ARMInterruptAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitARMInterruptAttrEPNS_16ARMInterruptAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitARMInterruptAttr(ARMInterruptAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAbiTagAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 833,
   FQN="clang::RecursiveASTVisitor::TraverseAbiTagAttr", NM="_ZN5clang19RecursiveASTVisitor18TraverseAbiTagAttrEPNS_10AbiTagAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseAbiTagAttrEPNS_10AbiTagAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAbiTagAttr(AbiTagAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAbiTagAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAbiTagAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 24,
   FQN="clang::RecursiveASTVisitor::VisitAbiTagAttr", NM="_ZN5clang19RecursiveASTVisitor15VisitAbiTagAttrEPNS_10AbiTagAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitAbiTagAttrEPNS_10AbiTagAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAbiTagAttr(AbiTagAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAcquireCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 842,
   FQN="clang::RecursiveASTVisitor::TraverseAcquireCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseAcquireCapabilityAttrEPNS_21AcquireCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseAcquireCapabilityAttrEPNS_21AcquireCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAcquireCapabilityAttr(AcquireCapabilityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAcquireCapabilityAttr(A)) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAcquireCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 28,
   FQN="clang::RecursiveASTVisitor::VisitAcquireCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitAcquireCapabilityAttrEPNS_21AcquireCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitAcquireCapabilityAttrEPNS_21AcquireCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAcquireCapabilityAttr(AcquireCapabilityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAcquiredAfterAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 859,
   FQN="clang::RecursiveASTVisitor::TraverseAcquiredAfterAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseAcquiredAfterAttrEPNS_17AcquiredAfterAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseAcquiredAfterAttrEPNS_17AcquiredAfterAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAcquiredAfterAttr(AcquiredAfterAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAcquiredAfterAttr(A)) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAcquiredAfterAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 32,
   FQN="clang::RecursiveASTVisitor::VisitAcquiredAfterAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitAcquiredAfterAttrEPNS_17AcquiredAfterAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitAcquiredAfterAttrEPNS_17AcquiredAfterAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAcquiredAfterAttr(AcquiredAfterAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAcquiredBeforeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 876,
   FQN="clang::RecursiveASTVisitor::TraverseAcquiredBeforeAttr", NM="_ZN5clang19RecursiveASTVisitor26TraverseAcquiredBeforeAttrEPNS_18AcquiredBeforeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseAcquiredBeforeAttrEPNS_18AcquiredBeforeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAcquiredBeforeAttr(AcquiredBeforeAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAcquiredBeforeAttr(A)) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAcquiredBeforeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 36,
   FQN="clang::RecursiveASTVisitor::VisitAcquiredBeforeAttr", NM="_ZN5clang19RecursiveASTVisitor23VisitAcquiredBeforeAttrEPNS_18AcquiredBeforeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitAcquiredBeforeAttrEPNS_18AcquiredBeforeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAcquiredBeforeAttr(AcquiredBeforeAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAliasAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 893,
   FQN="clang::RecursiveASTVisitor::TraverseAliasAttr", NM="_ZN5clang19RecursiveASTVisitor17TraverseAliasAttrEPNS_9AliasAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseAliasAttrEPNS_9AliasAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAliasAttr(AliasAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAliasAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAliasAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 40,
   FQN="clang::RecursiveASTVisitor::VisitAliasAttr", NM="_ZN5clang19RecursiveASTVisitor14VisitAliasAttrEPNS_9AliasAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitAliasAttrEPNS_9AliasAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAliasAttr(AliasAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAlignMac68kAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 902,
   FQN="clang::RecursiveASTVisitor::TraverseAlignMac68kAttr", NM="_ZN5clang19RecursiveASTVisitor23TraverseAlignMac68kAttrEPNS_15AlignMac68kAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseAlignMac68kAttrEPNS_15AlignMac68kAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAlignMac68kAttr(AlignMac68kAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAlignMac68kAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAlignMac68kAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 44,
   FQN="clang::RecursiveASTVisitor::VisitAlignMac68kAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitAlignMac68kAttrEPNS_15AlignMac68kAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitAlignMac68kAttrEPNS_15AlignMac68kAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAlignMac68kAttr(AlignMac68kAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAlignValueAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 911,
   FQN="clang::RecursiveASTVisitor::TraverseAlignValueAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseAlignValueAttrEPNS_14AlignValueAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseAlignValueAttrEPNS_14AlignValueAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAlignValueAttr(AlignValueAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAlignValueAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getAlignment())) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAlignValueAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 48,
   FQN="clang::RecursiveASTVisitor::VisitAlignValueAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitAlignValueAttrEPNS_14AlignValueAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitAlignValueAttrEPNS_14AlignValueAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAlignValueAttr(AlignValueAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAlignedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 922,
   FQN="clang::RecursiveASTVisitor::TraverseAlignedAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseAlignedAttrEPNS_11AlignedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseAlignedAttrEPNS_11AlignedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAlignedAttr(AlignedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAlignedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAlignedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 52,
   FQN="clang::RecursiveASTVisitor::VisitAlignedAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitAlignedAttrEPNS_11AlignedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitAlignedAttrEPNS_11AlignedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAlignedAttr(AlignedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAlwaysInlineAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 931,
   FQN="clang::RecursiveASTVisitor::TraverseAlwaysInlineAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseAlwaysInlineAttrEPNS_16AlwaysInlineAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseAlwaysInlineAttrEPNS_16AlwaysInlineAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAlwaysInlineAttr(AlwaysInlineAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAlwaysInlineAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAlwaysInlineAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 56,
   FQN="clang::RecursiveASTVisitor::VisitAlwaysInlineAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitAlwaysInlineAttrEPNS_16AlwaysInlineAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitAlwaysInlineAttrEPNS_16AlwaysInlineAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAlwaysInlineAttr(AlwaysInlineAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAnalyzerNoReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 940,
   FQN="clang::RecursiveASTVisitor::TraverseAnalyzerNoReturnAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseAnalyzerNoReturnAttrEPNS_20AnalyzerNoReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseAnalyzerNoReturnAttrEPNS_20AnalyzerNoReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAnalyzerNoReturnAttr(AnalyzerNoReturnAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAnalyzerNoReturnAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAnalyzerNoReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 60,
   FQN="clang::RecursiveASTVisitor::VisitAnalyzerNoReturnAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitAnalyzerNoReturnAttrEPNS_20AnalyzerNoReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitAnalyzerNoReturnAttrEPNS_20AnalyzerNoReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAnalyzerNoReturnAttr(AnalyzerNoReturnAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAnnotateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 949,
   FQN="clang::RecursiveASTVisitor::TraverseAnnotateAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseAnnotateAttrEPNS_12AnnotateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseAnnotateAttrEPNS_12AnnotateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAnnotateAttr(AnnotateAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAnnotateAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAnnotateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 64,
   FQN="clang::RecursiveASTVisitor::VisitAnnotateAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitAnnotateAttrEPNS_12AnnotateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitAnnotateAttrEPNS_12AnnotateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAnnotateAttr(AnnotateAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAnyX86InterruptAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 958,
   FQN="clang::RecursiveASTVisitor::TraverseAnyX86InterruptAttr", NM="_ZN5clang19RecursiveASTVisitor27TraverseAnyX86InterruptAttrEPNS_19AnyX86InterruptAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseAnyX86InterruptAttrEPNS_19AnyX86InterruptAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAnyX86InterruptAttr(AnyX86InterruptAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAnyX86InterruptAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAnyX86InterruptAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 68,
   FQN="clang::RecursiveASTVisitor::VisitAnyX86InterruptAttr", NM="_ZN5clang19RecursiveASTVisitor24VisitAnyX86InterruptAttrEPNS_19AnyX86InterruptAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitAnyX86InterruptAttrEPNS_19AnyX86InterruptAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAnyX86InterruptAttr(AnyX86InterruptAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseArcWeakrefUnavailableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 967,
   FQN="clang::RecursiveASTVisitor::TraverseArcWeakrefUnavailableAttr", NM="_ZN5clang19RecursiveASTVisitor33TraverseArcWeakrefUnavailableAttrEPNS_25ArcWeakrefUnavailableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33TraverseArcWeakrefUnavailableAttrEPNS_25ArcWeakrefUnavailableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseArcWeakrefUnavailableAttr(ArcWeakrefUnavailableAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitArcWeakrefUnavailableAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitArcWeakrefUnavailableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 72,
   FQN="clang::RecursiveASTVisitor::VisitArcWeakrefUnavailableAttr", NM="_ZN5clang19RecursiveASTVisitor30VisitArcWeakrefUnavailableAttrEPNS_25ArcWeakrefUnavailableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30VisitArcWeakrefUnavailableAttrEPNS_25ArcWeakrefUnavailableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitArcWeakrefUnavailableAttr(ArcWeakrefUnavailableAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseArgumentWithTypeTagAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 976,
   FQN="clang::RecursiveASTVisitor::TraverseArgumentWithTypeTagAttr", NM="_ZN5clang19RecursiveASTVisitor31TraverseArgumentWithTypeTagAttrEPNS_23ArgumentWithTypeTagAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseArgumentWithTypeTagAttrEPNS_23ArgumentWithTypeTagAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseArgumentWithTypeTagAttr(ArgumentWithTypeTagAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitArgumentWithTypeTagAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitArgumentWithTypeTagAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 76,
   FQN="clang::RecursiveASTVisitor::VisitArgumentWithTypeTagAttr", NM="_ZN5clang19RecursiveASTVisitor28VisitArgumentWithTypeTagAttrEPNS_23ArgumentWithTypeTagAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitArgumentWithTypeTagAttrEPNS_23ArgumentWithTypeTagAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitArgumentWithTypeTagAttr(ArgumentWithTypeTagAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAsmLabelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 985,
   FQN="clang::RecursiveASTVisitor::TraverseAsmLabelAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseAsmLabelAttrEPNS_12AsmLabelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseAsmLabelAttrEPNS_12AsmLabelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAsmLabelAttr(AsmLabelAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAsmLabelAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAsmLabelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 80,
   FQN="clang::RecursiveASTVisitor::VisitAsmLabelAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitAsmLabelAttrEPNS_12AsmLabelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitAsmLabelAttrEPNS_12AsmLabelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAsmLabelAttr(AsmLabelAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAssertCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 994,
   FQN="clang::RecursiveASTVisitor::TraverseAssertCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseAssertCapabilityAttrEPNS_20AssertCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseAssertCapabilityAttrEPNS_20AssertCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAssertCapabilityAttr(AssertCapabilityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAssertCapabilityAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getExpr())) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAssertCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 84,
   FQN="clang::RecursiveASTVisitor::VisitAssertCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitAssertCapabilityAttrEPNS_20AssertCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitAssertCapabilityAttrEPNS_20AssertCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAssertCapabilityAttr(AssertCapabilityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAssertExclusiveLockAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1005,
   FQN="clang::RecursiveASTVisitor::TraverseAssertExclusiveLockAttr", NM="_ZN5clang19RecursiveASTVisitor31TraverseAssertExclusiveLockAttrEPNS_23AssertExclusiveLockAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseAssertExclusiveLockAttrEPNS_23AssertExclusiveLockAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAssertExclusiveLockAttr(AssertExclusiveLockAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAssertExclusiveLockAttr(A)) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAssertExclusiveLockAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 88,
   FQN="clang::RecursiveASTVisitor::VisitAssertExclusiveLockAttr", NM="_ZN5clang19RecursiveASTVisitor28VisitAssertExclusiveLockAttrEPNS_23AssertExclusiveLockAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitAssertExclusiveLockAttrEPNS_23AssertExclusiveLockAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAssertExclusiveLockAttr(AssertExclusiveLockAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAssertSharedLockAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1022,
   FQN="clang::RecursiveASTVisitor::TraverseAssertSharedLockAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseAssertSharedLockAttrEPNS_20AssertSharedLockAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseAssertSharedLockAttrEPNS_20AssertSharedLockAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAssertSharedLockAttr(AssertSharedLockAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAssertSharedLockAttr(A)) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAssertSharedLockAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 92,
   FQN="clang::RecursiveASTVisitor::VisitAssertSharedLockAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitAssertSharedLockAttrEPNS_20AssertSharedLockAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitAssertSharedLockAttrEPNS_20AssertSharedLockAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAssertSharedLockAttr(AssertSharedLockAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAssumeAlignedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1039,
   FQN="clang::RecursiveASTVisitor::TraverseAssumeAlignedAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseAssumeAlignedAttrEPNS_17AssumeAlignedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseAssumeAlignedAttrEPNS_17AssumeAlignedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAssumeAlignedAttr(AssumeAlignedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAssumeAlignedAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getAlignment())) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getOffset())) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAssumeAlignedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 96,
   FQN="clang::RecursiveASTVisitor::VisitAssumeAlignedAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitAssumeAlignedAttrEPNS_17AssumeAlignedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitAssumeAlignedAttrEPNS_17AssumeAlignedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAssumeAlignedAttr(AssumeAlignedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAvailabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1052,
   FQN="clang::RecursiveASTVisitor::TraverseAvailabilityAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseAvailabilityAttrEPNS_16AvailabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseAvailabilityAttrEPNS_16AvailabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAvailabilityAttr(AvailabilityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitAvailabilityAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAvailabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 100,
   FQN="clang::RecursiveASTVisitor::VisitAvailabilityAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitAvailabilityAttrEPNS_16AvailabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitAvailabilityAttrEPNS_16AvailabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAvailabilityAttr(AvailabilityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBlocksAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1061,
   FQN="clang::RecursiveASTVisitor::TraverseBlocksAttr", NM="_ZN5clang19RecursiveASTVisitor18TraverseBlocksAttrEPNS_10BlocksAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseBlocksAttrEPNS_10BlocksAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBlocksAttr(BlocksAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitBlocksAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBlocksAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 104,
   FQN="clang::RecursiveASTVisitor::VisitBlocksAttr", NM="_ZN5clang19RecursiveASTVisitor15VisitBlocksAttrEPNS_10BlocksAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitBlocksAttrEPNS_10BlocksAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBlocksAttr(BlocksAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseC11NoReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1070,
   FQN="clang::RecursiveASTVisitor::TraverseC11NoReturnAttr", NM="_ZN5clang19RecursiveASTVisitor23TraverseC11NoReturnAttrEPNS_15C11NoReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseC11NoReturnAttrEPNS_15C11NoReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseC11NoReturnAttr(C11NoReturnAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitC11NoReturnAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitC11NoReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 108,
   FQN="clang::RecursiveASTVisitor::VisitC11NoReturnAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitC11NoReturnAttrEPNS_15C11NoReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitC11NoReturnAttrEPNS_15C11NoReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitC11NoReturnAttr(C11NoReturnAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCDeclAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1079,
   FQN="clang::RecursiveASTVisitor::TraverseCDeclAttr", NM="_ZN5clang19RecursiveASTVisitor17TraverseCDeclAttrEPNS_9CDeclAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseCDeclAttrEPNS_9CDeclAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCDeclAttr(CDeclAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCDeclAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCDeclAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 112,
   FQN="clang::RecursiveASTVisitor::VisitCDeclAttr", NM="_ZN5clang19RecursiveASTVisitor14VisitCDeclAttrEPNS_9CDeclAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitCDeclAttrEPNS_9CDeclAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCDeclAttr(CDeclAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCFAuditedTransferAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1088,
   FQN="clang::RecursiveASTVisitor::TraverseCFAuditedTransferAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseCFAuditedTransferAttrEPNS_21CFAuditedTransferAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseCFAuditedTransferAttrEPNS_21CFAuditedTransferAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCFAuditedTransferAttr(CFAuditedTransferAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCFAuditedTransferAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCFAuditedTransferAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 116,
   FQN="clang::RecursiveASTVisitor::VisitCFAuditedTransferAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitCFAuditedTransferAttrEPNS_21CFAuditedTransferAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitCFAuditedTransferAttrEPNS_21CFAuditedTransferAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCFAuditedTransferAttr(CFAuditedTransferAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCFConsumedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1097,
   FQN="clang::RecursiveASTVisitor::TraverseCFConsumedAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseCFConsumedAttrEPNS_14CFConsumedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseCFConsumedAttrEPNS_14CFConsumedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCFConsumedAttr(CFConsumedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCFConsumedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCFConsumedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 120,
   FQN="clang::RecursiveASTVisitor::VisitCFConsumedAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitCFConsumedAttrEPNS_14CFConsumedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitCFConsumedAttrEPNS_14CFConsumedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCFConsumedAttr(CFConsumedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCFReturnsNotRetainedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1106,
   FQN="clang::RecursiveASTVisitor::TraverseCFReturnsNotRetainedAttr", NM="_ZN5clang19RecursiveASTVisitor32TraverseCFReturnsNotRetainedAttrEPNS_24CFReturnsNotRetainedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseCFReturnsNotRetainedAttrEPNS_24CFReturnsNotRetainedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCFReturnsNotRetainedAttr(CFReturnsNotRetainedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCFReturnsNotRetainedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCFReturnsNotRetainedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 124,
   FQN="clang::RecursiveASTVisitor::VisitCFReturnsNotRetainedAttr", NM="_ZN5clang19RecursiveASTVisitor29VisitCFReturnsNotRetainedAttrEPNS_24CFReturnsNotRetainedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitCFReturnsNotRetainedAttrEPNS_24CFReturnsNotRetainedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCFReturnsNotRetainedAttr(CFReturnsNotRetainedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCFReturnsRetainedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1115,
   FQN="clang::RecursiveASTVisitor::TraverseCFReturnsRetainedAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseCFReturnsRetainedAttrEPNS_21CFReturnsRetainedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseCFReturnsRetainedAttrEPNS_21CFReturnsRetainedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCFReturnsRetainedAttr(CFReturnsRetainedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCFReturnsRetainedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCFReturnsRetainedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 128,
   FQN="clang::RecursiveASTVisitor::VisitCFReturnsRetainedAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitCFReturnsRetainedAttrEPNS_21CFReturnsRetainedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitCFReturnsRetainedAttrEPNS_21CFReturnsRetainedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCFReturnsRetainedAttr(CFReturnsRetainedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCFUnknownTransferAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1124,
   FQN="clang::RecursiveASTVisitor::TraverseCFUnknownTransferAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseCFUnknownTransferAttrEPNS_21CFUnknownTransferAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseCFUnknownTransferAttrEPNS_21CFUnknownTransferAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCFUnknownTransferAttr(CFUnknownTransferAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCFUnknownTransferAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCFUnknownTransferAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 132,
   FQN="clang::RecursiveASTVisitor::VisitCFUnknownTransferAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitCFUnknownTransferAttrEPNS_21CFUnknownTransferAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitCFUnknownTransferAttrEPNS_21CFUnknownTransferAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCFUnknownTransferAttr(CFUnknownTransferAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCUDAConstantAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1133,
   FQN="clang::RecursiveASTVisitor::TraverseCUDAConstantAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseCUDAConstantAttrEPNS_16CUDAConstantAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseCUDAConstantAttrEPNS_16CUDAConstantAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCUDAConstantAttr(CUDAConstantAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCUDAConstantAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCUDAConstantAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 136,
   FQN="clang::RecursiveASTVisitor::VisitCUDAConstantAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitCUDAConstantAttrEPNS_16CUDAConstantAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitCUDAConstantAttrEPNS_16CUDAConstantAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCUDAConstantAttr(CUDAConstantAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCUDADeviceAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1142,
   FQN="clang::RecursiveASTVisitor::TraverseCUDADeviceAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseCUDADeviceAttrEPNS_14CUDADeviceAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseCUDADeviceAttrEPNS_14CUDADeviceAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCUDADeviceAttr(CUDADeviceAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCUDADeviceAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCUDADeviceAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 140,
   FQN="clang::RecursiveASTVisitor::VisitCUDADeviceAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitCUDADeviceAttrEPNS_14CUDADeviceAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitCUDADeviceAttrEPNS_14CUDADeviceAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCUDADeviceAttr(CUDADeviceAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCUDAGlobalAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1151,
   FQN="clang::RecursiveASTVisitor::TraverseCUDAGlobalAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseCUDAGlobalAttrEPNS_14CUDAGlobalAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseCUDAGlobalAttrEPNS_14CUDAGlobalAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCUDAGlobalAttr(CUDAGlobalAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCUDAGlobalAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCUDAGlobalAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 144,
   FQN="clang::RecursiveASTVisitor::VisitCUDAGlobalAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitCUDAGlobalAttrEPNS_14CUDAGlobalAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitCUDAGlobalAttrEPNS_14CUDAGlobalAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCUDAGlobalAttr(CUDAGlobalAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCUDAHostAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1160,
   FQN="clang::RecursiveASTVisitor::TraverseCUDAHostAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseCUDAHostAttrEPNS_12CUDAHostAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseCUDAHostAttrEPNS_12CUDAHostAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCUDAHostAttr(CUDAHostAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCUDAHostAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCUDAHostAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 148,
   FQN="clang::RecursiveASTVisitor::VisitCUDAHostAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitCUDAHostAttrEPNS_12CUDAHostAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitCUDAHostAttrEPNS_12CUDAHostAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCUDAHostAttr(CUDAHostAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCUDAInvalidTargetAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1169,
   FQN="clang::RecursiveASTVisitor::TraverseCUDAInvalidTargetAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseCUDAInvalidTargetAttrEPNS_21CUDAInvalidTargetAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseCUDAInvalidTargetAttrEPNS_21CUDAInvalidTargetAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCUDAInvalidTargetAttr(CUDAInvalidTargetAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCUDAInvalidTargetAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCUDAInvalidTargetAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 152,
   FQN="clang::RecursiveASTVisitor::VisitCUDAInvalidTargetAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitCUDAInvalidTargetAttrEPNS_21CUDAInvalidTargetAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitCUDAInvalidTargetAttrEPNS_21CUDAInvalidTargetAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCUDAInvalidTargetAttr(CUDAInvalidTargetAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCUDALaunchBoundsAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1178,
   FQN="clang::RecursiveASTVisitor::TraverseCUDALaunchBoundsAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseCUDALaunchBoundsAttrEPNS_20CUDALaunchBoundsAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseCUDALaunchBoundsAttrEPNS_20CUDALaunchBoundsAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCUDALaunchBoundsAttr(CUDALaunchBoundsAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCUDALaunchBoundsAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getMaxThreads())) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getMinBlocks())) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCUDALaunchBoundsAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 156,
   FQN="clang::RecursiveASTVisitor::VisitCUDALaunchBoundsAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitCUDALaunchBoundsAttrEPNS_20CUDALaunchBoundsAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitCUDALaunchBoundsAttrEPNS_20CUDALaunchBoundsAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCUDALaunchBoundsAttr(CUDALaunchBoundsAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCUDASharedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1191,
   FQN="clang::RecursiveASTVisitor::TraverseCUDASharedAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseCUDASharedAttrEPNS_14CUDASharedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseCUDASharedAttrEPNS_14CUDASharedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCUDASharedAttr(CUDASharedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCUDASharedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCUDASharedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 160,
   FQN="clang::RecursiveASTVisitor::VisitCUDASharedAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitCUDASharedAttrEPNS_14CUDASharedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitCUDASharedAttrEPNS_14CUDASharedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCUDASharedAttr(CUDASharedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXX11NoReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1200,
   FQN="clang::RecursiveASTVisitor::TraverseCXX11NoReturnAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseCXX11NoReturnAttrEPNS_17CXX11NoReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseCXX11NoReturnAttrEPNS_17CXX11NoReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXX11NoReturnAttr(CXX11NoReturnAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCXX11NoReturnAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXX11NoReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 164,
   FQN="clang::RecursiveASTVisitor::VisitCXX11NoReturnAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitCXX11NoReturnAttrEPNS_17CXX11NoReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitCXX11NoReturnAttrEPNS_17CXX11NoReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXX11NoReturnAttr(CXX11NoReturnAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCallableWhenAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1209,
   FQN="clang::RecursiveASTVisitor::TraverseCallableWhenAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseCallableWhenAttrEPNS_16CallableWhenAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseCallableWhenAttrEPNS_16CallableWhenAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCallableWhenAttr(CallableWhenAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCallableWhenAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCallableWhenAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 168,
   FQN="clang::RecursiveASTVisitor::VisitCallableWhenAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitCallableWhenAttrEPNS_16CallableWhenAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitCallableWhenAttrEPNS_16CallableWhenAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCallableWhenAttr(CallableWhenAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1218,
   FQN="clang::RecursiveASTVisitor::TraverseCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseCapabilityAttrEPNS_14CapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseCapabilityAttrEPNS_14CapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCapabilityAttr(CapabilityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCapabilityAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 172,
   FQN="clang::RecursiveASTVisitor::VisitCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitCapabilityAttrEPNS_14CapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitCapabilityAttrEPNS_14CapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCapabilityAttr(CapabilityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCapturedRecordAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1227,
   FQN="clang::RecursiveASTVisitor::TraverseCapturedRecordAttr", NM="_ZN5clang19RecursiveASTVisitor26TraverseCapturedRecordAttrEPNS_18CapturedRecordAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseCapturedRecordAttrEPNS_18CapturedRecordAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCapturedRecordAttr(CapturedRecordAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCapturedRecordAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCapturedRecordAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 176,
   FQN="clang::RecursiveASTVisitor::VisitCapturedRecordAttr", NM="_ZN5clang19RecursiveASTVisitor23VisitCapturedRecordAttrEPNS_18CapturedRecordAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitCapturedRecordAttrEPNS_18CapturedRecordAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCapturedRecordAttr(CapturedRecordAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCarriesDependencyAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1236,
   FQN="clang::RecursiveASTVisitor::TraverseCarriesDependencyAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseCarriesDependencyAttrEPNS_21CarriesDependencyAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseCarriesDependencyAttrEPNS_21CarriesDependencyAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCarriesDependencyAttr(CarriesDependencyAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCarriesDependencyAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCarriesDependencyAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 180,
   FQN="clang::RecursiveASTVisitor::VisitCarriesDependencyAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitCarriesDependencyAttrEPNS_21CarriesDependencyAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitCarriesDependencyAttrEPNS_21CarriesDependencyAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCarriesDependencyAttr(CarriesDependencyAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCleanupAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1245,
   FQN="clang::RecursiveASTVisitor::TraverseCleanupAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseCleanupAttrEPNS_11CleanupAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseCleanupAttrEPNS_11CleanupAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCleanupAttr(CleanupAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCleanupAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCleanupAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 184,
   FQN="clang::RecursiveASTVisitor::VisitCleanupAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitCleanupAttrEPNS_11CleanupAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitCleanupAttrEPNS_11CleanupAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCleanupAttr(CleanupAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseColdAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1254,
   FQN="clang::RecursiveASTVisitor::TraverseColdAttr", NM="_ZN5clang19RecursiveASTVisitor16TraverseColdAttrEPNS_8ColdAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseColdAttrEPNS_8ColdAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseColdAttr(ColdAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitColdAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitColdAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 188,
   FQN="clang::RecursiveASTVisitor::VisitColdAttr", NM="_ZN5clang19RecursiveASTVisitor13VisitColdAttrEPNS_8ColdAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitColdAttrEPNS_8ColdAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitColdAttr(ColdAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCommonAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1263,
   FQN="clang::RecursiveASTVisitor::TraverseCommonAttr", NM="_ZN5clang19RecursiveASTVisitor18TraverseCommonAttrEPNS_10CommonAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseCommonAttrEPNS_10CommonAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCommonAttr(CommonAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitCommonAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCommonAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 192,
   FQN="clang::RecursiveASTVisitor::VisitCommonAttr", NM="_ZN5clang19RecursiveASTVisitor15VisitCommonAttrEPNS_10CommonAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitCommonAttrEPNS_10CommonAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCommonAttr(CommonAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConstAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1272,
   FQN="clang::RecursiveASTVisitor::TraverseConstAttr", NM="_ZN5clang19RecursiveASTVisitor17TraverseConstAttrEPNS_9ConstAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseConstAttrEPNS_9ConstAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConstAttr(ConstAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitConstAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConstAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 196,
   FQN="clang::RecursiveASTVisitor::VisitConstAttr", NM="_ZN5clang19RecursiveASTVisitor14VisitConstAttrEPNS_9ConstAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitConstAttrEPNS_9ConstAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConstAttr(ConstAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConstructorAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1281,
   FQN="clang::RecursiveASTVisitor::TraverseConstructorAttr", NM="_ZN5clang19RecursiveASTVisitor23TraverseConstructorAttrEPNS_15ConstructorAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseConstructorAttrEPNS_15ConstructorAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConstructorAttr(ConstructorAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitConstructorAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConstructorAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 200,
   FQN="clang::RecursiveASTVisitor::VisitConstructorAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitConstructorAttrEPNS_15ConstructorAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitConstructorAttrEPNS_15ConstructorAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConstructorAttr(ConstructorAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConsumableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1290,
   FQN="clang::RecursiveASTVisitor::TraverseConsumableAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseConsumableAttrEPNS_14ConsumableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseConsumableAttrEPNS_14ConsumableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConsumableAttr(ConsumableAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitConsumableAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConsumableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 204,
   FQN="clang::RecursiveASTVisitor::VisitConsumableAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitConsumableAttrEPNS_14ConsumableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitConsumableAttrEPNS_14ConsumableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConsumableAttr(ConsumableAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConsumableAutoCastAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1299,
   FQN="clang::RecursiveASTVisitor::TraverseConsumableAutoCastAttr", NM="_ZN5clang19RecursiveASTVisitor30TraverseConsumableAutoCastAttrEPNS_22ConsumableAutoCastAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseConsumableAutoCastAttrEPNS_22ConsumableAutoCastAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConsumableAutoCastAttr(ConsumableAutoCastAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitConsumableAutoCastAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConsumableAutoCastAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 208,
   FQN="clang::RecursiveASTVisitor::VisitConsumableAutoCastAttr", NM="_ZN5clang19RecursiveASTVisitor27VisitConsumableAutoCastAttrEPNS_22ConsumableAutoCastAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitConsumableAutoCastAttrEPNS_22ConsumableAutoCastAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConsumableAutoCastAttr(ConsumableAutoCastAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConsumableSetOnReadAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1308,
   FQN="clang::RecursiveASTVisitor::TraverseConsumableSetOnReadAttr", NM="_ZN5clang19RecursiveASTVisitor31TraverseConsumableSetOnReadAttrEPNS_23ConsumableSetOnReadAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseConsumableSetOnReadAttrEPNS_23ConsumableSetOnReadAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConsumableSetOnReadAttr(ConsumableSetOnReadAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitConsumableSetOnReadAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConsumableSetOnReadAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 212,
   FQN="clang::RecursiveASTVisitor::VisitConsumableSetOnReadAttr", NM="_ZN5clang19RecursiveASTVisitor28VisitConsumableSetOnReadAttrEPNS_23ConsumableSetOnReadAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitConsumableSetOnReadAttrEPNS_23ConsumableSetOnReadAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConsumableSetOnReadAttr(ConsumableSetOnReadAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDLLExportAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1317,
   FQN="clang::RecursiveASTVisitor::TraverseDLLExportAttr", NM="_ZN5clang19RecursiveASTVisitor21TraverseDLLExportAttrEPNS_13DLLExportAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseDLLExportAttrEPNS_13DLLExportAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDLLExportAttr(DLLExportAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitDLLExportAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDLLExportAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 216,
   FQN="clang::RecursiveASTVisitor::VisitDLLExportAttr", NM="_ZN5clang19RecursiveASTVisitor18VisitDLLExportAttrEPNS_13DLLExportAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitDLLExportAttrEPNS_13DLLExportAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDLLExportAttr(DLLExportAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDLLImportAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1326,
   FQN="clang::RecursiveASTVisitor::TraverseDLLImportAttr", NM="_ZN5clang19RecursiveASTVisitor21TraverseDLLImportAttrEPNS_13DLLImportAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseDLLImportAttrEPNS_13DLLImportAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDLLImportAttr(DLLImportAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitDLLImportAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDLLImportAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 220,
   FQN="clang::RecursiveASTVisitor::VisitDLLImportAttr", NM="_ZN5clang19RecursiveASTVisitor18VisitDLLImportAttrEPNS_13DLLImportAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitDLLImportAttrEPNS_13DLLImportAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDLLImportAttr(DLLImportAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDeprecatedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1335,
   FQN="clang::RecursiveASTVisitor::TraverseDeprecatedAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseDeprecatedAttrEPNS_14DeprecatedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseDeprecatedAttrEPNS_14DeprecatedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDeprecatedAttr(DeprecatedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitDeprecatedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDeprecatedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 224,
   FQN="clang::RecursiveASTVisitor::VisitDeprecatedAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitDeprecatedAttrEPNS_14DeprecatedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitDeprecatedAttrEPNS_14DeprecatedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDeprecatedAttr(DeprecatedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDestructorAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1344,
   FQN="clang::RecursiveASTVisitor::TraverseDestructorAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseDestructorAttrEPNS_14DestructorAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseDestructorAttrEPNS_14DestructorAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDestructorAttr(DestructorAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitDestructorAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDestructorAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 228,
   FQN="clang::RecursiveASTVisitor::VisitDestructorAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitDestructorAttrEPNS_14DestructorAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitDestructorAttrEPNS_14DestructorAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDestructorAttr(DestructorAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDisableTailCallsAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1353,
   FQN="clang::RecursiveASTVisitor::TraverseDisableTailCallsAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseDisableTailCallsAttrEPNS_20DisableTailCallsAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseDisableTailCallsAttrEPNS_20DisableTailCallsAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDisableTailCallsAttr(DisableTailCallsAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitDisableTailCallsAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDisableTailCallsAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 232,
   FQN="clang::RecursiveASTVisitor::VisitDisableTailCallsAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitDisableTailCallsAttrEPNS_20DisableTailCallsAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitDisableTailCallsAttrEPNS_20DisableTailCallsAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDisableTailCallsAttr(DisableTailCallsAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseEmptyBasesAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1362,
   FQN="clang::RecursiveASTVisitor::TraverseEmptyBasesAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseEmptyBasesAttrEPNS_14EmptyBasesAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseEmptyBasesAttrEPNS_14EmptyBasesAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseEmptyBasesAttr(EmptyBasesAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitEmptyBasesAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitEmptyBasesAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 236,
   FQN="clang::RecursiveASTVisitor::VisitEmptyBasesAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitEmptyBasesAttrEPNS_14EmptyBasesAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitEmptyBasesAttrEPNS_14EmptyBasesAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitEmptyBasesAttr(EmptyBasesAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseEnableIfAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1371,
   FQN="clang::RecursiveASTVisitor::TraverseEnableIfAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseEnableIfAttrEPNS_12EnableIfAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseEnableIfAttrEPNS_12EnableIfAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseEnableIfAttr(EnableIfAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitEnableIfAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getCond())) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitEnableIfAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 240,
   FQN="clang::RecursiveASTVisitor::VisitEnableIfAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitEnableIfAttrEPNS_12EnableIfAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitEnableIfAttrEPNS_12EnableIfAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitEnableIfAttr(EnableIfAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseExclusiveTrylockFunctionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1382,
   FQN="clang::RecursiveASTVisitor::TraverseExclusiveTrylockFunctionAttr", NM="_ZN5clang19RecursiveASTVisitor36TraverseExclusiveTrylockFunctionAttrEPNS_28ExclusiveTrylockFunctionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36TraverseExclusiveTrylockFunctionAttrEPNS_28ExclusiveTrylockFunctionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseExclusiveTrylockFunctionAttr(ExclusiveTrylockFunctionAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitExclusiveTrylockFunctionAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getSuccessValue())) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitExclusiveTrylockFunctionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 244,
   FQN="clang::RecursiveASTVisitor::VisitExclusiveTrylockFunctionAttr", NM="_ZN5clang19RecursiveASTVisitor33VisitExclusiveTrylockFunctionAttrEPNS_28ExclusiveTrylockFunctionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33VisitExclusiveTrylockFunctionAttrEPNS_28ExclusiveTrylockFunctionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitExclusiveTrylockFunctionAttr(ExclusiveTrylockFunctionAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFallThroughAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1401,
   FQN="clang::RecursiveASTVisitor::TraverseFallThroughAttr", NM="_ZN5clang19RecursiveASTVisitor23TraverseFallThroughAttrEPNS_15FallThroughAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseFallThroughAttrEPNS_15FallThroughAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFallThroughAttr(FallThroughAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitFallThroughAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFallThroughAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 248,
   FQN="clang::RecursiveASTVisitor::VisitFallThroughAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitFallThroughAttrEPNS_15FallThroughAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitFallThroughAttrEPNS_15FallThroughAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFallThroughAttr(FallThroughAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFastCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1410,
   FQN="clang::RecursiveASTVisitor::TraverseFastCallAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseFastCallAttrEPNS_12FastCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseFastCallAttrEPNS_12FastCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFastCallAttr(FastCallAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitFastCallAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFastCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 252,
   FQN="clang::RecursiveASTVisitor::VisitFastCallAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitFastCallAttrEPNS_12FastCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitFastCallAttrEPNS_12FastCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFastCallAttr(FastCallAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFinalAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1419,
   FQN="clang::RecursiveASTVisitor::TraverseFinalAttr", NM="_ZN5clang19RecursiveASTVisitor17TraverseFinalAttrEPNS_9FinalAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseFinalAttrEPNS_9FinalAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFinalAttr(FinalAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitFinalAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFinalAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 256,
   FQN="clang::RecursiveASTVisitor::VisitFinalAttr", NM="_ZN5clang19RecursiveASTVisitor14VisitFinalAttrEPNS_9FinalAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitFinalAttrEPNS_9FinalAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFinalAttr(FinalAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFlagEnumAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1428,
   FQN="clang::RecursiveASTVisitor::TraverseFlagEnumAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseFlagEnumAttrEPNS_12FlagEnumAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseFlagEnumAttrEPNS_12FlagEnumAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFlagEnumAttr(FlagEnumAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitFlagEnumAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFlagEnumAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 260,
   FQN="clang::RecursiveASTVisitor::VisitFlagEnumAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitFlagEnumAttrEPNS_12FlagEnumAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitFlagEnumAttrEPNS_12FlagEnumAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFlagEnumAttr(FlagEnumAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFlattenAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1437,
   FQN="clang::RecursiveASTVisitor::TraverseFlattenAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseFlattenAttrEPNS_11FlattenAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseFlattenAttrEPNS_11FlattenAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFlattenAttr(FlattenAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitFlattenAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFlattenAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 264,
   FQN="clang::RecursiveASTVisitor::VisitFlattenAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitFlattenAttrEPNS_11FlattenAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitFlattenAttrEPNS_11FlattenAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFlattenAttr(FlattenAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFormatAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1446,
   FQN="clang::RecursiveASTVisitor::TraverseFormatAttr", NM="_ZN5clang19RecursiveASTVisitor18TraverseFormatAttrEPNS_10FormatAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseFormatAttrEPNS_10FormatAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFormatAttr(FormatAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitFormatAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFormatAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 268,
   FQN="clang::RecursiveASTVisitor::VisitFormatAttr", NM="_ZN5clang19RecursiveASTVisitor15VisitFormatAttrEPNS_10FormatAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitFormatAttrEPNS_10FormatAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFormatAttr(FormatAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFormatArgAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1455,
   FQN="clang::RecursiveASTVisitor::TraverseFormatArgAttr", NM="_ZN5clang19RecursiveASTVisitor21TraverseFormatArgAttrEPNS_13FormatArgAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseFormatArgAttrEPNS_13FormatArgAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFormatArgAttr(FormatArgAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitFormatArgAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFormatArgAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 272,
   FQN="clang::RecursiveASTVisitor::VisitFormatArgAttr", NM="_ZN5clang19RecursiveASTVisitor18VisitFormatArgAttrEPNS_13FormatArgAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitFormatArgAttrEPNS_13FormatArgAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFormatArgAttr(FormatArgAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseGNUInlineAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1464,
   FQN="clang::RecursiveASTVisitor::TraverseGNUInlineAttr", NM="_ZN5clang19RecursiveASTVisitor21TraverseGNUInlineAttrEPNS_13GNUInlineAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseGNUInlineAttrEPNS_13GNUInlineAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseGNUInlineAttr(GNUInlineAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitGNUInlineAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitGNUInlineAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 276,
   FQN="clang::RecursiveASTVisitor::VisitGNUInlineAttr", NM="_ZN5clang19RecursiveASTVisitor18VisitGNUInlineAttrEPNS_13GNUInlineAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitGNUInlineAttrEPNS_13GNUInlineAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitGNUInlineAttr(GNUInlineAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseGuardedByAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1473,
   FQN="clang::RecursiveASTVisitor::TraverseGuardedByAttr", NM="_ZN5clang19RecursiveASTVisitor21TraverseGuardedByAttrEPNS_13GuardedByAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseGuardedByAttrEPNS_13GuardedByAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseGuardedByAttr(GuardedByAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitGuardedByAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getArg())) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitGuardedByAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 280,
   FQN="clang::RecursiveASTVisitor::VisitGuardedByAttr", NM="_ZN5clang19RecursiveASTVisitor18VisitGuardedByAttrEPNS_13GuardedByAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitGuardedByAttrEPNS_13GuardedByAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitGuardedByAttr(GuardedByAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseGuardedVarAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1484,
   FQN="clang::RecursiveASTVisitor::TraverseGuardedVarAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseGuardedVarAttrEPNS_14GuardedVarAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseGuardedVarAttrEPNS_14GuardedVarAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseGuardedVarAttr(GuardedVarAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitGuardedVarAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitGuardedVarAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 284,
   FQN="clang::RecursiveASTVisitor::VisitGuardedVarAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitGuardedVarAttrEPNS_14GuardedVarAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitGuardedVarAttrEPNS_14GuardedVarAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitGuardedVarAttr(GuardedVarAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseHotAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1493,
   FQN="clang::RecursiveASTVisitor::TraverseHotAttr", NM="_ZN5clang19RecursiveASTVisitor15TraverseHotAttrEPNS_7HotAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15TraverseHotAttrEPNS_7HotAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseHotAttr(HotAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitHotAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitHotAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 288,
   FQN="clang::RecursiveASTVisitor::VisitHotAttr", NM="_ZN5clang19RecursiveASTVisitor12VisitHotAttrEPNS_7HotAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12VisitHotAttrEPNS_7HotAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitHotAttr(HotAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIBActionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1502,
   FQN="clang::RecursiveASTVisitor::TraverseIBActionAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseIBActionAttrEPNS_12IBActionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseIBActionAttrEPNS_12IBActionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIBActionAttr(IBActionAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitIBActionAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIBActionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 292,
   FQN="clang::RecursiveASTVisitor::VisitIBActionAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitIBActionAttrEPNS_12IBActionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitIBActionAttrEPNS_12IBActionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIBActionAttr(IBActionAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIBOutletAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1511,
   FQN="clang::RecursiveASTVisitor::TraverseIBOutletAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseIBOutletAttrEPNS_12IBOutletAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseIBOutletAttrEPNS_12IBOutletAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIBOutletAttr(IBOutletAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitIBOutletAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIBOutletAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 296,
   FQN="clang::RecursiveASTVisitor::VisitIBOutletAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitIBOutletAttrEPNS_12IBOutletAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitIBOutletAttrEPNS_12IBOutletAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIBOutletAttr(IBOutletAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIBOutletCollectionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1520,
   FQN="clang::RecursiveASTVisitor::TraverseIBOutletCollectionAttr", NM="_ZN5clang19RecursiveASTVisitor30TraverseIBOutletCollectionAttrEPNS_22IBOutletCollectionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseIBOutletCollectionAttrEPNS_22IBOutletCollectionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIBOutletCollectionAttr(IBOutletCollectionAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitIBOutletCollectionAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIBOutletCollectionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 300,
   FQN="clang::RecursiveASTVisitor::VisitIBOutletCollectionAttr", NM="_ZN5clang19RecursiveASTVisitor27VisitIBOutletCollectionAttrEPNS_22IBOutletCollectionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitIBOutletCollectionAttrEPNS_22IBOutletCollectionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIBOutletCollectionAttr(IBOutletCollectionAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIFuncAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1529,
   FQN="clang::RecursiveASTVisitor::TraverseIFuncAttr", NM="_ZN5clang19RecursiveASTVisitor17TraverseIFuncAttrEPNS_9IFuncAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseIFuncAttrEPNS_9IFuncAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIFuncAttr(IFuncAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitIFuncAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIFuncAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 304,
   FQN="clang::RecursiveASTVisitor::VisitIFuncAttr", NM="_ZN5clang19RecursiveASTVisitor14VisitIFuncAttrEPNS_9IFuncAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitIFuncAttrEPNS_9IFuncAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIFuncAttr(IFuncAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseInitPriorityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1538,
   FQN="clang::RecursiveASTVisitor::TraverseInitPriorityAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseInitPriorityAttrEPNS_16InitPriorityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseInitPriorityAttrEPNS_16InitPriorityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseInitPriorityAttr(InitPriorityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitInitPriorityAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitInitPriorityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 308,
   FQN="clang::RecursiveASTVisitor::VisitInitPriorityAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitInitPriorityAttrEPNS_16InitPriorityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitInitPriorityAttrEPNS_16InitPriorityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitInitPriorityAttr(InitPriorityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseInitSegAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1547,
   FQN="clang::RecursiveASTVisitor::TraverseInitSegAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseInitSegAttrEPNS_11InitSegAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseInitSegAttrEPNS_11InitSegAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseInitSegAttr(InitSegAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitInitSegAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitInitSegAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 312,
   FQN="clang::RecursiveASTVisitor::VisitInitSegAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitInitSegAttrEPNS_11InitSegAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitInitSegAttrEPNS_11InitSegAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitInitSegAttr(InitSegAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIntelOclBiccAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1556,
   FQN="clang::RecursiveASTVisitor::TraverseIntelOclBiccAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseIntelOclBiccAttrEPNS_16IntelOclBiccAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseIntelOclBiccAttrEPNS_16IntelOclBiccAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIntelOclBiccAttr(IntelOclBiccAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitIntelOclBiccAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIntelOclBiccAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 316,
   FQN="clang::RecursiveASTVisitor::VisitIntelOclBiccAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitIntelOclBiccAttrEPNS_16IntelOclBiccAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitIntelOclBiccAttrEPNS_16IntelOclBiccAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIntelOclBiccAttr(IntelOclBiccAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseInternalLinkageAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1565,
   FQN="clang::RecursiveASTVisitor::TraverseInternalLinkageAttr", NM="_ZN5clang19RecursiveASTVisitor27TraverseInternalLinkageAttrEPNS_19InternalLinkageAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseInternalLinkageAttrEPNS_19InternalLinkageAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseInternalLinkageAttr(InternalLinkageAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitInternalLinkageAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitInternalLinkageAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 320,
   FQN="clang::RecursiveASTVisitor::VisitInternalLinkageAttr", NM="_ZN5clang19RecursiveASTVisitor24VisitInternalLinkageAttrEPNS_19InternalLinkageAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitInternalLinkageAttrEPNS_19InternalLinkageAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitInternalLinkageAttr(InternalLinkageAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLTOVisibilityPublicAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1574,
   FQN="clang::RecursiveASTVisitor::TraverseLTOVisibilityPublicAttr", NM="_ZN5clang19RecursiveASTVisitor31TraverseLTOVisibilityPublicAttrEPNS_23LTOVisibilityPublicAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseLTOVisibilityPublicAttrEPNS_23LTOVisibilityPublicAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLTOVisibilityPublicAttr(LTOVisibilityPublicAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitLTOVisibilityPublicAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLTOVisibilityPublicAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 324,
   FQN="clang::RecursiveASTVisitor::VisitLTOVisibilityPublicAttr", NM="_ZN5clang19RecursiveASTVisitor28VisitLTOVisibilityPublicAttrEPNS_23LTOVisibilityPublicAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitLTOVisibilityPublicAttrEPNS_23LTOVisibilityPublicAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLTOVisibilityPublicAttr(LTOVisibilityPublicAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLayoutVersionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1583,
   FQN="clang::RecursiveASTVisitor::TraverseLayoutVersionAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseLayoutVersionAttrEPNS_17LayoutVersionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseLayoutVersionAttrEPNS_17LayoutVersionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLayoutVersionAttr(LayoutVersionAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitLayoutVersionAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLayoutVersionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 328,
   FQN="clang::RecursiveASTVisitor::VisitLayoutVersionAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitLayoutVersionAttrEPNS_17LayoutVersionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitLayoutVersionAttrEPNS_17LayoutVersionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLayoutVersionAttr(LayoutVersionAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLockReturnedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1592,
   FQN="clang::RecursiveASTVisitor::TraverseLockReturnedAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseLockReturnedAttrEPNS_16LockReturnedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseLockReturnedAttrEPNS_16LockReturnedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLockReturnedAttr(LockReturnedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitLockReturnedAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getArg())) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLockReturnedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 332,
   FQN="clang::RecursiveASTVisitor::VisitLockReturnedAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitLockReturnedAttrEPNS_16LockReturnedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitLockReturnedAttrEPNS_16LockReturnedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLockReturnedAttr(LockReturnedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLocksExcludedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1603,
   FQN="clang::RecursiveASTVisitor::TraverseLocksExcludedAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseLocksExcludedAttrEPNS_17LocksExcludedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseLocksExcludedAttrEPNS_17LocksExcludedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLocksExcludedAttr(LocksExcludedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitLocksExcludedAttr(A)) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLocksExcludedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 336,
   FQN="clang::RecursiveASTVisitor::VisitLocksExcludedAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitLocksExcludedAttrEPNS_17LocksExcludedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitLocksExcludedAttrEPNS_17LocksExcludedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLocksExcludedAttr(LocksExcludedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLoopHintAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1620,
   FQN="clang::RecursiveASTVisitor::TraverseLoopHintAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseLoopHintAttrEPNS_12LoopHintAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseLoopHintAttrEPNS_12LoopHintAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLoopHintAttr(LoopHintAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitLoopHintAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getValue())) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLoopHintAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 340,
   FQN="clang::RecursiveASTVisitor::VisitLoopHintAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitLoopHintAttrEPNS_12LoopHintAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitLoopHintAttrEPNS_12LoopHintAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLoopHintAttr(LoopHintAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSABIAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1631,
   FQN="clang::RecursiveASTVisitor::TraverseMSABIAttr", NM="_ZN5clang19RecursiveASTVisitor17TraverseMSABIAttrEPNS_9MSABIAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseMSABIAttrEPNS_9MSABIAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSABIAttr(MSABIAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMSABIAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSABIAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 344,
   FQN="clang::RecursiveASTVisitor::VisitMSABIAttr", NM="_ZN5clang19RecursiveASTVisitor14VisitMSABIAttrEPNS_9MSABIAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitMSABIAttrEPNS_9MSABIAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSABIAttr(MSABIAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSInheritanceAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1640,
   FQN="clang::RecursiveASTVisitor::TraverseMSInheritanceAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseMSInheritanceAttrEPNS_17MSInheritanceAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseMSInheritanceAttrEPNS_17MSInheritanceAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSInheritanceAttr(MSInheritanceAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMSInheritanceAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSInheritanceAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 348,
   FQN="clang::RecursiveASTVisitor::VisitMSInheritanceAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitMSInheritanceAttrEPNS_17MSInheritanceAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitMSInheritanceAttrEPNS_17MSInheritanceAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSInheritanceAttr(MSInheritanceAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSNoVTableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1649,
   FQN="clang::RecursiveASTVisitor::TraverseMSNoVTableAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseMSNoVTableAttrEPNS_14MSNoVTableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseMSNoVTableAttrEPNS_14MSNoVTableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSNoVTableAttr(MSNoVTableAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMSNoVTableAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSNoVTableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 352,
   FQN="clang::RecursiveASTVisitor::VisitMSNoVTableAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitMSNoVTableAttrEPNS_14MSNoVTableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitMSNoVTableAttrEPNS_14MSNoVTableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSNoVTableAttr(MSNoVTableAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSP430InterruptAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1658,
   FQN="clang::RecursiveASTVisitor::TraverseMSP430InterruptAttr", NM="_ZN5clang19RecursiveASTVisitor27TraverseMSP430InterruptAttrEPNS_19MSP430InterruptAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseMSP430InterruptAttrEPNS_19MSP430InterruptAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSP430InterruptAttr(MSP430InterruptAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMSP430InterruptAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSP430InterruptAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 356,
   FQN="clang::RecursiveASTVisitor::VisitMSP430InterruptAttr", NM="_ZN5clang19RecursiveASTVisitor24VisitMSP430InterruptAttrEPNS_19MSP430InterruptAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitMSP430InterruptAttrEPNS_19MSP430InterruptAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSP430InterruptAttr(MSP430InterruptAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSStructAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1667,
   FQN="clang::RecursiveASTVisitor::TraverseMSStructAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseMSStructAttrEPNS_12MSStructAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseMSStructAttrEPNS_12MSStructAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSStructAttr(MSStructAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMSStructAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSStructAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 360,
   FQN="clang::RecursiveASTVisitor::VisitMSStructAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitMSStructAttrEPNS_12MSStructAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitMSStructAttrEPNS_12MSStructAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSStructAttr(MSStructAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSVtorDispAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1676,
   FQN="clang::RecursiveASTVisitor::TraverseMSVtorDispAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseMSVtorDispAttrEPNS_14MSVtorDispAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseMSVtorDispAttrEPNS_14MSVtorDispAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSVtorDispAttr(MSVtorDispAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMSVtorDispAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSVtorDispAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 364,
   FQN="clang::RecursiveASTVisitor::VisitMSVtorDispAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitMSVtorDispAttrEPNS_14MSVtorDispAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitMSVtorDispAttrEPNS_14MSVtorDispAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSVtorDispAttr(MSVtorDispAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMaxFieldAlignmentAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1685,
   FQN="clang::RecursiveASTVisitor::TraverseMaxFieldAlignmentAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseMaxFieldAlignmentAttrEPNS_21MaxFieldAlignmentAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseMaxFieldAlignmentAttrEPNS_21MaxFieldAlignmentAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMaxFieldAlignmentAttr(MaxFieldAlignmentAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMaxFieldAlignmentAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMaxFieldAlignmentAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 368,
   FQN="clang::RecursiveASTVisitor::VisitMaxFieldAlignmentAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitMaxFieldAlignmentAttrEPNS_21MaxFieldAlignmentAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitMaxFieldAlignmentAttrEPNS_21MaxFieldAlignmentAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMaxFieldAlignmentAttr(MaxFieldAlignmentAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMayAliasAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1694,
   FQN="clang::RecursiveASTVisitor::TraverseMayAliasAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseMayAliasAttrEPNS_12MayAliasAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseMayAliasAttrEPNS_12MayAliasAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMayAliasAttr(MayAliasAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMayAliasAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMayAliasAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 372,
   FQN="clang::RecursiveASTVisitor::VisitMayAliasAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitMayAliasAttrEPNS_12MayAliasAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitMayAliasAttrEPNS_12MayAliasAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMayAliasAttr(MayAliasAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMinSizeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1703,
   FQN="clang::RecursiveASTVisitor::TraverseMinSizeAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseMinSizeAttrEPNS_11MinSizeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseMinSizeAttrEPNS_11MinSizeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMinSizeAttr(MinSizeAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMinSizeAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMinSizeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 376,
   FQN="clang::RecursiveASTVisitor::VisitMinSizeAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitMinSizeAttrEPNS_11MinSizeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitMinSizeAttrEPNS_11MinSizeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMinSizeAttr(MinSizeAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMips16Attr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1712,
   FQN="clang::RecursiveASTVisitor::TraverseMips16Attr", NM="_ZN5clang19RecursiveASTVisitor18TraverseMips16AttrEPNS_10Mips16AttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseMips16AttrEPNS_10Mips16AttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMips16Attr(Mips16Attr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMips16Attr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMips16Attr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 380,
   FQN="clang::RecursiveASTVisitor::VisitMips16Attr", NM="_ZN5clang19RecursiveASTVisitor15VisitMips16AttrEPNS_10Mips16AttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitMips16AttrEPNS_10Mips16AttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMips16Attr(Mips16Attr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMipsInterruptAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1721,
   FQN="clang::RecursiveASTVisitor::TraverseMipsInterruptAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseMipsInterruptAttrEPNS_17MipsInterruptAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseMipsInterruptAttrEPNS_17MipsInterruptAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMipsInterruptAttr(MipsInterruptAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitMipsInterruptAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMipsInterruptAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 384,
   FQN="clang::RecursiveASTVisitor::VisitMipsInterruptAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitMipsInterruptAttrEPNS_17MipsInterruptAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitMipsInterruptAttrEPNS_17MipsInterruptAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMipsInterruptAttr(MipsInterruptAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseModeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1730,
   FQN="clang::RecursiveASTVisitor::TraverseModeAttr", NM="_ZN5clang19RecursiveASTVisitor16TraverseModeAttrEPNS_8ModeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseModeAttrEPNS_8ModeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseModeAttr(ModeAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitModeAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitModeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 388,
   FQN="clang::RecursiveASTVisitor::VisitModeAttr", NM="_ZN5clang19RecursiveASTVisitor13VisitModeAttrEPNS_8ModeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitModeAttrEPNS_8ModeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitModeAttr(ModeAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNSConsumedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1739,
   FQN="clang::RecursiveASTVisitor::TraverseNSConsumedAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseNSConsumedAttrEPNS_14NSConsumedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseNSConsumedAttrEPNS_14NSConsumedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNSConsumedAttr(NSConsumedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNSConsumedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNSConsumedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 392,
   FQN="clang::RecursiveASTVisitor::VisitNSConsumedAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitNSConsumedAttrEPNS_14NSConsumedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitNSConsumedAttrEPNS_14NSConsumedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNSConsumedAttr(NSConsumedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNSConsumesSelfAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1748,
   FQN="clang::RecursiveASTVisitor::TraverseNSConsumesSelfAttr", NM="_ZN5clang19RecursiveASTVisitor26TraverseNSConsumesSelfAttrEPNS_18NSConsumesSelfAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseNSConsumesSelfAttrEPNS_18NSConsumesSelfAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNSConsumesSelfAttr(NSConsumesSelfAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNSConsumesSelfAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNSConsumesSelfAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 396,
   FQN="clang::RecursiveASTVisitor::VisitNSConsumesSelfAttr", NM="_ZN5clang19RecursiveASTVisitor23VisitNSConsumesSelfAttrEPNS_18NSConsumesSelfAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitNSConsumesSelfAttrEPNS_18NSConsumesSelfAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNSConsumesSelfAttr(NSConsumesSelfAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNSReturnsAutoreleasedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1757,
   FQN="clang::RecursiveASTVisitor::TraverseNSReturnsAutoreleasedAttr", NM="_ZN5clang19RecursiveASTVisitor33TraverseNSReturnsAutoreleasedAttrEPNS_25NSReturnsAutoreleasedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33TraverseNSReturnsAutoreleasedAttrEPNS_25NSReturnsAutoreleasedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNSReturnsAutoreleasedAttr(NSReturnsAutoreleasedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNSReturnsAutoreleasedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNSReturnsAutoreleasedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 400,
   FQN="clang::RecursiveASTVisitor::VisitNSReturnsAutoreleasedAttr", NM="_ZN5clang19RecursiveASTVisitor30VisitNSReturnsAutoreleasedAttrEPNS_25NSReturnsAutoreleasedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30VisitNSReturnsAutoreleasedAttrEPNS_25NSReturnsAutoreleasedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNSReturnsAutoreleasedAttr(NSReturnsAutoreleasedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNSReturnsNotRetainedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1766,
   FQN="clang::RecursiveASTVisitor::TraverseNSReturnsNotRetainedAttr", NM="_ZN5clang19RecursiveASTVisitor32TraverseNSReturnsNotRetainedAttrEPNS_24NSReturnsNotRetainedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseNSReturnsNotRetainedAttrEPNS_24NSReturnsNotRetainedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNSReturnsNotRetainedAttr(NSReturnsNotRetainedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNSReturnsNotRetainedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNSReturnsNotRetainedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 404,
   FQN="clang::RecursiveASTVisitor::VisitNSReturnsNotRetainedAttr", NM="_ZN5clang19RecursiveASTVisitor29VisitNSReturnsNotRetainedAttrEPNS_24NSReturnsNotRetainedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitNSReturnsNotRetainedAttrEPNS_24NSReturnsNotRetainedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNSReturnsNotRetainedAttr(NSReturnsNotRetainedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNSReturnsRetainedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1775,
   FQN="clang::RecursiveASTVisitor::TraverseNSReturnsRetainedAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseNSReturnsRetainedAttrEPNS_21NSReturnsRetainedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseNSReturnsRetainedAttrEPNS_21NSReturnsRetainedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNSReturnsRetainedAttr(NSReturnsRetainedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNSReturnsRetainedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNSReturnsRetainedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 408,
   FQN="clang::RecursiveASTVisitor::VisitNSReturnsRetainedAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitNSReturnsRetainedAttrEPNS_21NSReturnsRetainedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitNSReturnsRetainedAttrEPNS_21NSReturnsRetainedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNSReturnsRetainedAttr(NSReturnsRetainedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNakedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1784,
   FQN="clang::RecursiveASTVisitor::TraverseNakedAttr", NM="_ZN5clang19RecursiveASTVisitor17TraverseNakedAttrEPNS_9NakedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseNakedAttrEPNS_9NakedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNakedAttr(NakedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNakedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNakedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 412,
   FQN="clang::RecursiveASTVisitor::VisitNakedAttr", NM="_ZN5clang19RecursiveASTVisitor14VisitNakedAttrEPNS_9NakedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitNakedAttrEPNS_9NakedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNakedAttr(NakedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoAliasAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1793,
   FQN="clang::RecursiveASTVisitor::TraverseNoAliasAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseNoAliasAttrEPNS_11NoAliasAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseNoAliasAttrEPNS_11NoAliasAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoAliasAttr(NoAliasAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoAliasAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoAliasAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 416,
   FQN="clang::RecursiveASTVisitor::VisitNoAliasAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitNoAliasAttrEPNS_11NoAliasAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitNoAliasAttrEPNS_11NoAliasAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoAliasAttr(NoAliasAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoCommonAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1802,
   FQN="clang::RecursiveASTVisitor::TraverseNoCommonAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseNoCommonAttrEPNS_12NoCommonAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseNoCommonAttrEPNS_12NoCommonAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoCommonAttr(NoCommonAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoCommonAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoCommonAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 420,
   FQN="clang::RecursiveASTVisitor::VisitNoCommonAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitNoCommonAttrEPNS_12NoCommonAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitNoCommonAttrEPNS_12NoCommonAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoCommonAttr(NoCommonAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoDebugAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1811,
   FQN="clang::RecursiveASTVisitor::TraverseNoDebugAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseNoDebugAttrEPNS_11NoDebugAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseNoDebugAttrEPNS_11NoDebugAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoDebugAttr(NoDebugAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoDebugAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoDebugAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 424,
   FQN="clang::RecursiveASTVisitor::VisitNoDebugAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitNoDebugAttrEPNS_11NoDebugAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitNoDebugAttrEPNS_11NoDebugAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoDebugAttr(NoDebugAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoDuplicateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1820,
   FQN="clang::RecursiveASTVisitor::TraverseNoDuplicateAttr", NM="_ZN5clang19RecursiveASTVisitor23TraverseNoDuplicateAttrEPNS_15NoDuplicateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseNoDuplicateAttrEPNS_15NoDuplicateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoDuplicateAttr(NoDuplicateAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoDuplicateAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoDuplicateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 428,
   FQN="clang::RecursiveASTVisitor::VisitNoDuplicateAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitNoDuplicateAttrEPNS_15NoDuplicateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitNoDuplicateAttrEPNS_15NoDuplicateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoDuplicateAttr(NoDuplicateAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoInlineAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1829,
   FQN="clang::RecursiveASTVisitor::TraverseNoInlineAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseNoInlineAttrEPNS_12NoInlineAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseNoInlineAttrEPNS_12NoInlineAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoInlineAttr(NoInlineAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoInlineAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoInlineAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 432,
   FQN="clang::RecursiveASTVisitor::VisitNoInlineAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitNoInlineAttrEPNS_12NoInlineAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitNoInlineAttrEPNS_12NoInlineAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoInlineAttr(NoInlineAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoInstrumentFunctionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1838,
   FQN="clang::RecursiveASTVisitor::TraverseNoInstrumentFunctionAttr", NM="_ZN5clang19RecursiveASTVisitor32TraverseNoInstrumentFunctionAttrEPNS_24NoInstrumentFunctionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseNoInstrumentFunctionAttrEPNS_24NoInstrumentFunctionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoInstrumentFunctionAttr(NoInstrumentFunctionAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoInstrumentFunctionAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoInstrumentFunctionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 436,
   FQN="clang::RecursiveASTVisitor::VisitNoInstrumentFunctionAttr", NM="_ZN5clang19RecursiveASTVisitor29VisitNoInstrumentFunctionAttrEPNS_24NoInstrumentFunctionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitNoInstrumentFunctionAttrEPNS_24NoInstrumentFunctionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoInstrumentFunctionAttr(NoInstrumentFunctionAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoMips16Attr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1847,
   FQN="clang::RecursiveASTVisitor::TraverseNoMips16Attr", NM="_ZN5clang19RecursiveASTVisitor20TraverseNoMips16AttrEPNS_12NoMips16AttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseNoMips16AttrEPNS_12NoMips16AttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoMips16Attr(NoMips16Attr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoMips16Attr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoMips16Attr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 440,
   FQN="clang::RecursiveASTVisitor::VisitNoMips16Attr", NM="_ZN5clang19RecursiveASTVisitor17VisitNoMips16AttrEPNS_12NoMips16AttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitNoMips16AttrEPNS_12NoMips16AttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoMips16Attr(NoMips16Attr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1856,
   FQN="clang::RecursiveASTVisitor::TraverseNoReturnAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseNoReturnAttrEPNS_12NoReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseNoReturnAttrEPNS_12NoReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoReturnAttr(NoReturnAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoReturnAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 444,
   FQN="clang::RecursiveASTVisitor::VisitNoReturnAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitNoReturnAttrEPNS_12NoReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitNoReturnAttrEPNS_12NoReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoReturnAttr(NoReturnAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoSanitizeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1865,
   FQN="clang::RecursiveASTVisitor::TraverseNoSanitizeAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseNoSanitizeAttrEPNS_14NoSanitizeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseNoSanitizeAttrEPNS_14NoSanitizeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoSanitizeAttr(NoSanitizeAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoSanitizeAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoSanitizeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 448,
   FQN="clang::RecursiveASTVisitor::VisitNoSanitizeAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitNoSanitizeAttrEPNS_14NoSanitizeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitNoSanitizeAttrEPNS_14NoSanitizeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoSanitizeAttr(NoSanitizeAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoSplitStackAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1874,
   FQN="clang::RecursiveASTVisitor::TraverseNoSplitStackAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseNoSplitStackAttrEPNS_16NoSplitStackAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseNoSplitStackAttrEPNS_16NoSplitStackAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoSplitStackAttr(NoSplitStackAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoSplitStackAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoSplitStackAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 452,
   FQN="clang::RecursiveASTVisitor::VisitNoSplitStackAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitNoSplitStackAttrEPNS_16NoSplitStackAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitNoSplitStackAttrEPNS_16NoSplitStackAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoSplitStackAttr(NoSplitStackAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoThreadSafetyAnalysisAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1883,
   FQN="clang::RecursiveASTVisitor::TraverseNoThreadSafetyAnalysisAttr", NM="_ZN5clang19RecursiveASTVisitor34TraverseNoThreadSafetyAnalysisAttrEPNS_26NoThreadSafetyAnalysisAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34TraverseNoThreadSafetyAnalysisAttrEPNS_26NoThreadSafetyAnalysisAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoThreadSafetyAnalysisAttr(NoThreadSafetyAnalysisAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoThreadSafetyAnalysisAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoThreadSafetyAnalysisAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 456,
   FQN="clang::RecursiveASTVisitor::VisitNoThreadSafetyAnalysisAttr", NM="_ZN5clang19RecursiveASTVisitor31VisitNoThreadSafetyAnalysisAttrEPNS_26NoThreadSafetyAnalysisAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31VisitNoThreadSafetyAnalysisAttrEPNS_26NoThreadSafetyAnalysisAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoThreadSafetyAnalysisAttr(NoThreadSafetyAnalysisAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoThrowAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1892,
   FQN="clang::RecursiveASTVisitor::TraverseNoThrowAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseNoThrowAttrEPNS_11NoThrowAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseNoThrowAttrEPNS_11NoThrowAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoThrowAttr(NoThrowAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNoThrowAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoThrowAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 460,
   FQN="clang::RecursiveASTVisitor::VisitNoThrowAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitNoThrowAttrEPNS_11NoThrowAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitNoThrowAttrEPNS_11NoThrowAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoThrowAttr(NoThrowAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNonNullAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1901,
   FQN="clang::RecursiveASTVisitor::TraverseNonNullAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseNonNullAttrEPNS_11NonNullAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseNonNullAttrEPNS_11NonNullAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNonNullAttr(NonNullAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNonNullAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNonNullAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 464,
   FQN="clang::RecursiveASTVisitor::VisitNonNullAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitNonNullAttrEPNS_11NonNullAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitNonNullAttrEPNS_11NonNullAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNonNullAttr(NonNullAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNotTailCalledAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1910,
   FQN="clang::RecursiveASTVisitor::TraverseNotTailCalledAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseNotTailCalledAttrEPNS_17NotTailCalledAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseNotTailCalledAttrEPNS_17NotTailCalledAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNotTailCalledAttr(NotTailCalledAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitNotTailCalledAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNotTailCalledAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 468,
   FQN="clang::RecursiveASTVisitor::VisitNotTailCalledAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitNotTailCalledAttrEPNS_17NotTailCalledAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitNotTailCalledAttrEPNS_17NotTailCalledAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNotTailCalledAttr(NotTailCalledAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPCaptureNoInitAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1919,
   FQN="clang::RecursiveASTVisitor::TraverseOMPCaptureNoInitAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseOMPCaptureNoInitAttrEPNS_20OMPCaptureNoInitAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseOMPCaptureNoInitAttrEPNS_20OMPCaptureNoInitAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPCaptureNoInitAttr(OMPCaptureNoInitAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOMPCaptureNoInitAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPCaptureNoInitAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 472,
   FQN="clang::RecursiveASTVisitor::VisitOMPCaptureNoInitAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPCaptureNoInitAttrEPNS_20OMPCaptureNoInitAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPCaptureNoInitAttrEPNS_20OMPCaptureNoInitAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPCaptureNoInitAttr(OMPCaptureNoInitAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPDeclareSimdDeclAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1928,
   FQN="clang::RecursiveASTVisitor::TraverseOMPDeclareSimdDeclAttr", NM="_ZN5clang19RecursiveASTVisitor30TraverseOMPDeclareSimdDeclAttrEPNS_22OMPDeclareSimdDeclAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseOMPDeclareSimdDeclAttrEPNS_22OMPDeclareSimdDeclAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPDeclareSimdDeclAttr(OMPDeclareSimdDeclAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOMPDeclareSimdDeclAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getSimdlen())) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.uniforms_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.uniforms_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.aligneds_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.aligneds_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.alignments_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.alignments_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.linears_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.linears_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.steps_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.steps_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDeclareSimdDeclAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 476,
   FQN="clang::RecursiveASTVisitor::VisitOMPDeclareSimdDeclAttr", NM="_ZN5clang19RecursiveASTVisitor27VisitOMPDeclareSimdDeclAttrEPNS_22OMPDeclareSimdDeclAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitOMPDeclareSimdDeclAttrEPNS_22OMPDeclareSimdDeclAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPDeclareSimdDeclAttr(OMPDeclareSimdDeclAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPDeclareTargetDeclAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1979,
   FQN="clang::RecursiveASTVisitor::TraverseOMPDeclareTargetDeclAttr", NM="_ZN5clang19RecursiveASTVisitor32TraverseOMPDeclareTargetDeclAttrEPNS_24OMPDeclareTargetDeclAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseOMPDeclareTargetDeclAttrEPNS_24OMPDeclareTargetDeclAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPDeclareTargetDeclAttr(OMPDeclareTargetDeclAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOMPDeclareTargetDeclAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDeclareTargetDeclAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 480,
   FQN="clang::RecursiveASTVisitor::VisitOMPDeclareTargetDeclAttr", NM="_ZN5clang19RecursiveASTVisitor29VisitOMPDeclareTargetDeclAttrEPNS_24OMPDeclareTargetDeclAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitOMPDeclareTargetDeclAttrEPNS_24OMPDeclareTargetDeclAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPDeclareTargetDeclAttr(OMPDeclareTargetDeclAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPThreadPrivateDeclAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1988,
   FQN="clang::RecursiveASTVisitor::TraverseOMPThreadPrivateDeclAttr", NM="_ZN5clang19RecursiveASTVisitor32TraverseOMPThreadPrivateDeclAttrEPNS_24OMPThreadPrivateDeclAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseOMPThreadPrivateDeclAttrEPNS_24OMPThreadPrivateDeclAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPThreadPrivateDeclAttr(OMPThreadPrivateDeclAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOMPThreadPrivateDeclAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPThreadPrivateDeclAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 484,
   FQN="clang::RecursiveASTVisitor::VisitOMPThreadPrivateDeclAttr", NM="_ZN5clang19RecursiveASTVisitor29VisitOMPThreadPrivateDeclAttrEPNS_24OMPThreadPrivateDeclAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitOMPThreadPrivateDeclAttrEPNS_24OMPThreadPrivateDeclAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPThreadPrivateDeclAttr(OMPThreadPrivateDeclAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCBoxableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 1997,
   FQN="clang::RecursiveASTVisitor::TraverseObjCBoxableAttr", NM="_ZN5clang19RecursiveASTVisitor23TraverseObjCBoxableAttrEPNS_15ObjCBoxableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseObjCBoxableAttrEPNS_15ObjCBoxableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCBoxableAttr(ObjCBoxableAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCBoxableAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCBoxableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 488,
   FQN="clang::RecursiveASTVisitor::VisitObjCBoxableAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitObjCBoxableAttrEPNS_15ObjCBoxableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitObjCBoxableAttrEPNS_15ObjCBoxableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCBoxableAttr(ObjCBoxableAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCBridgeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2006,
   FQN="clang::RecursiveASTVisitor::TraverseObjCBridgeAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseObjCBridgeAttrEPNS_14ObjCBridgeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseObjCBridgeAttrEPNS_14ObjCBridgeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCBridgeAttr(ObjCBridgeAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCBridgeAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCBridgeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 492,
   FQN="clang::RecursiveASTVisitor::VisitObjCBridgeAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitObjCBridgeAttrEPNS_14ObjCBridgeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitObjCBridgeAttrEPNS_14ObjCBridgeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCBridgeAttr(ObjCBridgeAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCBridgeMutableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2015,
   FQN="clang::RecursiveASTVisitor::TraverseObjCBridgeMutableAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseObjCBridgeMutableAttrEPNS_21ObjCBridgeMutableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseObjCBridgeMutableAttrEPNS_21ObjCBridgeMutableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCBridgeMutableAttr(ObjCBridgeMutableAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCBridgeMutableAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCBridgeMutableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 496,
   FQN="clang::RecursiveASTVisitor::VisitObjCBridgeMutableAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitObjCBridgeMutableAttrEPNS_21ObjCBridgeMutableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitObjCBridgeMutableAttrEPNS_21ObjCBridgeMutableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCBridgeMutableAttr(ObjCBridgeMutableAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCBridgeRelatedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2024,
   FQN="clang::RecursiveASTVisitor::TraverseObjCBridgeRelatedAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseObjCBridgeRelatedAttrEPNS_21ObjCBridgeRelatedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseObjCBridgeRelatedAttrEPNS_21ObjCBridgeRelatedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCBridgeRelatedAttr(ObjCBridgeRelatedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCBridgeRelatedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCBridgeRelatedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 500,
   FQN="clang::RecursiveASTVisitor::VisitObjCBridgeRelatedAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitObjCBridgeRelatedAttrEPNS_21ObjCBridgeRelatedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitObjCBridgeRelatedAttrEPNS_21ObjCBridgeRelatedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCBridgeRelatedAttr(ObjCBridgeRelatedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCDesignatedInitializerAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2033,
   FQN="clang::RecursiveASTVisitor::TraverseObjCDesignatedInitializerAttr", NM="_ZN5clang19RecursiveASTVisitor37TraverseObjCDesignatedInitializerAttrEPNS_29ObjCDesignatedInitializerAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37TraverseObjCDesignatedInitializerAttrEPNS_29ObjCDesignatedInitializerAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCDesignatedInitializerAttr(ObjCDesignatedInitializerAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCDesignatedInitializerAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCDesignatedInitializerAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 504,
   FQN="clang::RecursiveASTVisitor::VisitObjCDesignatedInitializerAttr", NM="_ZN5clang19RecursiveASTVisitor34VisitObjCDesignatedInitializerAttrEPNS_29ObjCDesignatedInitializerAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34VisitObjCDesignatedInitializerAttrEPNS_29ObjCDesignatedInitializerAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCDesignatedInitializerAttr(ObjCDesignatedInitializerAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCExceptionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2042,
   FQN="clang::RecursiveASTVisitor::TraverseObjCExceptionAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseObjCExceptionAttrEPNS_17ObjCExceptionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseObjCExceptionAttrEPNS_17ObjCExceptionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCExceptionAttr(ObjCExceptionAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCExceptionAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCExceptionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 508,
   FQN="clang::RecursiveASTVisitor::VisitObjCExceptionAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitObjCExceptionAttrEPNS_17ObjCExceptionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitObjCExceptionAttrEPNS_17ObjCExceptionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCExceptionAttr(ObjCExceptionAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCExplicitProtocolImplAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2051,
   FQN="clang::RecursiveASTVisitor::TraverseObjCExplicitProtocolImplAttr", NM="_ZN5clang19RecursiveASTVisitor36TraverseObjCExplicitProtocolImplAttrEPNS_28ObjCExplicitProtocolImplAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36TraverseObjCExplicitProtocolImplAttrEPNS_28ObjCExplicitProtocolImplAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCExplicitProtocolImplAttr(ObjCExplicitProtocolImplAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCExplicitProtocolImplAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCExplicitProtocolImplAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 512,
   FQN="clang::RecursiveASTVisitor::VisitObjCExplicitProtocolImplAttr", NM="_ZN5clang19RecursiveASTVisitor33VisitObjCExplicitProtocolImplAttrEPNS_28ObjCExplicitProtocolImplAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33VisitObjCExplicitProtocolImplAttrEPNS_28ObjCExplicitProtocolImplAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCExplicitProtocolImplAttr(ObjCExplicitProtocolImplAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCIndependentClassAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2060,
   FQN="clang::RecursiveASTVisitor::TraverseObjCIndependentClassAttr", NM="_ZN5clang19RecursiveASTVisitor32TraverseObjCIndependentClassAttrEPNS_24ObjCIndependentClassAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseObjCIndependentClassAttrEPNS_24ObjCIndependentClassAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCIndependentClassAttr(ObjCIndependentClassAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCIndependentClassAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCIndependentClassAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 516,
   FQN="clang::RecursiveASTVisitor::VisitObjCIndependentClassAttr", NM="_ZN5clang19RecursiveASTVisitor29VisitObjCIndependentClassAttrEPNS_24ObjCIndependentClassAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitObjCIndependentClassAttrEPNS_24ObjCIndependentClassAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCIndependentClassAttr(ObjCIndependentClassAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCMethodFamilyAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2069,
   FQN="clang::RecursiveASTVisitor::TraverseObjCMethodFamilyAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseObjCMethodFamilyAttrEPNS_20ObjCMethodFamilyAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseObjCMethodFamilyAttrEPNS_20ObjCMethodFamilyAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCMethodFamilyAttr(ObjCMethodFamilyAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCMethodFamilyAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCMethodFamilyAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 520,
   FQN="clang::RecursiveASTVisitor::VisitObjCMethodFamilyAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitObjCMethodFamilyAttrEPNS_20ObjCMethodFamilyAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitObjCMethodFamilyAttrEPNS_20ObjCMethodFamilyAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCMethodFamilyAttr(ObjCMethodFamilyAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCNSObjectAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2078,
   FQN="clang::RecursiveASTVisitor::TraverseObjCNSObjectAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseObjCNSObjectAttrEPNS_16ObjCNSObjectAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseObjCNSObjectAttrEPNS_16ObjCNSObjectAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCNSObjectAttr(ObjCNSObjectAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCNSObjectAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCNSObjectAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 524,
   FQN="clang::RecursiveASTVisitor::VisitObjCNSObjectAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitObjCNSObjectAttrEPNS_16ObjCNSObjectAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitObjCNSObjectAttrEPNS_16ObjCNSObjectAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCNSObjectAttr(ObjCNSObjectAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCPreciseLifetimeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2087,
   FQN="clang::RecursiveASTVisitor::TraverseObjCPreciseLifetimeAttr", NM="_ZN5clang19RecursiveASTVisitor31TraverseObjCPreciseLifetimeAttrEPNS_23ObjCPreciseLifetimeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseObjCPreciseLifetimeAttrEPNS_23ObjCPreciseLifetimeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCPreciseLifetimeAttr(ObjCPreciseLifetimeAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCPreciseLifetimeAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCPreciseLifetimeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 528,
   FQN="clang::RecursiveASTVisitor::VisitObjCPreciseLifetimeAttr", NM="_ZN5clang19RecursiveASTVisitor28VisitObjCPreciseLifetimeAttrEPNS_23ObjCPreciseLifetimeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitObjCPreciseLifetimeAttrEPNS_23ObjCPreciseLifetimeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCPreciseLifetimeAttr(ObjCPreciseLifetimeAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCRequiresPropertyDefsAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2096,
   FQN="clang::RecursiveASTVisitor::TraverseObjCRequiresPropertyDefsAttr", NM="_ZN5clang19RecursiveASTVisitor36TraverseObjCRequiresPropertyDefsAttrEPNS_28ObjCRequiresPropertyDefsAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36TraverseObjCRequiresPropertyDefsAttrEPNS_28ObjCRequiresPropertyDefsAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCRequiresPropertyDefsAttr(ObjCRequiresPropertyDefsAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCRequiresPropertyDefsAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCRequiresPropertyDefsAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 532,
   FQN="clang::RecursiveASTVisitor::VisitObjCRequiresPropertyDefsAttr", NM="_ZN5clang19RecursiveASTVisitor33VisitObjCRequiresPropertyDefsAttrEPNS_28ObjCRequiresPropertyDefsAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33VisitObjCRequiresPropertyDefsAttrEPNS_28ObjCRequiresPropertyDefsAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCRequiresPropertyDefsAttr(ObjCRequiresPropertyDefsAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCRequiresSuperAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2105,
   FQN="clang::RecursiveASTVisitor::TraverseObjCRequiresSuperAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseObjCRequiresSuperAttrEPNS_21ObjCRequiresSuperAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseObjCRequiresSuperAttrEPNS_21ObjCRequiresSuperAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCRequiresSuperAttr(ObjCRequiresSuperAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCRequiresSuperAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCRequiresSuperAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 536,
   FQN="clang::RecursiveASTVisitor::VisitObjCRequiresSuperAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitObjCRequiresSuperAttrEPNS_21ObjCRequiresSuperAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitObjCRequiresSuperAttrEPNS_21ObjCRequiresSuperAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCRequiresSuperAttr(ObjCRequiresSuperAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCReturnsInnerPointerAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2114,
   FQN="clang::RecursiveASTVisitor::TraverseObjCReturnsInnerPointerAttr", NM="_ZN5clang19RecursiveASTVisitor35TraverseObjCReturnsInnerPointerAttrEPNS_27ObjCReturnsInnerPointerAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35TraverseObjCReturnsInnerPointerAttrEPNS_27ObjCReturnsInnerPointerAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCReturnsInnerPointerAttr(ObjCReturnsInnerPointerAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCReturnsInnerPointerAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCReturnsInnerPointerAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 540,
   FQN="clang::RecursiveASTVisitor::VisitObjCReturnsInnerPointerAttr", NM="_ZN5clang19RecursiveASTVisitor32VisitObjCReturnsInnerPointerAttrEPNS_27ObjCReturnsInnerPointerAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32VisitObjCReturnsInnerPointerAttrEPNS_27ObjCReturnsInnerPointerAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCReturnsInnerPointerAttr(ObjCReturnsInnerPointerAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCRootClassAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2123,
   FQN="clang::RecursiveASTVisitor::TraverseObjCRootClassAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseObjCRootClassAttrEPNS_17ObjCRootClassAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseObjCRootClassAttrEPNS_17ObjCRootClassAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCRootClassAttr(ObjCRootClassAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCRootClassAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCRootClassAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 544,
   FQN="clang::RecursiveASTVisitor::VisitObjCRootClassAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitObjCRootClassAttrEPNS_17ObjCRootClassAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitObjCRootClassAttrEPNS_17ObjCRootClassAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCRootClassAttr(ObjCRootClassAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCRuntimeNameAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2132,
   FQN="clang::RecursiveASTVisitor::TraverseObjCRuntimeNameAttr", NM="_ZN5clang19RecursiveASTVisitor27TraverseObjCRuntimeNameAttrEPNS_19ObjCRuntimeNameAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseObjCRuntimeNameAttrEPNS_19ObjCRuntimeNameAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCRuntimeNameAttr(ObjCRuntimeNameAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCRuntimeNameAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCRuntimeNameAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 548,
   FQN="clang::RecursiveASTVisitor::VisitObjCRuntimeNameAttr", NM="_ZN5clang19RecursiveASTVisitor24VisitObjCRuntimeNameAttrEPNS_19ObjCRuntimeNameAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitObjCRuntimeNameAttrEPNS_19ObjCRuntimeNameAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCRuntimeNameAttr(ObjCRuntimeNameAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCRuntimeVisibleAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2141,
   FQN="clang::RecursiveASTVisitor::TraverseObjCRuntimeVisibleAttr", NM="_ZN5clang19RecursiveASTVisitor30TraverseObjCRuntimeVisibleAttrEPNS_22ObjCRuntimeVisibleAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseObjCRuntimeVisibleAttrEPNS_22ObjCRuntimeVisibleAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCRuntimeVisibleAttr(ObjCRuntimeVisibleAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitObjCRuntimeVisibleAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCRuntimeVisibleAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 552,
   FQN="clang::RecursiveASTVisitor::VisitObjCRuntimeVisibleAttr", NM="_ZN5clang19RecursiveASTVisitor27VisitObjCRuntimeVisibleAttrEPNS_22ObjCRuntimeVisibleAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitObjCRuntimeVisibleAttrEPNS_22ObjCRuntimeVisibleAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCRuntimeVisibleAttr(ObjCRuntimeVisibleAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOpenCLAccessAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2150,
   FQN="clang::RecursiveASTVisitor::TraverseOpenCLAccessAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseOpenCLAccessAttrEPNS_16OpenCLAccessAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseOpenCLAccessAttrEPNS_16OpenCLAccessAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOpenCLAccessAttr(OpenCLAccessAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOpenCLAccessAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOpenCLAccessAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 556,
   FQN="clang::RecursiveASTVisitor::VisitOpenCLAccessAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitOpenCLAccessAttrEPNS_16OpenCLAccessAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOpenCLAccessAttrEPNS_16OpenCLAccessAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOpenCLAccessAttr(OpenCLAccessAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOpenCLKernelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2159,
   FQN="clang::RecursiveASTVisitor::TraverseOpenCLKernelAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseOpenCLKernelAttrEPNS_16OpenCLKernelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseOpenCLKernelAttrEPNS_16OpenCLKernelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOpenCLKernelAttr(OpenCLKernelAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOpenCLKernelAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOpenCLKernelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 560,
   FQN="clang::RecursiveASTVisitor::VisitOpenCLKernelAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitOpenCLKernelAttrEPNS_16OpenCLKernelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOpenCLKernelAttrEPNS_16OpenCLKernelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOpenCLKernelAttr(OpenCLKernelAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOpenCLUnrollHintAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2168,
   FQN="clang::RecursiveASTVisitor::TraverseOpenCLUnrollHintAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseOpenCLUnrollHintAttrEPNS_20OpenCLUnrollHintAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseOpenCLUnrollHintAttrEPNS_20OpenCLUnrollHintAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOpenCLUnrollHintAttr(OpenCLUnrollHintAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOpenCLUnrollHintAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOpenCLUnrollHintAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 564,
   FQN="clang::RecursiveASTVisitor::VisitOpenCLUnrollHintAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitOpenCLUnrollHintAttrEPNS_20OpenCLUnrollHintAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOpenCLUnrollHintAttrEPNS_20OpenCLUnrollHintAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOpenCLUnrollHintAttr(OpenCLUnrollHintAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOptimizeNoneAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2177,
   FQN="clang::RecursiveASTVisitor::TraverseOptimizeNoneAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseOptimizeNoneAttrEPNS_16OptimizeNoneAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseOptimizeNoneAttrEPNS_16OptimizeNoneAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOptimizeNoneAttr(OptimizeNoneAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOptimizeNoneAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOptimizeNoneAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 568,
   FQN="clang::RecursiveASTVisitor::VisitOptimizeNoneAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitOptimizeNoneAttrEPNS_16OptimizeNoneAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOptimizeNoneAttrEPNS_16OptimizeNoneAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOptimizeNoneAttr(OptimizeNoneAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOverloadableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2186,
   FQN="clang::RecursiveASTVisitor::TraverseOverloadableAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseOverloadableAttrEPNS_16OverloadableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseOverloadableAttrEPNS_16OverloadableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOverloadableAttr(OverloadableAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOverloadableAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOverloadableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 572,
   FQN="clang::RecursiveASTVisitor::VisitOverloadableAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitOverloadableAttrEPNS_16OverloadableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOverloadableAttrEPNS_16OverloadableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOverloadableAttr(OverloadableAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOverrideAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2195,
   FQN="clang::RecursiveASTVisitor::TraverseOverrideAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseOverrideAttrEPNS_12OverrideAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseOverrideAttrEPNS_12OverrideAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOverrideAttr(OverrideAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOverrideAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOverrideAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 576,
   FQN="clang::RecursiveASTVisitor::VisitOverrideAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitOverrideAttrEPNS_12OverrideAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitOverrideAttrEPNS_12OverrideAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOverrideAttr(OverrideAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOwnershipAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2204,
   FQN="clang::RecursiveASTVisitor::TraverseOwnershipAttr", NM="_ZN5clang19RecursiveASTVisitor21TraverseOwnershipAttrEPNS_13OwnershipAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseOwnershipAttrEPNS_13OwnershipAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOwnershipAttr(OwnershipAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitOwnershipAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOwnershipAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 580,
   FQN="clang::RecursiveASTVisitor::VisitOwnershipAttr", NM="_ZN5clang19RecursiveASTVisitor18VisitOwnershipAttrEPNS_13OwnershipAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitOwnershipAttrEPNS_13OwnershipAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOwnershipAttr(OwnershipAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePackedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2213,
   FQN="clang::RecursiveASTVisitor::TraversePackedAttr", NM="_ZN5clang19RecursiveASTVisitor18TraversePackedAttrEPNS_10PackedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraversePackedAttrEPNS_10PackedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePackedAttr(PackedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitPackedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPackedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 584,
   FQN="clang::RecursiveASTVisitor::VisitPackedAttr", NM="_ZN5clang19RecursiveASTVisitor15VisitPackedAttrEPNS_10PackedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitPackedAttrEPNS_10PackedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPackedAttr(PackedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseParamTypestateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2222,
   FQN="clang::RecursiveASTVisitor::TraverseParamTypestateAttr", NM="_ZN5clang19RecursiveASTVisitor26TraverseParamTypestateAttrEPNS_18ParamTypestateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseParamTypestateAttrEPNS_18ParamTypestateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseParamTypestateAttr(ParamTypestateAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitParamTypestateAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitParamTypestateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 588,
   FQN="clang::RecursiveASTVisitor::VisitParamTypestateAttr", NM="_ZN5clang19RecursiveASTVisitor23VisitParamTypestateAttrEPNS_18ParamTypestateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitParamTypestateAttrEPNS_18ParamTypestateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitParamTypestateAttr(ParamTypestateAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePascalAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2231,
   FQN="clang::RecursiveASTVisitor::TraversePascalAttr", NM="_ZN5clang19RecursiveASTVisitor18TraversePascalAttrEPNS_10PascalAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraversePascalAttrEPNS_10PascalAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePascalAttr(PascalAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitPascalAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPascalAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 592,
   FQN="clang::RecursiveASTVisitor::VisitPascalAttr", NM="_ZN5clang19RecursiveASTVisitor15VisitPascalAttrEPNS_10PascalAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitPascalAttrEPNS_10PascalAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPascalAttr(PascalAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePassObjectSizeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2240,
   FQN="clang::RecursiveASTVisitor::TraversePassObjectSizeAttr", NM="_ZN5clang19RecursiveASTVisitor26TraversePassObjectSizeAttrEPNS_18PassObjectSizeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraversePassObjectSizeAttrEPNS_18PassObjectSizeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePassObjectSizeAttr(PassObjectSizeAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitPassObjectSizeAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPassObjectSizeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 596,
   FQN="clang::RecursiveASTVisitor::VisitPassObjectSizeAttr", NM="_ZN5clang19RecursiveASTVisitor23VisitPassObjectSizeAttrEPNS_18PassObjectSizeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitPassObjectSizeAttrEPNS_18PassObjectSizeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPassObjectSizeAttr(PassObjectSizeAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePcsAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2249,
   FQN="clang::RecursiveASTVisitor::TraversePcsAttr", NM="_ZN5clang19RecursiveASTVisitor15TraversePcsAttrEPNS_7PcsAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15TraversePcsAttrEPNS_7PcsAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePcsAttr(PcsAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitPcsAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPcsAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 600,
   FQN="clang::RecursiveASTVisitor::VisitPcsAttr", NM="_ZN5clang19RecursiveASTVisitor12VisitPcsAttrEPNS_7PcsAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12VisitPcsAttrEPNS_7PcsAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPcsAttr(PcsAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePreserveAllAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2258,
   FQN="clang::RecursiveASTVisitor::TraversePreserveAllAttr", NM="_ZN5clang19RecursiveASTVisitor23TraversePreserveAllAttrEPNS_15PreserveAllAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraversePreserveAllAttrEPNS_15PreserveAllAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePreserveAllAttr(PreserveAllAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitPreserveAllAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPreserveAllAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 604,
   FQN="clang::RecursiveASTVisitor::VisitPreserveAllAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitPreserveAllAttrEPNS_15PreserveAllAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitPreserveAllAttrEPNS_15PreserveAllAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPreserveAllAttr(PreserveAllAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePreserveMostAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2267,
   FQN="clang::RecursiveASTVisitor::TraversePreserveMostAttr", NM="_ZN5clang19RecursiveASTVisitor24TraversePreserveMostAttrEPNS_16PreserveMostAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraversePreserveMostAttrEPNS_16PreserveMostAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePreserveMostAttr(PreserveMostAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitPreserveMostAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPreserveMostAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 608,
   FQN="clang::RecursiveASTVisitor::VisitPreserveMostAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitPreserveMostAttrEPNS_16PreserveMostAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitPreserveMostAttrEPNS_16PreserveMostAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPreserveMostAttr(PreserveMostAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePtGuardedByAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2276,
   FQN="clang::RecursiveASTVisitor::TraversePtGuardedByAttr", NM="_ZN5clang19RecursiveASTVisitor23TraversePtGuardedByAttrEPNS_15PtGuardedByAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraversePtGuardedByAttrEPNS_15PtGuardedByAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePtGuardedByAttr(PtGuardedByAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitPtGuardedByAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getArg())) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPtGuardedByAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 612,
   FQN="clang::RecursiveASTVisitor::VisitPtGuardedByAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitPtGuardedByAttrEPNS_15PtGuardedByAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitPtGuardedByAttrEPNS_15PtGuardedByAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPtGuardedByAttr(PtGuardedByAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePtGuardedVarAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2287,
   FQN="clang::RecursiveASTVisitor::TraversePtGuardedVarAttr", NM="_ZN5clang19RecursiveASTVisitor24TraversePtGuardedVarAttrEPNS_16PtGuardedVarAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraversePtGuardedVarAttrEPNS_16PtGuardedVarAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePtGuardedVarAttr(PtGuardedVarAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitPtGuardedVarAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPtGuardedVarAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 616,
   FQN="clang::RecursiveASTVisitor::VisitPtGuardedVarAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitPtGuardedVarAttrEPNS_16PtGuardedVarAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitPtGuardedVarAttrEPNS_16PtGuardedVarAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPtGuardedVarAttr(PtGuardedVarAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePureAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2296,
   FQN="clang::RecursiveASTVisitor::TraversePureAttr", NM="_ZN5clang19RecursiveASTVisitor16TraversePureAttrEPNS_8PureAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraversePureAttrEPNS_8PureAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePureAttr(PureAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitPureAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPureAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 620,
   FQN="clang::RecursiveASTVisitor::VisitPureAttr", NM="_ZN5clang19RecursiveASTVisitor13VisitPureAttrEPNS_8PureAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitPureAttrEPNS_8PureAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPureAttr(PureAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseReleaseCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2305,
   FQN="clang::RecursiveASTVisitor::TraverseReleaseCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseReleaseCapabilityAttrEPNS_21ReleaseCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseReleaseCapabilityAttrEPNS_21ReleaseCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseReleaseCapabilityAttr(ReleaseCapabilityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitReleaseCapabilityAttr(A)) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitReleaseCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 624,
   FQN="clang::RecursiveASTVisitor::VisitReleaseCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitReleaseCapabilityAttrEPNS_21ReleaseCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitReleaseCapabilityAttrEPNS_21ReleaseCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitReleaseCapabilityAttr(ReleaseCapabilityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseRenderScriptKernelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2322,
   FQN="clang::RecursiveASTVisitor::TraverseRenderScriptKernelAttr", NM="_ZN5clang19RecursiveASTVisitor30TraverseRenderScriptKernelAttrEPNS_22RenderScriptKernelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseRenderScriptKernelAttrEPNS_22RenderScriptKernelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseRenderScriptKernelAttr(RenderScriptKernelAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitRenderScriptKernelAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitRenderScriptKernelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 628,
   FQN="clang::RecursiveASTVisitor::VisitRenderScriptKernelAttr", NM="_ZN5clang19RecursiveASTVisitor27VisitRenderScriptKernelAttrEPNS_22RenderScriptKernelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitRenderScriptKernelAttrEPNS_22RenderScriptKernelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitRenderScriptKernelAttr(RenderScriptKernelAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseReqdWorkGroupSizeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2331,
   FQN="clang::RecursiveASTVisitor::TraverseReqdWorkGroupSizeAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseReqdWorkGroupSizeAttrEPNS_21ReqdWorkGroupSizeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseReqdWorkGroupSizeAttrEPNS_21ReqdWorkGroupSizeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseReqdWorkGroupSizeAttr(ReqdWorkGroupSizeAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitReqdWorkGroupSizeAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitReqdWorkGroupSizeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 632,
   FQN="clang::RecursiveASTVisitor::VisitReqdWorkGroupSizeAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitReqdWorkGroupSizeAttrEPNS_21ReqdWorkGroupSizeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitReqdWorkGroupSizeAttrEPNS_21ReqdWorkGroupSizeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitReqdWorkGroupSizeAttr(ReqdWorkGroupSizeAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseRequiresCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2340,
   FQN="clang::RecursiveASTVisitor::TraverseRequiresCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor30TraverseRequiresCapabilityAttrEPNS_22RequiresCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseRequiresCapabilityAttrEPNS_22RequiresCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseRequiresCapabilityAttr(RequiresCapabilityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitRequiresCapabilityAttr(A)) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitRequiresCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 636,
   FQN="clang::RecursiveASTVisitor::VisitRequiresCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor27VisitRequiresCapabilityAttrEPNS_22RequiresCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitRequiresCapabilityAttrEPNS_22RequiresCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitRequiresCapabilityAttr(RequiresCapabilityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseRestrictAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2357,
   FQN="clang::RecursiveASTVisitor::TraverseRestrictAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseRestrictAttrEPNS_12RestrictAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseRestrictAttrEPNS_12RestrictAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseRestrictAttr(RestrictAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitRestrictAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitRestrictAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 640,
   FQN="clang::RecursiveASTVisitor::VisitRestrictAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitRestrictAttrEPNS_12RestrictAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitRestrictAttrEPNS_12RestrictAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitRestrictAttr(RestrictAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseReturnTypestateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2366,
   FQN="clang::RecursiveASTVisitor::TraverseReturnTypestateAttr", NM="_ZN5clang19RecursiveASTVisitor27TraverseReturnTypestateAttrEPNS_19ReturnTypestateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseReturnTypestateAttrEPNS_19ReturnTypestateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseReturnTypestateAttr(ReturnTypestateAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitReturnTypestateAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitReturnTypestateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 644,
   FQN="clang::RecursiveASTVisitor::VisitReturnTypestateAttr", NM="_ZN5clang19RecursiveASTVisitor24VisitReturnTypestateAttrEPNS_19ReturnTypestateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitReturnTypestateAttrEPNS_19ReturnTypestateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitReturnTypestateAttr(ReturnTypestateAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseReturnsNonNullAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2375,
   FQN="clang::RecursiveASTVisitor::TraverseReturnsNonNullAttr", NM="_ZN5clang19RecursiveASTVisitor26TraverseReturnsNonNullAttrEPNS_18ReturnsNonNullAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseReturnsNonNullAttrEPNS_18ReturnsNonNullAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseReturnsNonNullAttr(ReturnsNonNullAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitReturnsNonNullAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitReturnsNonNullAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 648,
   FQN="clang::RecursiveASTVisitor::VisitReturnsNonNullAttr", NM="_ZN5clang19RecursiveASTVisitor23VisitReturnsNonNullAttrEPNS_18ReturnsNonNullAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitReturnsNonNullAttrEPNS_18ReturnsNonNullAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitReturnsNonNullAttr(ReturnsNonNullAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseReturnsTwiceAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2384,
   FQN="clang::RecursiveASTVisitor::TraverseReturnsTwiceAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseReturnsTwiceAttrEPNS_16ReturnsTwiceAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseReturnsTwiceAttrEPNS_16ReturnsTwiceAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseReturnsTwiceAttr(ReturnsTwiceAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitReturnsTwiceAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitReturnsTwiceAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 652,
   FQN="clang::RecursiveASTVisitor::VisitReturnsTwiceAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitReturnsTwiceAttrEPNS_16ReturnsTwiceAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitReturnsTwiceAttrEPNS_16ReturnsTwiceAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitReturnsTwiceAttr(ReturnsTwiceAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseScopedLockableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2393,
   FQN="clang::RecursiveASTVisitor::TraverseScopedLockableAttr", NM="_ZN5clang19RecursiveASTVisitor26TraverseScopedLockableAttrEPNS_18ScopedLockableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseScopedLockableAttrEPNS_18ScopedLockableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseScopedLockableAttr(ScopedLockableAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitScopedLockableAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitScopedLockableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 656,
   FQN="clang::RecursiveASTVisitor::VisitScopedLockableAttr", NM="_ZN5clang19RecursiveASTVisitor23VisitScopedLockableAttrEPNS_18ScopedLockableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitScopedLockableAttrEPNS_18ScopedLockableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitScopedLockableAttr(ScopedLockableAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSectionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2402,
   FQN="clang::RecursiveASTVisitor::TraverseSectionAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseSectionAttrEPNS_11SectionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseSectionAttrEPNS_11SectionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSectionAttr(SectionAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSectionAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSectionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 660,
   FQN="clang::RecursiveASTVisitor::VisitSectionAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitSectionAttrEPNS_11SectionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitSectionAttrEPNS_11SectionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSectionAttr(SectionAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSelectAnyAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2411,
   FQN="clang::RecursiveASTVisitor::TraverseSelectAnyAttr", NM="_ZN5clang19RecursiveASTVisitor21TraverseSelectAnyAttrEPNS_13SelectAnyAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseSelectAnyAttrEPNS_13SelectAnyAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSelectAnyAttr(SelectAnyAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSelectAnyAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSelectAnyAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 664,
   FQN="clang::RecursiveASTVisitor::VisitSelectAnyAttr", NM="_ZN5clang19RecursiveASTVisitor18VisitSelectAnyAttrEPNS_13SelectAnyAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitSelectAnyAttrEPNS_13SelectAnyAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSelectAnyAttr(SelectAnyAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSentinelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2420,
   FQN="clang::RecursiveASTVisitor::TraverseSentinelAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseSentinelAttrEPNS_12SentinelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseSentinelAttrEPNS_12SentinelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSentinelAttr(SentinelAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSentinelAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSentinelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 668,
   FQN="clang::RecursiveASTVisitor::VisitSentinelAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitSentinelAttrEPNS_12SentinelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitSentinelAttrEPNS_12SentinelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSentinelAttr(SentinelAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSetTypestateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2429,
   FQN="clang::RecursiveASTVisitor::TraverseSetTypestateAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseSetTypestateAttrEPNS_16SetTypestateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseSetTypestateAttrEPNS_16SetTypestateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSetTypestateAttr(SetTypestateAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSetTypestateAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSetTypestateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 672,
   FQN="clang::RecursiveASTVisitor::VisitSetTypestateAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitSetTypestateAttrEPNS_16SetTypestateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitSetTypestateAttrEPNS_16SetTypestateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSetTypestateAttr(SetTypestateAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSharedTrylockFunctionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2438,
   FQN="clang::RecursiveASTVisitor::TraverseSharedTrylockFunctionAttr", NM="_ZN5clang19RecursiveASTVisitor33TraverseSharedTrylockFunctionAttrEPNS_25SharedTrylockFunctionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33TraverseSharedTrylockFunctionAttrEPNS_25SharedTrylockFunctionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSharedTrylockFunctionAttr(SharedTrylockFunctionAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSharedTrylockFunctionAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getSuccessValue())) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSharedTrylockFunctionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 676,
   FQN="clang::RecursiveASTVisitor::VisitSharedTrylockFunctionAttr", NM="_ZN5clang19RecursiveASTVisitor30VisitSharedTrylockFunctionAttrEPNS_25SharedTrylockFunctionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30VisitSharedTrylockFunctionAttrEPNS_25SharedTrylockFunctionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSharedTrylockFunctionAttr(SharedTrylockFunctionAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseStdCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2457,
   FQN="clang::RecursiveASTVisitor::TraverseStdCallAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseStdCallAttrEPNS_11StdCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseStdCallAttrEPNS_11StdCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseStdCallAttr(StdCallAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitStdCallAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitStdCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 680,
   FQN="clang::RecursiveASTVisitor::VisitStdCallAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitStdCallAttrEPNS_11StdCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitStdCallAttrEPNS_11StdCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitStdCallAttr(StdCallAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSwiftCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2466,
   FQN="clang::RecursiveASTVisitor::TraverseSwiftCallAttr", NM="_ZN5clang19RecursiveASTVisitor21TraverseSwiftCallAttrEPNS_13SwiftCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseSwiftCallAttrEPNS_13SwiftCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSwiftCallAttr(SwiftCallAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSwiftCallAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSwiftCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 684,
   FQN="clang::RecursiveASTVisitor::VisitSwiftCallAttr", NM="_ZN5clang19RecursiveASTVisitor18VisitSwiftCallAttrEPNS_13SwiftCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitSwiftCallAttrEPNS_13SwiftCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSwiftCallAttr(SwiftCallAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSwiftContextAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2475,
   FQN="clang::RecursiveASTVisitor::TraverseSwiftContextAttr", NM="_ZN5clang19RecursiveASTVisitor24TraverseSwiftContextAttrEPNS_16SwiftContextAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseSwiftContextAttrEPNS_16SwiftContextAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSwiftContextAttr(SwiftContextAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSwiftContextAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSwiftContextAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 688,
   FQN="clang::RecursiveASTVisitor::VisitSwiftContextAttr", NM="_ZN5clang19RecursiveASTVisitor21VisitSwiftContextAttrEPNS_16SwiftContextAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitSwiftContextAttrEPNS_16SwiftContextAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSwiftContextAttr(SwiftContextAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSwiftErrorResultAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2484,
   FQN="clang::RecursiveASTVisitor::TraverseSwiftErrorResultAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseSwiftErrorResultAttrEPNS_20SwiftErrorResultAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseSwiftErrorResultAttrEPNS_20SwiftErrorResultAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSwiftErrorResultAttr(SwiftErrorResultAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSwiftErrorResultAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSwiftErrorResultAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 692,
   FQN="clang::RecursiveASTVisitor::VisitSwiftErrorResultAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitSwiftErrorResultAttrEPNS_20SwiftErrorResultAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitSwiftErrorResultAttrEPNS_20SwiftErrorResultAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSwiftErrorResultAttr(SwiftErrorResultAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSwiftIndirectResultAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2493,
   FQN="clang::RecursiveASTVisitor::TraverseSwiftIndirectResultAttr", NM="_ZN5clang19RecursiveASTVisitor31TraverseSwiftIndirectResultAttrEPNS_23SwiftIndirectResultAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseSwiftIndirectResultAttrEPNS_23SwiftIndirectResultAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSwiftIndirectResultAttr(SwiftIndirectResultAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSwiftIndirectResultAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSwiftIndirectResultAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 696,
   FQN="clang::RecursiveASTVisitor::VisitSwiftIndirectResultAttr", NM="_ZN5clang19RecursiveASTVisitor28VisitSwiftIndirectResultAttrEPNS_23SwiftIndirectResultAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitSwiftIndirectResultAttrEPNS_23SwiftIndirectResultAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSwiftIndirectResultAttr(SwiftIndirectResultAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSysVABIAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2502,
   FQN="clang::RecursiveASTVisitor::TraverseSysVABIAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseSysVABIAttrEPNS_11SysVABIAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseSysVABIAttrEPNS_11SysVABIAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSysVABIAttr(SysVABIAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitSysVABIAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSysVABIAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 700,
   FQN="clang::RecursiveASTVisitor::VisitSysVABIAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitSysVABIAttrEPNS_11SysVABIAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitSysVABIAttrEPNS_11SysVABIAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSysVABIAttr(SysVABIAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTLSModelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2511,
   FQN="clang::RecursiveASTVisitor::TraverseTLSModelAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseTLSModelAttrEPNS_12TLSModelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseTLSModelAttrEPNS_12TLSModelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTLSModelAttr(TLSModelAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitTLSModelAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTLSModelAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 704,
   FQN="clang::RecursiveASTVisitor::VisitTLSModelAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitTLSModelAttrEPNS_12TLSModelAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitTLSModelAttrEPNS_12TLSModelAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTLSModelAttr(TLSModelAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTargetAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2520,
   FQN="clang::RecursiveASTVisitor::TraverseTargetAttr", NM="_ZN5clang19RecursiveASTVisitor18TraverseTargetAttrEPNS_10TargetAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseTargetAttrEPNS_10TargetAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTargetAttr(TargetAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitTargetAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTargetAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 708,
   FQN="clang::RecursiveASTVisitor::VisitTargetAttr", NM="_ZN5clang19RecursiveASTVisitor15VisitTargetAttrEPNS_10TargetAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitTargetAttrEPNS_10TargetAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTargetAttr(TargetAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTestTypestateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2529,
   FQN="clang::RecursiveASTVisitor::TraverseTestTypestateAttr", NM="_ZN5clang19RecursiveASTVisitor25TraverseTestTypestateAttrEPNS_17TestTypestateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseTestTypestateAttrEPNS_17TestTypestateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTestTypestateAttr(TestTypestateAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitTestTypestateAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTestTypestateAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 712,
   FQN="clang::RecursiveASTVisitor::VisitTestTypestateAttr", NM="_ZN5clang19RecursiveASTVisitor22VisitTestTypestateAttrEPNS_17TestTypestateAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitTestTypestateAttrEPNS_17TestTypestateAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTestTypestateAttr(TestTypestateAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseThisCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2538,
   FQN="clang::RecursiveASTVisitor::TraverseThisCallAttr", NM="_ZN5clang19RecursiveASTVisitor20TraverseThisCallAttrEPNS_12ThisCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseThisCallAttrEPNS_12ThisCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseThisCallAttr(ThisCallAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitThisCallAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitThisCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 716,
   FQN="clang::RecursiveASTVisitor::VisitThisCallAttr", NM="_ZN5clang19RecursiveASTVisitor17VisitThisCallAttrEPNS_12ThisCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitThisCallAttrEPNS_12ThisCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitThisCallAttr(ThisCallAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseThreadAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2547,
   FQN="clang::RecursiveASTVisitor::TraverseThreadAttr", NM="_ZN5clang19RecursiveASTVisitor18TraverseThreadAttrEPNS_10ThreadAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseThreadAttrEPNS_10ThreadAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseThreadAttr(ThreadAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitThreadAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitThreadAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 720,
   FQN="clang::RecursiveASTVisitor::VisitThreadAttr", NM="_ZN5clang19RecursiveASTVisitor15VisitThreadAttrEPNS_10ThreadAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitThreadAttrEPNS_10ThreadAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitThreadAttr(ThreadAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTransparentUnionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2556,
   FQN="clang::RecursiveASTVisitor::TraverseTransparentUnionAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseTransparentUnionAttrEPNS_20TransparentUnionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseTransparentUnionAttrEPNS_20TransparentUnionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTransparentUnionAttr(TransparentUnionAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitTransparentUnionAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTransparentUnionAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 724,
   FQN="clang::RecursiveASTVisitor::VisitTransparentUnionAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitTransparentUnionAttrEPNS_20TransparentUnionAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitTransparentUnionAttrEPNS_20TransparentUnionAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTransparentUnionAttr(TransparentUnionAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTryAcquireCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2565,
   FQN="clang::RecursiveASTVisitor::TraverseTryAcquireCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor32TraverseTryAcquireCapabilityAttrEPNS_24TryAcquireCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseTryAcquireCapabilityAttrEPNS_24TryAcquireCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTryAcquireCapabilityAttr(TryAcquireCapabilityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitTryAcquireCapabilityAttr(A)) {
      return false;
    }
    if (!getDerived().TraverseStmt(A.getSuccessValue())) {
      return false;
    }
    {
      type$ptr<Expr/*P*/> I = $tryClone(A.args_begin());
      type$ptr<Expr/*P*/> E = $tryClone(A.args_end());
      for (; $noteq_ptr(I, E); I.$preInc()) {
        if (!getDerived().TraverseStmt(I.$star())) {
          return false;
        }
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTryAcquireCapabilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 728,
   FQN="clang::RecursiveASTVisitor::VisitTryAcquireCapabilityAttr", NM="_ZN5clang19RecursiveASTVisitor29VisitTryAcquireCapabilityAttrEPNS_24TryAcquireCapabilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitTryAcquireCapabilityAttrEPNS_24TryAcquireCapabilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTryAcquireCapabilityAttr(TryAcquireCapabilityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeTagForDatatypeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2584,
   FQN="clang::RecursiveASTVisitor::TraverseTypeTagForDatatypeAttr", NM="_ZN5clang19RecursiveASTVisitor30TraverseTypeTagForDatatypeAttrEPNS_22TypeTagForDatatypeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseTypeTagForDatatypeAttrEPNS_22TypeTagForDatatypeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeTagForDatatypeAttr(TypeTagForDatatypeAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitTypeTagForDatatypeAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeTagForDatatypeAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 732,
   FQN="clang::RecursiveASTVisitor::VisitTypeTagForDatatypeAttr", NM="_ZN5clang19RecursiveASTVisitor27VisitTypeTagForDatatypeAttrEPNS_22TypeTagForDatatypeAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitTypeTagForDatatypeAttrEPNS_22TypeTagForDatatypeAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeTagForDatatypeAttr(TypeTagForDatatypeAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeVisibilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2593,
   FQN="clang::RecursiveASTVisitor::TraverseTypeVisibilityAttr", NM="_ZN5clang19RecursiveASTVisitor26TraverseTypeVisibilityAttrEPNS_18TypeVisibilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseTypeVisibilityAttrEPNS_18TypeVisibilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeVisibilityAttr(TypeVisibilityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitTypeVisibilityAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeVisibilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 736,
   FQN="clang::RecursiveASTVisitor::VisitTypeVisibilityAttr", NM="_ZN5clang19RecursiveASTVisitor23VisitTypeVisibilityAttrEPNS_18TypeVisibilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitTypeVisibilityAttrEPNS_18TypeVisibilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeVisibilityAttr(TypeVisibilityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnavailableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2602,
   FQN="clang::RecursiveASTVisitor::TraverseUnavailableAttr", NM="_ZN5clang19RecursiveASTVisitor23TraverseUnavailableAttrEPNS_15UnavailableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseUnavailableAttrEPNS_15UnavailableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnavailableAttr(UnavailableAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitUnavailableAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnavailableAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 740,
   FQN="clang::RecursiveASTVisitor::VisitUnavailableAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitUnavailableAttrEPNS_15UnavailableAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitUnavailableAttrEPNS_15UnavailableAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnavailableAttr(UnavailableAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnusedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2611,
   FQN="clang::RecursiveASTVisitor::TraverseUnusedAttr", NM="_ZN5clang19RecursiveASTVisitor18TraverseUnusedAttrEPNS_10UnusedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseUnusedAttrEPNS_10UnusedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnusedAttr(UnusedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitUnusedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnusedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 744,
   FQN="clang::RecursiveASTVisitor::VisitUnusedAttr", NM="_ZN5clang19RecursiveASTVisitor15VisitUnusedAttrEPNS_10UnusedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitUnusedAttrEPNS_10UnusedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnusedAttr(UnusedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUsedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2620,
   FQN="clang::RecursiveASTVisitor::TraverseUsedAttr", NM="_ZN5clang19RecursiveASTVisitor16TraverseUsedAttrEPNS_8UsedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseUsedAttrEPNS_8UsedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUsedAttr(UsedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitUsedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUsedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 748,
   FQN="clang::RecursiveASTVisitor::VisitUsedAttr", NM="_ZN5clang19RecursiveASTVisitor13VisitUsedAttrEPNS_8UsedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitUsedAttrEPNS_8UsedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUsedAttr(UsedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUuidAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2629,
   FQN="clang::RecursiveASTVisitor::TraverseUuidAttr", NM="_ZN5clang19RecursiveASTVisitor16TraverseUuidAttrEPNS_8UuidAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseUuidAttrEPNS_8UuidAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUuidAttr(UuidAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitUuidAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUuidAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 752,
   FQN="clang::RecursiveASTVisitor::VisitUuidAttr", NM="_ZN5clang19RecursiveASTVisitor13VisitUuidAttrEPNS_8UuidAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitUuidAttrEPNS_8UuidAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUuidAttr(UuidAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVecReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2638,
   FQN="clang::RecursiveASTVisitor::TraverseVecReturnAttr", NM="_ZN5clang19RecursiveASTVisitor21TraverseVecReturnAttrEPNS_13VecReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseVecReturnAttrEPNS_13VecReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVecReturnAttr(VecReturnAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitVecReturnAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVecReturnAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 756,
   FQN="clang::RecursiveASTVisitor::VisitVecReturnAttr", NM="_ZN5clang19RecursiveASTVisitor18VisitVecReturnAttrEPNS_13VecReturnAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitVecReturnAttrEPNS_13VecReturnAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVecReturnAttr(VecReturnAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVecTypeHintAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2647,
   FQN="clang::RecursiveASTVisitor::TraverseVecTypeHintAttr", NM="_ZN5clang19RecursiveASTVisitor23TraverseVecTypeHintAttrEPNS_15VecTypeHintAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseVecTypeHintAttrEPNS_15VecTypeHintAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVecTypeHintAttr(VecTypeHintAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitVecTypeHintAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVecTypeHintAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 760,
   FQN="clang::RecursiveASTVisitor::VisitVecTypeHintAttr", NM="_ZN5clang19RecursiveASTVisitor20VisitVecTypeHintAttrEPNS_15VecTypeHintAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitVecTypeHintAttrEPNS_15VecTypeHintAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVecTypeHintAttr(VecTypeHintAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVectorCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2656,
   FQN="clang::RecursiveASTVisitor::TraverseVectorCallAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseVectorCallAttrEPNS_14VectorCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseVectorCallAttrEPNS_14VectorCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVectorCallAttr(VectorCallAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitVectorCallAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVectorCallAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 764,
   FQN="clang::RecursiveASTVisitor::VisitVectorCallAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitVectorCallAttrEPNS_14VectorCallAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitVectorCallAttrEPNS_14VectorCallAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVectorCallAttr(VectorCallAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVisibilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2665,
   FQN="clang::RecursiveASTVisitor::TraverseVisibilityAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseVisibilityAttrEPNS_14VisibilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseVisibilityAttrEPNS_14VisibilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVisibilityAttr(VisibilityAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitVisibilityAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVisibilityAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 768,
   FQN="clang::RecursiveASTVisitor::VisitVisibilityAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitVisibilityAttrEPNS_14VisibilityAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitVisibilityAttrEPNS_14VisibilityAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVisibilityAttr(VisibilityAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseWarnUnusedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2674,
   FQN="clang::RecursiveASTVisitor::TraverseWarnUnusedAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseWarnUnusedAttrEPNS_14WarnUnusedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseWarnUnusedAttrEPNS_14WarnUnusedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseWarnUnusedAttr(WarnUnusedAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitWarnUnusedAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitWarnUnusedAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 772,
   FQN="clang::RecursiveASTVisitor::VisitWarnUnusedAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitWarnUnusedAttrEPNS_14WarnUnusedAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitWarnUnusedAttrEPNS_14WarnUnusedAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitWarnUnusedAttr(WarnUnusedAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseWarnUnusedResultAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2683,
   FQN="clang::RecursiveASTVisitor::TraverseWarnUnusedResultAttr", NM="_ZN5clang19RecursiveASTVisitor28TraverseWarnUnusedResultAttrEPNS_20WarnUnusedResultAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseWarnUnusedResultAttrEPNS_20WarnUnusedResultAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseWarnUnusedResultAttr(WarnUnusedResultAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitWarnUnusedResultAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitWarnUnusedResultAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 776,
   FQN="clang::RecursiveASTVisitor::VisitWarnUnusedResultAttr", NM="_ZN5clang19RecursiveASTVisitor25VisitWarnUnusedResultAttrEPNS_20WarnUnusedResultAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitWarnUnusedResultAttrEPNS_20WarnUnusedResultAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitWarnUnusedResultAttr(WarnUnusedResultAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseWeakAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2692,
   FQN="clang::RecursiveASTVisitor::TraverseWeakAttr", NM="_ZN5clang19RecursiveASTVisitor16TraverseWeakAttrEPNS_8WeakAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseWeakAttrEPNS_8WeakAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseWeakAttr(WeakAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitWeakAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitWeakAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 780,
   FQN="clang::RecursiveASTVisitor::VisitWeakAttr", NM="_ZN5clang19RecursiveASTVisitor13VisitWeakAttrEPNS_8WeakAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitWeakAttrEPNS_8WeakAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitWeakAttr(WeakAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseWeakImportAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2701,
   FQN="clang::RecursiveASTVisitor::TraverseWeakImportAttr", NM="_ZN5clang19RecursiveASTVisitor22TraverseWeakImportAttrEPNS_14WeakImportAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseWeakImportAttrEPNS_14WeakImportAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseWeakImportAttr(WeakImportAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitWeakImportAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitWeakImportAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 784,
   FQN="clang::RecursiveASTVisitor::VisitWeakImportAttr", NM="_ZN5clang19RecursiveASTVisitor19VisitWeakImportAttrEPNS_14WeakImportAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitWeakImportAttrEPNS_14WeakImportAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitWeakImportAttr(WeakImportAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseWeakRefAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2710,
   FQN="clang::RecursiveASTVisitor::TraverseWeakRefAttr", NM="_ZN5clang19RecursiveASTVisitor19TraverseWeakRefAttrEPNS_11WeakRefAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseWeakRefAttrEPNS_11WeakRefAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseWeakRefAttr(WeakRefAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitWeakRefAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitWeakRefAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 788,
   FQN="clang::RecursiveASTVisitor::VisitWeakRefAttr", NM="_ZN5clang19RecursiveASTVisitor16VisitWeakRefAttrEPNS_11WeakRefAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitWeakRefAttrEPNS_11WeakRefAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitWeakRefAttr(WeakRefAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseWorkGroupSizeHintAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2719,
   FQN="clang::RecursiveASTVisitor::TraverseWorkGroupSizeHintAttr", NM="_ZN5clang19RecursiveASTVisitor29TraverseWorkGroupSizeHintAttrEPNS_21WorkGroupSizeHintAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseWorkGroupSizeHintAttrEPNS_21WorkGroupSizeHintAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseWorkGroupSizeHintAttr(WorkGroupSizeHintAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitWorkGroupSizeHintAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitWorkGroupSizeHintAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 792,
   FQN="clang::RecursiveASTVisitor::VisitWorkGroupSizeHintAttr", NM="_ZN5clang19RecursiveASTVisitor26VisitWorkGroupSizeHintAttrEPNS_21WorkGroupSizeHintAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitWorkGroupSizeHintAttrEPNS_21WorkGroupSizeHintAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitWorkGroupSizeHintAttr(WorkGroupSizeHintAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseX86ForceAlignArgPointerAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2728,
   FQN="clang::RecursiveASTVisitor::TraverseX86ForceAlignArgPointerAttr", NM="_ZN5clang19RecursiveASTVisitor35TraverseX86ForceAlignArgPointerAttrEPNS_27X86ForceAlignArgPointerAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35TraverseX86ForceAlignArgPointerAttrEPNS_27X86ForceAlignArgPointerAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseX86ForceAlignArgPointerAttr(X86ForceAlignArgPointerAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitX86ForceAlignArgPointerAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitX86ForceAlignArgPointerAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 796,
   FQN="clang::RecursiveASTVisitor::VisitX86ForceAlignArgPointerAttr", NM="_ZN5clang19RecursiveASTVisitor32VisitX86ForceAlignArgPointerAttrEPNS_27X86ForceAlignArgPointerAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32VisitX86ForceAlignArgPointerAttrEPNS_27X86ForceAlignArgPointerAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitX86ForceAlignArgPointerAttr(X86ForceAlignArgPointerAttr /*P*/ A) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseXRayInstrumentAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 2737,
   FQN="clang::RecursiveASTVisitor::TraverseXRayInstrumentAttr", NM="_ZN5clang19RecursiveASTVisitor26TraverseXRayInstrumentAttrEPNS_18XRayInstrumentAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseXRayInstrumentAttrEPNS_18XRayInstrumentAttrE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseXRayInstrumentAttr(XRayInstrumentAttr /*P*/ A) {
    if (!getDerived().VisitAttr(A)) {
      return false;
    }
    if (!getDerived().VisitXRayInstrumentAttr(A)) {
      return false;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitXRayInstrumentAttr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/AttrVisitor.inc", line = 800,
   FQN="clang::RecursiveASTVisitor::VisitXRayInstrumentAttr", NM="_ZN5clang19RecursiveASTVisitor23VisitXRayInstrumentAttrEPNS_18XRayInstrumentAttrE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitXRayInstrumentAttrEPNS_18XRayInstrumentAttrE")
  //</editor-fold>
  public default/*interface*/ boolean VisitXRayInstrumentAttr(XRayInstrumentAttr /*P*/ A) {
    return true;
  }


  // ---- Methods on Stmts ----
  /*private:*/
  /*template <typename T, typename U> TEMPLATE*/
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::has_same_member_pointer_type">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 300,
   FQN="clang::RecursiveASTVisitor::has_same_member_pointer_type", NM="_ZN5clang19RecursiveASTVisitor28has_same_member_pointer_typeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28has_same_member_pointer_typeE")
  //</editor-fold>
  public static class/*struct*/ has_same_member_pointer_type</*typename*/ T, /*typename*/ U>  extends /**/ integral_constant_bool_false {
    
    @Override public String toString() {
      return "" + super.toString(); // NOI18N
    }
  };
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::has_same_member_pointer_type<type-parameter-1-2 (type-parameter-1-0::*)(type-parameter-1-3...), type-parameter-1-2 (type-parameter-1-1::*)(type-parameter-1-3...)>">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 302,
   FQN="clang::RecursiveASTVisitor::has_same_member_pointer_type<type-parameter-1-2 (type-parameter-1-0::*)(type-parameter-1-3...), type-parameter-1-2 (type-parameter-1-1::*)(type-parameter-1-3...)>", NM="_ZN5clang19RecursiveASTVisitor28has_same_member_pointer_typeIMT_FT1_DpT2_EMT0_FS3_S5_EEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28has_same_member_pointer_typeIMT_FT1_DpT2_EMT0_FS3_S5_EEE")
  //</editor-fold>
  public static class/*struct*/ has_same_member_pointer_typeTemplateType$Type3toType2TemplateType1$Type3toType2 extends /**/ integral_constant_bool_true {
    
    @Override public String toString() {
      return "" + super.toString(); // NOI18N
    }
  };
/*public:*/
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseGCCAsmStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1984,
   FQN="clang::RecursiveASTVisitor::TraverseGCCAsmStmt", NM="_ZN5clang19RecursiveASTVisitor18TraverseGCCAsmStmtEPNS_10GCCAsmStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseGCCAsmStmtEPNS_10GCCAsmStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseGCCAsmStmt(GCCAsmStmt /*P*/ S) {
    return TraverseGCCAsmStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseGCCAsmStmt(GCCAsmStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromGCCAsmStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getAsmString())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getAsmString()))))) {
            return false;
          }
        } while (false);
        for (/*uint*/int I = 0, E = S.getNumInputs(); $less_uint(I, E); ++I) {
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getInputConstraintLiteral(I))), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getInputConstraintLiteral(I)))))) {
              return false;
            }
          } while (false);
        }
        for (/*uint*/int I = 0, E = S.getNumOutputs(); $less_uint(I, E); ++I) {
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getOutputConstraintLiteral(I))), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getOutputConstraintLiteral(I)))))) {
              return false;
            }
          } while (false);
        }
        for (/*uint*/int I = 0, E = S.getNumClobbers(); $less_uint(I, E); ++I) {
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getClobberStringLiteral(I))), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getClobberStringLiteral(I)))))) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromGCCAsmStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSAsmStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1998,
   FQN="clang::RecursiveASTVisitor::TraverseMSAsmStmt", NM="_ZN5clang19RecursiveASTVisitor17TraverseMSAsmStmtEPNS_9MSAsmStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseMSAsmStmtEPNS_9MSAsmStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSAsmStmt(MSAsmStmt /*P*/ S) {
    return TraverseMSAsmStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseMSAsmStmt(MSAsmStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSAsmStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSAsmStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAttributedStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2035,
   FQN="clang::RecursiveASTVisitor::TraverseAttributedStmt", NM="_ZN5clang19RecursiveASTVisitor22TraverseAttributedStmtEPNS_14AttributedStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseAttributedStmtEPNS_14AttributedStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAttributedStmt(AttributedStmt /*P*/ S) {
    return TraverseAttributedStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseAttributedStmt(AttributedStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAttributedStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAttributedStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // These non-expr stmts (most of them), do not need any action except
  // iterating over the children.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBreakStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2023,
   FQN="clang::RecursiveASTVisitor::TraverseBreakStmt", NM="_ZN5clang19RecursiveASTVisitor17TraverseBreakStmtEPNS_9BreakStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseBreakStmtEPNS_9BreakStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBreakStmt(BreakStmt /*P*/ S) {
    return TraverseBreakStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBreakStmt(BreakStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBreakStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBreakStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXCatchStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2004,
   FQN="clang::RecursiveASTVisitor::TraverseCXXCatchStmt", NM="_ZN5clang19RecursiveASTVisitor20TraverseCXXCatchStmtEPNS_12CXXCatchStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseCXXCatchStmtEPNS_12CXXCatchStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXCatchStmt(CXXCatchStmt /*P*/ S) {
    return TraverseCXXCatchStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXCatchStmt(CXXCatchStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXCatchStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDecl(S.getExceptionDecl())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXCatchStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXForRangeStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2044,
   FQN="clang::RecursiveASTVisitor::TraverseCXXForRangeStmt", NM="_ZN5clang19RecursiveASTVisitor23TraverseCXXForRangeStmtEPNS_15CXXForRangeStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseCXXForRangeStmtEPNS_15CXXForRangeStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXForRangeStmt(CXXForRangeStmt /*P*/ S) {
    return TraverseCXXForRangeStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXForRangeStmt(CXXForRangeStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXForRangeStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (!getDerived().shouldVisitImplicitCode()) {
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLoopVarStmt())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLoopVarStmt()))))) {
              return false;
            }
          } while (false);
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRangeInit())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRangeInit()))))) {
              return false;
            }
          } while (false);
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getBody())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getBody()))))) {
              return false;
            }
          } while (false);
          ShouldVisitChildren = false;
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXForRangeStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXTryStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2024,
   FQN="clang::RecursiveASTVisitor::TraverseCXXTryStmt", NM="_ZN5clang19RecursiveASTVisitor18TraverseCXXTryStmtEPNS_10CXXTryStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseCXXTryStmtEPNS_10CXXTryStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXTryStmt(CXXTryStmt /*P*/ S) {
    return TraverseCXXTryStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXTryStmt(CXXTryStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXTryStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXTryStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCapturedStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2382,
   FQN="clang::RecursiveASTVisitor::TraverseCapturedStmt", NM="_ZN5clang19RecursiveASTVisitor20TraverseCapturedStmtEPNS_12CapturedStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseCapturedStmtEPNS_12CapturedStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCapturedStmt(CapturedStmt /*P*/ S) {
    return TraverseCapturedStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCapturedStmt(CapturedStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCapturedStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDecl(S.getCapturedDecl())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCapturedStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCompoundStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2026,
   FQN="clang::RecursiveASTVisitor::TraverseCompoundStmt", NM="_ZN5clang19RecursiveASTVisitor20TraverseCompoundStmtEPNS_12CompoundStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseCompoundStmtEPNS_12CompoundStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCompoundStmt(CompoundStmt /*P*/ S) {
    return TraverseCompoundStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCompoundStmt(CompoundStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCompoundStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCompoundStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseContinueStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2027,
   FQN="clang::RecursiveASTVisitor::TraverseContinueStmt", NM="_ZN5clang19RecursiveASTVisitor20TraverseContinueStmtEPNS_12ContinueStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseContinueStmtEPNS_12ContinueStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseContinueStmt(ContinueStmt /*P*/ S) {
    return TraverseContinueStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseContinueStmt(ContinueStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromContinueStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromContinueStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCoreturnStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2415,
   FQN="clang::RecursiveASTVisitor::TraverseCoreturnStmt", NM="_ZN5clang19RecursiveASTVisitor20TraverseCoreturnStmtEPNS_12CoreturnStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseCoreturnStmtEPNS_12CoreturnStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCoreturnStmt(CoreturnStmt /*P*/ S) {
    return TraverseCoreturnStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCoreturnStmt(CoreturnStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCoreturnStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (!getDerived().shouldVisitImplicitCode()) {
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getOperand())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getOperand()))))) {
              return false;
            }
          } while (false);
          ShouldVisitChildren = false;
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCoreturnStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // For coroutines expressions, traverse either the operand
  // as written or the implied calls, depending on what the
  // derived class requests.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCoroutineBodyStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2409,
   FQN="clang::RecursiveASTVisitor::TraverseCoroutineBodyStmt", NM="_ZN5clang19RecursiveASTVisitor25TraverseCoroutineBodyStmtEPNS_17CoroutineBodyStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseCoroutineBodyStmtEPNS_17CoroutineBodyStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCoroutineBodyStmt(CoroutineBodyStmt /*P*/ S) {
    return TraverseCoroutineBodyStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCoroutineBodyStmt(CoroutineBodyStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCoroutineBodyStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (!getDerived().shouldVisitImplicitCode()) {
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getBody())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getBody()))))) {
              return false;
            }
          } while (false);
          ShouldVisitChildren = false;
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCoroutineBodyStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDeclStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2009,
   FQN="clang::RecursiveASTVisitor::TraverseDeclStmt", NM="_ZN5clang19RecursiveASTVisitor16TraverseDeclStmtEPNS_8DeclStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseDeclStmtEPNS_8DeclStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDeclStmt(DeclStmt /*P*/ S) {
    return TraverseDeclStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseDeclStmt(DeclStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDeclStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        for (Decl /*P*/ I : S.decls()) {
          do {
            if (!getDerived().TraverseDecl(I)) {
              return false;
            }
          } while (false);
        }
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDeclStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDoStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2029,
   FQN="clang::RecursiveASTVisitor::TraverseDoStmt", NM="_ZN5clang19RecursiveASTVisitor14TraverseDoStmtEPNS_6DoStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseDoStmtEPNS_6DoStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDoStmt(DoStmt /*P*/ S) {
    return TraverseDoStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseDoStmt(DoStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDoStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDoStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // These operators (all of them) do not need any action except
  // iterating over the children.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinaryConditionalOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2391,
   FQN="clang::RecursiveASTVisitor::TraverseBinaryConditionalOperator", NM="_ZN5clang19RecursiveASTVisitor33TraverseBinaryConditionalOperatorEPNS_25BinaryConditionalOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33TraverseBinaryConditionalOperatorEPNS_25BinaryConditionalOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinaryConditionalOperator(BinaryConditionalOperator /*P*/ S) {
    return TraverseBinaryConditionalOperator(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinaryConditionalOperator(BinaryConditionalOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinaryConditionalOperator(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinaryConditionalOperator(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConditionalOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2392,
   FQN="clang::RecursiveASTVisitor::TraverseConditionalOperator", NM="_ZN5clang19RecursiveASTVisitor27TraverseConditionalOperatorEPNS_19ConditionalOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseConditionalOperatorEPNS_19ConditionalOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConditionalOperator(ConditionalOperator /*P*/ S) {
    return TraverseConditionalOperator(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseConditionalOperator(ConditionalOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromConditionalOperator(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromConditionalOperator(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // These exprs (most of them), do not need any action except iterating
  // over the children.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAddrLabelExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2300,
   FQN="clang::RecursiveASTVisitor::TraverseAddrLabelExpr", NM="_ZN5clang19RecursiveASTVisitor21TraverseAddrLabelExprEPNS_13AddrLabelExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseAddrLabelExprEPNS_13AddrLabelExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAddrLabelExpr(AddrLabelExpr /*P*/ S) {
    return TraverseAddrLabelExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseAddrLabelExpr(AddrLabelExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAddrLabelExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAddrLabelExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseArraySubscriptExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2301,
   FQN="clang::RecursiveASTVisitor::TraverseArraySubscriptExpr", NM="_ZN5clang19RecursiveASTVisitor26TraverseArraySubscriptExprEPNS_18ArraySubscriptExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseArraySubscriptExprEPNS_18ArraySubscriptExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseArraySubscriptExpr(ArraySubscriptExpr /*P*/ S) {
    return TraverseArraySubscriptExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseArraySubscriptExpr(ArraySubscriptExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromArraySubscriptExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromArraySubscriptExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseArrayTypeTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2233,
   FQN="clang::RecursiveASTVisitor::TraverseArrayTypeTraitExpr", NM="_ZN5clang19RecursiveASTVisitor26TraverseArrayTypeTraitExprEPNS_18ArrayTypeTraitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseArrayTypeTraitExprEPNS_18ArrayTypeTraitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseArrayTypeTraitExpr(ArrayTypeTraitExpr /*P*/ S) {
    return TraverseArrayTypeTraitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseArrayTypeTraitExpr(ArrayTypeTraitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromArrayTypeTraitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getQueriedTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromArrayTypeTraitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // Traverse OpenCL: AsType, Convert.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAsTypeExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2446,
   FQN="clang::RecursiveASTVisitor::TraverseAsTypeExpr", NM="_ZN5clang19RecursiveASTVisitor18TraverseAsTypeExprEPNS_10AsTypeExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseAsTypeExprEPNS_10AsTypeExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAsTypeExpr(AsTypeExpr /*P*/ S) {
    return TraverseAsTypeExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseAsTypeExpr(AsTypeExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAsTypeExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAsTypeExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAtomicExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2404,
   FQN="clang::RecursiveASTVisitor::TraverseAtomicExpr", NM="_ZN5clang19RecursiveASTVisitor18TraverseAtomicExprEPNS_10AtomicExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseAtomicExprEPNS_10AtomicExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAtomicExpr(AtomicExpr /*P*/ S) {
    return TraverseAtomicExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseAtomicExpr(AtomicExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAtomicExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAtomicExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinaryOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2394,
   FQN="clang::RecursiveASTVisitor::TraverseBinaryOperator", NM="_ZN5clang19RecursiveASTVisitor22TraverseBinaryOperatorEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseBinaryOperatorEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinaryOperator(BinaryOperator /*P*/ S) {
    return TraverseBinaryOperator(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinaryOperator(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinaryOperator(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinaryOperator(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCompoundAssignOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2395,
   FQN="clang::RecursiveASTVisitor::TraverseCompoundAssignOperator", NM="_ZN5clang19RecursiveASTVisitor30TraverseCompoundAssignOperatorEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseCompoundAssignOperatorEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCompoundAssignOperator(CompoundAssignOperator /*P*/ S) {
    return TraverseCompoundAssignOperator(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCompoundAssignOperator(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBlockExpr">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION/*unreachable*/,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2303,
   FQN="clang::RecursiveASTVisitor::TraverseBlockExpr", NM="_ZN5clang19RecursiveASTVisitor17TraverseBlockExprEPNS_9BlockExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseBlockExprEPNS_9BlockExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBlockExpr(BlockExpr /*P*/ S) {
    return TraverseBlockExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBlockExpr(BlockExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBlockExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDecl(S.getBlockDecl())) {
            return false;
          }
        } while (false);
        return true;
      }
//      ;
    }
    // MANUAL_COMPILATION/*unreachable*/
//    if (ShouldVisitChildren) {
//      for (Stmt /*P*/ SubStmt : S.children()) {
//        do {
//          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
//            return false;
//          }
//        } while (false);
//      }
//    }
//    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
//      do {
//        if (!getDerived().WalkUpFromBlockExpr(S)) {
//          return false;
//        }
//      } while (false);
//    }
//    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXBindTemporaryExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2311,
   FQN="clang::RecursiveASTVisitor::TraverseCXXBindTemporaryExpr", NM="_ZN5clang19RecursiveASTVisitor28TraverseCXXBindTemporaryExprEPNS_20CXXBindTemporaryExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseCXXBindTemporaryExprEPNS_20CXXBindTemporaryExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXBindTemporaryExpr(CXXBindTemporaryExpr /*P*/ S) {
    return TraverseCXXBindTemporaryExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXBindTemporaryExpr(CXXBindTemporaryExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXBindTemporaryExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXBindTemporaryExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXBoolLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2312,
   FQN="clang::RecursiveASTVisitor::TraverseCXXBoolLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor26TraverseCXXBoolLiteralExprEPNS_18CXXBoolLiteralExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseCXXBoolLiteralExprEPNS_18CXXBoolLiteralExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXBoolLiteralExpr(CXXBoolLiteralExpr /*P*/ S) {
    return TraverseCXXBoolLiteralExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXBoolLiteralExpr(CXXBoolLiteralExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXBoolLiteralExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXBoolLiteralExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // These expressions all might take explicit template arguments.
  // We traverse those if so.  FIXME: implement these.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXConstructExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2294,
   FQN="clang::RecursiveASTVisitor::TraverseCXXConstructExpr", NM="_ZN5clang19RecursiveASTVisitor24TraverseCXXConstructExprEPNS_16CXXConstructExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseCXXConstructExprEPNS_16CXXConstructExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXConstructExpr(CXXConstructExpr /*P*/ S) {
    return TraverseCXXConstructExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXConstructExpr(CXXConstructExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXConstructExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXConstructExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXTemporaryObjectExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2245,
   FQN="clang::RecursiveASTVisitor::TraverseCXXTemporaryObjectExpr", NM="_ZN5clang19RecursiveASTVisitor30TraverseCXXTemporaryObjectExprEPNS_22CXXTemporaryObjectExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseCXXTemporaryObjectExprEPNS_22CXXTemporaryObjectExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXTemporaryObjectExpr(CXXTemporaryObjectExpr /*P*/ S) {
    return TraverseCXXTemporaryObjectExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXTemporaryObjectExpr(CXXTemporaryObjectExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXTemporaryObjectExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXTemporaryObjectExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXDefaultArgExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2313,
   FQN="clang::RecursiveASTVisitor::TraverseCXXDefaultArgExpr", NM="_ZN5clang19RecursiveASTVisitor25TraverseCXXDefaultArgExprEPNS_17CXXDefaultArgExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseCXXDefaultArgExprEPNS_17CXXDefaultArgExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXDefaultArgExpr(CXXDefaultArgExpr /*P*/ S) {
    return TraverseCXXDefaultArgExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXDefaultArgExpr(CXXDefaultArgExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDefaultArgExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDefaultArgExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXDefaultInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2314,
   FQN="clang::RecursiveASTVisitor::TraverseCXXDefaultInitExpr", NM="_ZN5clang19RecursiveASTVisitor26TraverseCXXDefaultInitExprEPNS_18CXXDefaultInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseCXXDefaultInitExprEPNS_18CXXDefaultInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXDefaultInitExpr(CXXDefaultInitExpr /*P*/ S) {
    return TraverseCXXDefaultInitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXDefaultInitExpr(CXXDefaultInitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDefaultInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDefaultInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXDeleteExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2315,
   FQN="clang::RecursiveASTVisitor::TraverseCXXDeleteExpr", NM="_ZN5clang19RecursiveASTVisitor21TraverseCXXDeleteExprEPNS_13CXXDeleteExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseCXXDeleteExprEPNS_13CXXDeleteExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXDeleteExpr(CXXDeleteExpr /*P*/ S) {
    return TraverseCXXDeleteExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXDeleteExpr(CXXDeleteExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDeleteExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDeleteExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXDependentScopeMemberExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2061,
   FQN="clang::RecursiveASTVisitor::TraverseCXXDependentScopeMemberExpr", NM="_ZN5clang19RecursiveASTVisitor35TraverseCXXDependentScopeMemberExprEPNS_27CXXDependentScopeMemberExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35TraverseCXXDependentScopeMemberExprEPNS_27CXXDependentScopeMemberExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXDependentScopeMemberExpr(CXXDependentScopeMemberExpr /*P*/ S) {
    return TraverseCXXDependentScopeMemberExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXDependentScopeMemberExpr(CXXDependentScopeMemberExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDependentScopeMemberExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(S.getQualifierLoc())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseDeclarationNameInfo(S.getMemberNameInfo())) {
            return false;
          }
        } while (false);
        if (S.hasExplicitTemplateArgs()) {
          do {
            if (!getDerived().TraverseTemplateArgumentLocsHelper(S.getTemplateArgs(), S.getNumTemplateArgs())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDependentScopeMemberExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXFoldExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2403,
   FQN="clang::RecursiveASTVisitor::TraverseCXXFoldExpr", NM="_ZN5clang19RecursiveASTVisitor19TraverseCXXFoldExprEPNS_11CXXFoldExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseCXXFoldExprEPNS_11CXXFoldExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXFoldExpr(CXXFoldExpr /*P*/ S) {
    return TraverseCXXFoldExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXFoldExpr(CXXFoldExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXFoldExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXFoldExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXInheritedCtorInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2317,
   FQN="clang::RecursiveASTVisitor::TraverseCXXInheritedCtorInitExpr", NM="_ZN5clang19RecursiveASTVisitor32TraverseCXXInheritedCtorInitExprEPNS_24CXXInheritedCtorInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseCXXInheritedCtorInitExprEPNS_24CXXInheritedCtorInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXInheritedCtorInitExpr(CXXInheritedCtorInitExpr /*P*/ S) {
    return TraverseCXXInheritedCtorInitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXInheritedCtorInitExpr(CXXInheritedCtorInitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXInheritedCtorInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXInheritedCtorInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXNewExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2188,
   FQN="clang::RecursiveASTVisitor::TraverseCXXNewExpr", NM="_ZN5clang19RecursiveASTVisitor18TraverseCXXNewExprEPNS_10CXXNewExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseCXXNewExprEPNS_10CXXNewExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXNewExpr(CXXNewExpr /*P*/ S) {
    return TraverseCXXNewExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXNewExpr(CXXNewExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXNewExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getAllocatedTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXNewExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXNoexceptExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2396,
   FQN="clang::RecursiveASTVisitor::TraverseCXXNoexceptExpr", NM="_ZN5clang19RecursiveASTVisitor23TraverseCXXNoexceptExprEPNS_15CXXNoexceptExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseCXXNoexceptExprEPNS_15CXXNoexceptExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXNoexceptExpr(CXXNoexceptExpr /*P*/ S) {
    return TraverseCXXNoexceptExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXNoexceptExpr(CXXNoexceptExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXNoexceptExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXNoexceptExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXNullPtrLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2318,
   FQN="clang::RecursiveASTVisitor::TraverseCXXNullPtrLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor29TraverseCXXNullPtrLiteralExprEPNS_21CXXNullPtrLiteralExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseCXXNullPtrLiteralExprEPNS_21CXXNullPtrLiteralExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXNullPtrLiteralExpr(CXXNullPtrLiteralExpr /*P*/ S) {
    return TraverseCXXNullPtrLiteralExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXNullPtrLiteralExpr(CXXNullPtrLiteralExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXNullPtrLiteralExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXNullPtrLiteralExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXPseudoDestructorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2320,
   FQN="clang::RecursiveASTVisitor::TraverseCXXPseudoDestructorExpr", NM="_ZN5clang19RecursiveASTVisitor31TraverseCXXPseudoDestructorExprEPNS_23CXXPseudoDestructorExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseCXXPseudoDestructorExprEPNS_23CXXPseudoDestructorExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXPseudoDestructorExpr(CXXPseudoDestructorExpr /*P*/ S) {
    return TraverseCXXPseudoDestructorExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXPseudoDestructorExpr(CXXPseudoDestructorExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXPseudoDestructorExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(S.getQualifierLoc())) {
            return false;
          }
        } while (false);
        {
          TypeSourceInfo /*P*/ ScopeInfo = S.getScopeTypeInfo();
          if ((ScopeInfo != null)) {
            do {
              if (!getDerived().TraverseTypeLoc(ScopeInfo.getTypeLoc())) {
                return false;
              }
            } while (false);
          }
        }
        {
          TypeSourceInfo /*P*/ DestroyedTypeInfo = S.getDestroyedTypeInfo();
          if ((DestroyedTypeInfo != null)) {
            do {
              if (!getDerived().TraverseTypeLoc(DestroyedTypeInfo.getTypeLoc())) {
                return false;
              }
            } while (false);
          }
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXPseudoDestructorExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXScalarValueInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2182,
   FQN="clang::RecursiveASTVisitor::TraverseCXXScalarValueInitExpr", NM="_ZN5clang19RecursiveASTVisitor30TraverseCXXScalarValueInitExprEPNS_22CXXScalarValueInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseCXXScalarValueInitExprEPNS_22CXXScalarValueInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXScalarValueInitExpr(CXXScalarValueInitExpr /*P*/ S) {
    return TraverseCXXScalarValueInitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXScalarValueInitExpr(CXXScalarValueInitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXScalarValueInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXScalarValueInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXStdInitializerListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2319,
   FQN="clang::RecursiveASTVisitor::TraverseCXXStdInitializerListExpr", NM="_ZN5clang19RecursiveASTVisitor33TraverseCXXStdInitializerListExprEPNS_25CXXStdInitializerListExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33TraverseCXXStdInitializerListExprEPNS_25CXXStdInitializerListExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXStdInitializerListExpr(CXXStdInitializerListExpr /*P*/ S) {
    return TraverseCXXStdInitializerListExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXStdInitializerListExpr(CXXStdInitializerListExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXStdInitializerListExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXStdInitializerListExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXThisExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2327,
   FQN="clang::RecursiveASTVisitor::TraverseCXXThisExpr", NM="_ZN5clang19RecursiveASTVisitor19TraverseCXXThisExprEPNS_11CXXThisExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseCXXThisExprEPNS_11CXXThisExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXThisExpr(CXXThisExpr /*P*/ S) {
    return TraverseCXXThisExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXThisExpr(CXXThisExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXThisExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXThisExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXThrowExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2328,
   FQN="clang::RecursiveASTVisitor::TraverseCXXThrowExpr", NM="_ZN5clang19RecursiveASTVisitor20TraverseCXXThrowExprEPNS_12CXXThrowExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseCXXThrowExprEPNS_12CXXThrowExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXThrowExpr(CXXThrowExpr /*P*/ S) {
    return TraverseCXXThrowExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXThrowExpr(CXXThrowExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXThrowExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXThrowExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXTypeidExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2208,
   FQN="clang::RecursiveASTVisitor::TraverseCXXTypeidExpr", NM="_ZN5clang19RecursiveASTVisitor21TraverseCXXTypeidExprEPNS_13CXXTypeidExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseCXXTypeidExprEPNS_13CXXTypeidExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXTypeidExpr(CXXTypeidExpr /*P*/ S) {
    return TraverseCXXTypeidExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXTypeidExpr(CXXTypeidExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXTypeidExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (S.isTypeOperand()) {
          do {
            if (!getDerived().TraverseTypeLoc(S.getTypeOperandSourceInfo().getTypeLoc())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXTypeidExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXUnresolvedConstructExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2287,
   FQN="clang::RecursiveASTVisitor::TraverseCXXUnresolvedConstructExpr", NM="_ZN5clang19RecursiveASTVisitor34TraverseCXXUnresolvedConstructExprEPNS_26CXXUnresolvedConstructExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34TraverseCXXUnresolvedConstructExprEPNS_26CXXUnresolvedConstructExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXUnresolvedConstructExpr(CXXUnresolvedConstructExpr /*P*/ S) {
    return TraverseCXXUnresolvedConstructExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXUnresolvedConstructExpr(CXXUnresolvedConstructExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXUnresolvedConstructExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXUnresolvedConstructExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXUuidofExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2221,
   FQN="clang::RecursiveASTVisitor::TraverseCXXUuidofExpr", NM="_ZN5clang19RecursiveASTVisitor21TraverseCXXUuidofExprEPNS_13CXXUuidofExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseCXXUuidofExprEPNS_13CXXUuidofExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXUuidofExpr(CXXUuidofExpr /*P*/ S) {
    return TraverseCXXUuidofExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXUuidofExpr(CXXUuidofExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXUuidofExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (S.isTypeOperand()) {
          do {
            if (!getDerived().TraverseTypeLoc(S.getTypeOperandSourceInfo().getTypeLoc())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXUuidofExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2295,
   FQN="clang::RecursiveASTVisitor::TraverseCallExpr", NM="_ZN5clang19RecursiveASTVisitor16TraverseCallExprEPNS_8CallExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseCallExprEPNS_8CallExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCallExpr(CallExpr /*P*/ S) {
    return TraverseCallExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCallExpr(CallExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCallExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCallExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCUDAKernelCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2387,
   FQN="clang::RecursiveASTVisitor::TraverseCUDAKernelCallExpr", NM="_ZN5clang19RecursiveASTVisitor26TraverseCUDAKernelCallExprEPNS_18CUDAKernelCallExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseCUDAKernelCallExprEPNS_18CUDAKernelCallExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCUDAKernelCallExpr(CUDAKernelCallExpr /*P*/ S) {
    return TraverseCUDAKernelCallExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCUDAKernelCallExpr(CUDAKernelCallExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCUDAKernelCallExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCUDAKernelCallExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXMemberCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2296,
   FQN="clang::RecursiveASTVisitor::TraverseCXXMemberCallExpr", NM="_ZN5clang19RecursiveASTVisitor25TraverseCXXMemberCallExprEPNS_17CXXMemberCallExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseCXXMemberCallExprEPNS_17CXXMemberCallExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXMemberCallExpr(CXXMemberCallExpr /*P*/ S) {
    return TraverseCXXMemberCallExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXMemberCallExpr(CXXMemberCallExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXMemberCallExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXMemberCallExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXOperatorCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2384,
   FQN="clang::RecursiveASTVisitor::TraverseCXXOperatorCallExpr", NM="_ZN5clang19RecursiveASTVisitor27TraverseCXXOperatorCallExprEPNS_19CXXOperatorCallExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseCXXOperatorCallExprEPNS_19CXXOperatorCallExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXOperatorCallExpr(CXXOperatorCallExpr /*P*/ S) {
    return TraverseCXXOperatorCallExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXOperatorCallExpr(CXXOperatorCallExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXOperatorCallExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXOperatorCallExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUserDefinedLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2329,
   FQN="clang::RecursiveASTVisitor::TraverseUserDefinedLiteral", NM="_ZN5clang19RecursiveASTVisitor26TraverseUserDefinedLiteralEPNS_18UserDefinedLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseUserDefinedLiteralEPNS_18UserDefinedLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUserDefinedLiteral(UserDefinedLiteral /*P*/ S) {
    return TraverseUserDefinedLiteral(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUserDefinedLiteral(UserDefinedLiteral /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUserDefinedLiteral(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUserDefinedLiteral(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCStyleCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2099,
   FQN="clang::RecursiveASTVisitor::TraverseCStyleCastExpr", NM="_ZN5clang19RecursiveASTVisitor22TraverseCStyleCastExprEPNS_14CStyleCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseCStyleCastExprEPNS_14CStyleCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCStyleCastExpr(CStyleCastExpr /*P*/ S) {
    return TraverseCStyleCastExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCStyleCastExpr(CStyleCastExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCStyleCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeInfoAsWritten().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCStyleCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXFunctionalCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2103,
   FQN="clang::RecursiveASTVisitor::TraverseCXXFunctionalCastExpr", NM="_ZN5clang19RecursiveASTVisitor29TraverseCXXFunctionalCastExprEPNS_21CXXFunctionalCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseCXXFunctionalCastExprEPNS_21CXXFunctionalCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXFunctionalCastExpr(CXXFunctionalCastExpr /*P*/ S) {
    return TraverseCXXFunctionalCastExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXFunctionalCastExpr(CXXFunctionalCastExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXFunctionalCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeInfoAsWritten().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXFunctionalCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXConstCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2107,
   FQN="clang::RecursiveASTVisitor::TraverseCXXConstCastExpr", NM="_ZN5clang19RecursiveASTVisitor24TraverseCXXConstCastExprEPNS_16CXXConstCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseCXXConstCastExprEPNS_16CXXConstCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXConstCastExpr(CXXConstCastExpr /*P*/ S) {
    return TraverseCXXConstCastExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXConstCastExpr(CXXConstCastExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXConstCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeInfoAsWritten().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXConstCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXDynamicCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2111,
   FQN="clang::RecursiveASTVisitor::TraverseCXXDynamicCastExpr", NM="_ZN5clang19RecursiveASTVisitor26TraverseCXXDynamicCastExprEPNS_18CXXDynamicCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseCXXDynamicCastExprEPNS_18CXXDynamicCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXDynamicCastExpr(CXXDynamicCastExpr /*P*/ S) {
    return TraverseCXXDynamicCastExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXDynamicCastExpr(CXXDynamicCastExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDynamicCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeInfoAsWritten().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDynamicCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXReinterpretCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2115,
   FQN="clang::RecursiveASTVisitor::TraverseCXXReinterpretCastExpr", NM="_ZN5clang19RecursiveASTVisitor30TraverseCXXReinterpretCastExprEPNS_22CXXReinterpretCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseCXXReinterpretCastExprEPNS_22CXXReinterpretCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXReinterpretCastExpr(CXXReinterpretCastExpr /*P*/ S) {
    return TraverseCXXReinterpretCastExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXReinterpretCastExpr(CXXReinterpretCastExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXReinterpretCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeInfoAsWritten().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXReinterpretCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXStaticCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2119,
   FQN="clang::RecursiveASTVisitor::TraverseCXXStaticCastExpr", NM="_ZN5clang19RecursiveASTVisitor25TraverseCXXStaticCastExprEPNS_17CXXStaticCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseCXXStaticCastExprEPNS_17CXXStaticCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXStaticCastExpr(CXXStaticCastExpr /*P*/ S) {
    return TraverseCXXStaticCastExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCXXStaticCastExpr(CXXStaticCastExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXStaticCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeInfoAsWritten().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXStaticCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCBridgedCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2352,
   FQN="clang::RecursiveASTVisitor::TraverseObjCBridgedCastExpr", NM="_ZN5clang19RecursiveASTVisitor27TraverseObjCBridgedCastExprEPNS_19ObjCBridgedCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseObjCBridgedCastExprEPNS_19ObjCBridgedCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCBridgedCastExpr(ObjCBridgedCastExpr /*P*/ S) {
    return TraverseObjCBridgedCastExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCBridgedCastExpr(ObjCBridgedCastExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCBridgedCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeInfoAsWritten().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCBridgedCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseImplicitCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2093,
   FQN="clang::RecursiveASTVisitor::TraverseImplicitCastExpr", NM="_ZN5clang19RecursiveASTVisitor24TraverseImplicitCastExprEPNS_16ImplicitCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseImplicitCastExprEPNS_16ImplicitCastExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseImplicitCastExpr(ImplicitCastExpr /*P*/ S) {
    return TraverseImplicitCastExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseImplicitCastExpr(ImplicitCastExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImplicitCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImplicitCastExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCharacterLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2436,
   FQN="clang::RecursiveASTVisitor::TraverseCharacterLiteral", NM="_ZN5clang19RecursiveASTVisitor24TraverseCharacterLiteralEPNS_16CharacterLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseCharacterLiteralEPNS_16CharacterLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCharacterLiteral(CharacterLiteral /*P*/ S) {
    return TraverseCharacterLiteral(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCharacterLiteral(CharacterLiteral /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCharacterLiteral(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCharacterLiteral(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseChooseExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2307,
   FQN="clang::RecursiveASTVisitor::TraverseChooseExpr", NM="_ZN5clang19RecursiveASTVisitor18TraverseChooseExprEPNS_10ChooseExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseChooseExprEPNS_10ChooseExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseChooseExpr(ChooseExpr /*P*/ S) {
    return TraverseChooseExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseChooseExpr(ChooseExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromChooseExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromChooseExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCompoundLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2308,
   FQN="clang::RecursiveASTVisitor::TraverseCompoundLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor27TraverseCompoundLiteralExprEPNS_19CompoundLiteralExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseCompoundLiteralExprEPNS_19CompoundLiteralExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCompoundLiteralExpr(CompoundLiteralExpr /*P*/ S) {
    return TraverseCompoundLiteralExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCompoundLiteralExpr(CompoundLiteralExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCompoundLiteralExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCompoundLiteralExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConvertVectorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2360,
   FQN="clang::RecursiveASTVisitor::TraverseConvertVectorExpr", NM="_ZN5clang19RecursiveASTVisitor25TraverseConvertVectorExprEPNS_17ConvertVectorExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseConvertVectorExprEPNS_17ConvertVectorExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConvertVectorExpr(ConvertVectorExpr /*P*/ S) {
    return TraverseConvertVectorExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseConvertVectorExpr(ConvertVectorExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromConvertVectorExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromConvertVectorExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCoawaitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2421,
   FQN="clang::RecursiveASTVisitor::TraverseCoawaitExpr", NM="_ZN5clang19RecursiveASTVisitor19TraverseCoawaitExprEPNS_11CoawaitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseCoawaitExprEPNS_11CoawaitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCoawaitExpr(CoawaitExpr /*P*/ S) {
    return TraverseCoawaitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCoawaitExpr(CoawaitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCoawaitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (!getDerived().shouldVisitImplicitCode()) {
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getOperand())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getOperand()))))) {
              return false;
            }
          } while (false);
          ShouldVisitChildren = false;
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCoawaitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCoyieldExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2427,
   FQN="clang::RecursiveASTVisitor::TraverseCoyieldExpr", NM="_ZN5clang19RecursiveASTVisitor19TraverseCoyieldExprEPNS_11CoyieldExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseCoyieldExprEPNS_11CoyieldExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCoyieldExpr(CoyieldExpr /*P*/ S) {
    return TraverseCoyieldExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCoyieldExpr(CoyieldExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCoyieldExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (!getDerived().shouldVisitImplicitCode()) {
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getOperand())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getOperand()))))) {
              return false;
            }
          } while (false);
          ShouldVisitChildren = false;
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCoyieldExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDeclRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2070,
   FQN="clang::RecursiveASTVisitor::TraverseDeclRefExpr", NM="_ZN5clang19RecursiveASTVisitor19TraverseDeclRefExprEPNS_11DeclRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseDeclRefExprEPNS_11DeclRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDeclRefExpr(DeclRefExpr /*P*/ S) {
    return TraverseDeclRefExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseDeclRefExpr(DeclRefExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDeclRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(S.getQualifierLoc())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseDeclarationNameInfo(S.getNameInfo())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseTemplateArgumentLocsHelper(S.getTemplateArgs(), S.getNumTemplateArgs())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDeclRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDependentScopeDeclRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2077,
   FQN="clang::RecursiveASTVisitor::TraverseDependentScopeDeclRefExpr", NM="_ZN5clang19RecursiveASTVisitor33TraverseDependentScopeDeclRefExprEPNS_25DependentScopeDeclRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33TraverseDependentScopeDeclRefExprEPNS_25DependentScopeDeclRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDependentScopeDeclRefExpr(DependentScopeDeclRefExpr /*P*/ S) {
    return TraverseDependentScopeDeclRefExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseDependentScopeDeclRefExpr(DependentScopeDeclRefExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentScopeDeclRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(S.getQualifierLoc())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseDeclarationNameInfo(S.getNameInfo())) {
            return false;
          }
        } while (false);
        if (S.hasExplicitTemplateArgs()) {
          do {
            if (!getDerived().TraverseTemplateArgumentLocsHelper(S.getTemplateArgs(), S.getNumTemplateArgs())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentScopeDeclRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDesignatedInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2330,
   FQN="clang::RecursiveASTVisitor::TraverseDesignatedInitExpr", NM="_ZN5clang19RecursiveASTVisitor26TraverseDesignatedInitExprEPNS_18DesignatedInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseDesignatedInitExprEPNS_18DesignatedInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDesignatedInitExpr(DesignatedInitExpr /*P*/ S) {
    return TraverseDesignatedInitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseDesignatedInitExpr(DesignatedInitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDesignatedInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDesignatedInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDesignatedInitUpdateExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2331,
   FQN="clang::RecursiveASTVisitor::TraverseDesignatedInitUpdateExpr", NM="_ZN5clang19RecursiveASTVisitor32TraverseDesignatedInitUpdateExprEPNS_24DesignatedInitUpdateExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseDesignatedInitUpdateExprEPNS_24DesignatedInitUpdateExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDesignatedInitUpdateExpr(DesignatedInitUpdateExpr /*P*/ S) {
    return TraverseDesignatedInitUpdateExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseDesignatedInitUpdateExpr(DesignatedInitUpdateExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDesignatedInitUpdateExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDesignatedInitUpdateExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseExprWithCleanups">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2316,
   FQN="clang::RecursiveASTVisitor::TraverseExprWithCleanups", NM="_ZN5clang19RecursiveASTVisitor24TraverseExprWithCleanupsEPNS_16ExprWithCleanupsEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseExprWithCleanupsEPNS_16ExprWithCleanupsEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseExprWithCleanups(ExprWithCleanups /*P*/ S) {
    return TraverseExprWithCleanups(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseExprWithCleanups(ExprWithCleanups /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExprWithCleanups(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExprWithCleanups(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseExpressionTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2237,
   FQN="clang::RecursiveASTVisitor::TraverseExpressionTraitExpr", NM="_ZN5clang19RecursiveASTVisitor27TraverseExpressionTraitExprEPNS_19ExpressionTraitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseExpressionTraitExprEPNS_19ExpressionTraitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseExpressionTraitExpr(ExpressionTraitExpr /*P*/ S) {
    return TraverseExpressionTraitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseExpressionTraitExpr(ExpressionTraitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExpressionTraitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getQueriedExpression())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getQueriedExpression()))))) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExpressionTraitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseExtVectorElementExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2332,
   FQN="clang::RecursiveASTVisitor::TraverseExtVectorElementExpr", NM="_ZN5clang19RecursiveASTVisitor28TraverseExtVectorElementExprEPNS_20ExtVectorElementExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseExtVectorElementExprEPNS_20ExtVectorElementExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseExtVectorElementExpr(ExtVectorElementExpr /*P*/ S) {
    return TraverseExtVectorElementExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseExtVectorElementExpr(ExtVectorElementExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExtVectorElementExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExtVectorElementExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFloatingLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2437,
   FQN="clang::RecursiveASTVisitor::TraverseFloatingLiteral", NM="_ZN5clang19RecursiveASTVisitor23TraverseFloatingLiteralEPNS_15FloatingLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseFloatingLiteralEPNS_15FloatingLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFloatingLiteral(FloatingLiteral /*P*/ S) {
    return TraverseFloatingLiteral(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseFloatingLiteral(FloatingLiteral /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFloatingLiteral(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFloatingLiteral(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFunctionParmPackExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2401,
   FQN="clang::RecursiveASTVisitor::TraverseFunctionParmPackExpr", NM="_ZN5clang19RecursiveASTVisitor28TraverseFunctionParmPackExprEPNS_20FunctionParmPackExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseFunctionParmPackExprEPNS_20FunctionParmPackExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFunctionParmPackExpr(FunctionParmPackExpr /*P*/ S) {
    return TraverseFunctionParmPackExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseFunctionParmPackExpr(FunctionParmPackExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionParmPackExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionParmPackExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseGNUNullExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2333,
   FQN="clang::RecursiveASTVisitor::TraverseGNUNullExpr", NM="_ZN5clang19RecursiveASTVisitor19TraverseGNUNullExprEPNS_11GNUNullExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseGNUNullExprEPNS_11GNUNullExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseGNUNullExpr(GNUNullExpr /*P*/ S) {
    return TraverseGNUNullExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseGNUNullExpr(GNUNullExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromGNUNullExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromGNUNullExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // GenericSelectionExpr is a special case because the types and expressions
  // are interleaved.  We also need to watch out for null types (default
  // generic associations).
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseGenericSelectionExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2157,
   FQN="clang::RecursiveASTVisitor::TraverseGenericSelectionExpr", NM="_ZN5clang19RecursiveASTVisitor28TraverseGenericSelectionExprEPNS_20GenericSelectionExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseGenericSelectionExprEPNS_20GenericSelectionExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseGenericSelectionExpr(GenericSelectionExpr /*P*/ S) {
    return TraverseGenericSelectionExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseGenericSelectionExpr(GenericSelectionExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromGenericSelectionExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseStmt(S.getControllingExpr())) {
            return false;
          }
        } while (false);
        for (/*uint*/int i = 0; i != S.getNumAssocs(); ++i) {
          {
            TypeSourceInfo /*P*/ TS = S.getAssocTypeSourceInfo(i);
            if ((TS != null)) {
              do {
                if (!getDerived().TraverseTypeLoc(TS.getTypeLoc())) {
                  return false;
                }
              } while (false);
            }
          }
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getAssocExpr(i))), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getAssocExpr(i)))))) {
              return false;
            }
          } while (false);
        }
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromGenericSelectionExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseImaginaryLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2438,
   FQN="clang::RecursiveASTVisitor::TraverseImaginaryLiteral", NM="_ZN5clang19RecursiveASTVisitor24TraverseImaginaryLiteralEPNS_16ImaginaryLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseImaginaryLiteralEPNS_16ImaginaryLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseImaginaryLiteral(ImaginaryLiteral /*P*/ S) {
    return TraverseImaginaryLiteral(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseImaginaryLiteral(ImaginaryLiteral /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImaginaryLiteral(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImaginaryLiteral(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseImplicitValueInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2334,
   FQN="clang::RecursiveASTVisitor::TraverseImplicitValueInitExpr", NM="_ZN5clang19RecursiveASTVisitor29TraverseImplicitValueInitExprEPNS_21ImplicitValueInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseImplicitValueInitExprEPNS_21ImplicitValueInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseImplicitValueInitExpr(ImplicitValueInitExpr /*P*/ S) {
    return TraverseImplicitValueInitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseImplicitValueInitExpr(ImplicitValueInitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImplicitValueInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImplicitValueInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // This method is called once for each pair of syntactic and semantic
  // InitListExpr, and it traverses the subtrees defined by the two forms. This
  // may cause some of the children to be visited twice, if they appear both in
  // the syntactic and the semantic form.
  //
  // There is no guarantee about which form \p S takes when this method is called.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseInitListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2146,
   FQN="clang::RecursiveASTVisitor::TraverseInitListExpr", NM="_ZN5clang19RecursiveASTVisitor20TraverseInitListExprEPNS_12InitListExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseInitListExprEPNS_12InitListExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseInitListExpr(InitListExpr /*P*/ S) {
    return TraverseInitListExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseInitListExpr(InitListExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromInitListExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseSynOrSemInitListExpr(S.isSemanticForm() ? S.getSyntacticForm() : S, Queue)) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseSynOrSemInitListExpr(S.isSemanticForm() ? S : S.getSemanticForm(), Queue)) {
            return false;
          }
        } while (false);
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromInitListExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // These literals (all of them) do not need any action.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIntegerLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2435,
   FQN="clang::RecursiveASTVisitor::TraverseIntegerLiteral", NM="_ZN5clang19RecursiveASTVisitor22TraverseIntegerLiteralEPNS_14IntegerLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseIntegerLiteralEPNS_14IntegerLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIntegerLiteral(IntegerLiteral /*P*/ S) {
    return TraverseIntegerLiteral(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseIntegerLiteral(IntegerLiteral /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIntegerLiteral(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIntegerLiteral(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // Walk only the visible parts of lambda expressions.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLambdaExpr">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2251,
   FQN="clang::RecursiveASTVisitor::TraverseLambdaExpr", NM="_ZN5clang19RecursiveASTVisitor18TraverseLambdaExprEPNS_10LambdaExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseLambdaExprEPNS_10LambdaExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLambdaExpr(LambdaExpr /*P*/ S) {
    return TraverseLambdaExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseLambdaExpr(LambdaExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLambdaExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        for (type$ptr<LambdaCapture> C = $tryClone(S.explicit_capture_begin()), /*P*/ CEnd = $tryClone(S.explicit_capture_end()); $noteq_ptr(C, CEnd); C.$preInc()) {
          do {
            if (!getDerived().TraverseLambdaCapture(S, C.$star())) {
              return false;
            }
          } while (false);
        }
        TypeLoc TL = S.getCallOperator().getTypeSourceInfo().getTypeLoc();
        FunctionProtoTypeLoc Proto = TL.castAs(FunctionProtoTypeLoc.class);
        if (S.hasExplicitParameters() && S.hasExplicitResultType()) {
          do {
            if (!getDerived().TraverseTypeLoc(TL)) {
              return false;
            }
          } while (false);
        } else {
          if (S.hasExplicitParameters()) {
            for (/*uint*/int I = 0, N = Proto.getNumParams(); I != N; ++I) {
              do {
                if (!getDerived().TraverseDecl(Proto.getParam(I))) {
                  return false;
                }
              } while (false);
            }
          } else if (S.hasExplicitResultType()) {
            do {
              if (!getDerived().TraverseTypeLoc(Proto.getReturnLoc())) {
                return false;
              }
            } while (false);
          }
          /*const*/ FunctionProtoType /*P*/ T = Proto.getTypePtr();
          for (final /*const*/ QualType /*&*/ E : T.exceptions()) {
            do {
              if (!getDerived().TraverseType(E)) {
                return false;
              }
            } while (false);
          }
          {
            Expr /*P*/ NE = T.getNoexceptExpr();
            if ((NE != null)) {
              do {
                if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(NE)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(NE))))) {
                  return false;
                }
              } while (false);
            }
          }
        }
        ReturnValue = (has_overridden_traverse_with_queue_method("TraverseLambdaBody") ? ((Derived)(Native.$star(this))).TraverseLambdaBody(((/*static_cast*/LambdaExpr /*P*/ )(S)), Queue) : getDerived().TraverseLambdaBody(((/*static_cast*/LambdaExpr /*P*/ )(S))));
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLambdaExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSPropertyRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2215,
   FQN="clang::RecursiveASTVisitor::TraverseMSPropertyRefExpr", NM="_ZN5clang19RecursiveASTVisitor25TraverseMSPropertyRefExprEPNS_17MSPropertyRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseMSPropertyRefExprEPNS_17MSPropertyRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSPropertyRefExpr(MSPropertyRefExpr /*P*/ S) {
    return TraverseMSPropertyRefExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseMSPropertyRefExpr(MSPropertyRefExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSPropertyRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(S.getQualifierLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSPropertyRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSPropertySubscriptExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2219,
   FQN="clang::RecursiveASTVisitor::TraverseMSPropertySubscriptExpr", NM="_ZN5clang19RecursiveASTVisitor31TraverseMSPropertySubscriptExprEPNS_23MSPropertySubscriptExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseMSPropertySubscriptExprEPNS_23MSPropertySubscriptExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSPropertySubscriptExpr(MSPropertySubscriptExpr /*P*/ S) {
    return TraverseMSPropertySubscriptExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseMSPropertySubscriptExpr(MSPropertySubscriptExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSPropertySubscriptExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSPropertySubscriptExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMaterializeTemporaryExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2402,
   FQN="clang::RecursiveASTVisitor::TraverseMaterializeTemporaryExpr", NM="_ZN5clang19RecursiveASTVisitor32TraverseMaterializeTemporaryExprEPNS_24MaterializeTemporaryExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseMaterializeTemporaryExprEPNS_24MaterializeTemporaryExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMaterializeTemporaryExpr(MaterializeTemporaryExpr /*P*/ S) {
    return TraverseMaterializeTemporaryExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseMaterializeTemporaryExpr(MaterializeTemporaryExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMaterializeTemporaryExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMaterializeTemporaryExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMemberExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2086,
   FQN="clang::RecursiveASTVisitor::TraverseMemberExpr", NM="_ZN5clang19RecursiveASTVisitor18TraverseMemberExprEPNS_10MemberExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseMemberExprEPNS_10MemberExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMemberExpr(MemberExpr /*P*/ S) {
    return TraverseMemberExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseMemberExpr(MemberExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMemberExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(S.getQualifierLoc())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseDeclarationNameInfo(S.getMemberNameInfo())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseTemplateArgumentLocsHelper(S.getTemplateArgs(), S.getNumTemplateArgs())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMemberExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNoInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2335,
   FQN="clang::RecursiveASTVisitor::TraverseNoInitExpr", NM="_ZN5clang19RecursiveASTVisitor18TraverseNoInitExprEPNS_10NoInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseNoInitExprEPNS_10NoInitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNoInitExpr(NoInitExpr /*P*/ S) {
    return TraverseNoInitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseNoInitExpr(NoInitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNoInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNoInitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPArraySectionExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2302,
   FQN="clang::RecursiveASTVisitor::TraverseOMPArraySectionExpr", NM="_ZN5clang19RecursiveASTVisitor27TraverseOMPArraySectionExprEPNS_19OMPArraySectionExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseOMPArraySectionExprEPNS_19OMPArraySectionExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPArraySectionExpr(OMPArraySectionExpr /*P*/ S) {
    return TraverseOMPArraySectionExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPArraySectionExpr(OMPArraySectionExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPArraySectionExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPArraySectionExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCArrayLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2442,
   FQN="clang::RecursiveASTVisitor::TraverseObjCArrayLiteral", NM="_ZN5clang19RecursiveASTVisitor24TraverseObjCArrayLiteralEPNS_16ObjCArrayLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseObjCArrayLiteralEPNS_16ObjCArrayLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCArrayLiteral(ObjCArrayLiteral /*P*/ S) {
    return TraverseObjCArrayLiteral(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCArrayLiteral(ObjCArrayLiteral /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCArrayLiteral(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCArrayLiteral(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCAvailabilityCheckExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2355,
   FQN="clang::RecursiveASTVisitor::TraverseObjCAvailabilityCheckExpr", NM="_ZN5clang19RecursiveASTVisitor33TraverseObjCAvailabilityCheckExprEPNS_25ObjCAvailabilityCheckExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33TraverseObjCAvailabilityCheckExprEPNS_25ObjCAvailabilityCheckExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCAvailabilityCheckExpr(ObjCAvailabilityCheckExpr /*P*/ S) {
    return TraverseObjCAvailabilityCheckExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCAvailabilityCheckExpr(ObjCAvailabilityCheckExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAvailabilityCheckExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAvailabilityCheckExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCBoolLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2336,
   FQN="clang::RecursiveASTVisitor::TraverseObjCBoolLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor27TraverseObjCBoolLiteralExprEPNS_19ObjCBoolLiteralExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseObjCBoolLiteralExprEPNS_19ObjCBoolLiteralExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCBoolLiteralExpr(ObjCBoolLiteralExpr /*P*/ S) {
    return TraverseObjCBoolLiteralExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCBoolLiteralExpr(ObjCBoolLiteralExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCBoolLiteralExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCBoolLiteralExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCBoxedExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2441,
   FQN="clang::RecursiveASTVisitor::TraverseObjCBoxedExpr", NM="_ZN5clang19RecursiveASTVisitor21TraverseObjCBoxedExprEPNS_13ObjCBoxedExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseObjCBoxedExprEPNS_13ObjCBoxedExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCBoxedExpr(ObjCBoxedExpr /*P*/ S) {
    return TraverseObjCBoxedExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCBoxedExpr(ObjCBoxedExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCBoxedExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCBoxedExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCDictionaryLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2443,
   FQN="clang::RecursiveASTVisitor::TraverseObjCDictionaryLiteral", NM="_ZN5clang19RecursiveASTVisitor29TraverseObjCDictionaryLiteralEPNS_21ObjCDictionaryLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseObjCDictionaryLiteralEPNS_21ObjCDictionaryLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCDictionaryLiteral(ObjCDictionaryLiteral /*P*/ S) {
    return TraverseObjCDictionaryLiteral(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCDictionaryLiteral(ObjCDictionaryLiteral /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCDictionaryLiteral(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCDictionaryLiteral(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCEncodeExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2337,
   FQN="clang::RecursiveASTVisitor::TraverseObjCEncodeExpr", NM="_ZN5clang19RecursiveASTVisitor22TraverseObjCEncodeExprEPNS_14ObjCEncodeExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseObjCEncodeExprEPNS_14ObjCEncodeExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCEncodeExpr(ObjCEncodeExpr /*P*/ S) {
    return TraverseObjCEncodeExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCEncodeExpr(ObjCEncodeExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCEncodeExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        {
          TypeSourceInfo /*P*/ TInfo = S.getEncodedTypeSourceInfo();
          if ((TInfo != null)) {
            do {
              if (!getDerived().TraverseTypeLoc(TInfo.getTypeLoc())) {
                return false;
              }
            } while (false);
          }
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCEncodeExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCIndirectCopyRestoreExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2351,
   FQN="clang::RecursiveASTVisitor::TraverseObjCIndirectCopyRestoreExpr", NM="_ZN5clang19RecursiveASTVisitor35TraverseObjCIndirectCopyRestoreExprEPNS_27ObjCIndirectCopyRestoreExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35TraverseObjCIndirectCopyRestoreExprEPNS_27ObjCIndirectCopyRestoreExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCIndirectCopyRestoreExpr(ObjCIndirectCopyRestoreExpr /*P*/ S) {
    return TraverseObjCIndirectCopyRestoreExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCIndirectCopyRestoreExpr(ObjCIndirectCopyRestoreExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCIndirectCopyRestoreExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCIndirectCopyRestoreExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCIsaExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2341,
   FQN="clang::RecursiveASTVisitor::TraverseObjCIsaExpr", NM="_ZN5clang19RecursiveASTVisitor19TraverseObjCIsaExprEPNS_11ObjCIsaExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseObjCIsaExprEPNS_11ObjCIsaExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCIsaExpr(ObjCIsaExpr /*P*/ S) {
    return TraverseObjCIsaExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCIsaExpr(ObjCIsaExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCIsaExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCIsaExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCIvarRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2342,
   FQN="clang::RecursiveASTVisitor::TraverseObjCIvarRefExpr", NM="_ZN5clang19RecursiveASTVisitor23TraverseObjCIvarRefExprEPNS_15ObjCIvarRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseObjCIvarRefExprEPNS_15ObjCIvarRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCIvarRefExpr(ObjCIvarRefExpr /*P*/ S) {
    return TraverseObjCIvarRefExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCIvarRefExpr(ObjCIvarRefExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCIvarRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCIvarRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCMessageExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2343,
   FQN="clang::RecursiveASTVisitor::TraverseObjCMessageExpr", NM="_ZN5clang19RecursiveASTVisitor23TraverseObjCMessageExprEPNS_15ObjCMessageExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseObjCMessageExprEPNS_15ObjCMessageExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCMessageExpr(ObjCMessageExpr /*P*/ S) {
    return TraverseObjCMessageExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCMessageExpr(ObjCMessageExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCMessageExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        {
          TypeSourceInfo /*P*/ TInfo = S.getClassReceiverTypeInfo();
          if ((TInfo != null)) {
            do {
              if (!getDerived().TraverseTypeLoc(TInfo.getTypeLoc())) {
                return false;
              }
            } while (false);
          }
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCMessageExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCPropertyRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2347,
   FQN="clang::RecursiveASTVisitor::TraverseObjCPropertyRefExpr", NM="_ZN5clang19RecursiveASTVisitor27TraverseObjCPropertyRefExprEPNS_19ObjCPropertyRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseObjCPropertyRefExprEPNS_19ObjCPropertyRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCPropertyRefExpr(ObjCPropertyRefExpr /*P*/ S) {
    return TraverseObjCPropertyRefExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCPropertyRefExpr(ObjCPropertyRefExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCPropertyRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCPropertyRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCProtocolExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2349,
   FQN="clang::RecursiveASTVisitor::TraverseObjCProtocolExpr", NM="_ZN5clang19RecursiveASTVisitor24TraverseObjCProtocolExprEPNS_16ObjCProtocolExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseObjCProtocolExprEPNS_16ObjCProtocolExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCProtocolExpr(ObjCProtocolExpr /*P*/ S) {
    return TraverseObjCProtocolExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCProtocolExpr(ObjCProtocolExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCProtocolExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCProtocolExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCSelectorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2350,
   FQN="clang::RecursiveASTVisitor::TraverseObjCSelectorExpr", NM="_ZN5clang19RecursiveASTVisitor24TraverseObjCSelectorExprEPNS_16ObjCSelectorExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseObjCSelectorExprEPNS_16ObjCSelectorExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCSelectorExpr(ObjCSelectorExpr /*P*/ S) {
    return TraverseObjCSelectorExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCSelectorExpr(ObjCSelectorExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCSelectorExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCSelectorExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCStringLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2440,
   FQN="clang::RecursiveASTVisitor::TraverseObjCStringLiteral", NM="_ZN5clang19RecursiveASTVisitor25TraverseObjCStringLiteralEPNS_17ObjCStringLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseObjCStringLiteralEPNS_17ObjCStringLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCStringLiteral(ObjCStringLiteral /*P*/ S) {
    return TraverseObjCStringLiteral(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCStringLiteral(ObjCStringLiteral /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCStringLiteral(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCStringLiteral(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCSubscriptRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2348,
   FQN="clang::RecursiveASTVisitor::TraverseObjCSubscriptRefExpr", NM="_ZN5clang19RecursiveASTVisitor28TraverseObjCSubscriptRefExprEPNS_20ObjCSubscriptRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseObjCSubscriptRefExprEPNS_20ObjCSubscriptRefExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCSubscriptRefExpr(ObjCSubscriptRefExpr /*P*/ S) {
    return TraverseObjCSubscriptRefExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCSubscriptRefExpr(ObjCSubscriptRefExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCSubscriptRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCSubscriptRefExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOffsetOfExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2193,
   FQN="clang::RecursiveASTVisitor::TraverseOffsetOfExpr", NM="_ZN5clang19RecursiveASTVisitor20TraverseOffsetOfExprEPNS_12OffsetOfExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseOffsetOfExprEPNS_12OffsetOfExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOffsetOfExpr(OffsetOfExpr /*P*/ S) {
    return TraverseOffsetOfExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOffsetOfExpr(OffsetOfExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOffsetOfExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOffsetOfExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOpaqueValueExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2385,
   FQN="clang::RecursiveASTVisitor::TraverseOpaqueValueExpr", NM="_ZN5clang19RecursiveASTVisitor23TraverseOpaqueValueExprEPNS_15OpaqueValueExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseOpaqueValueExprEPNS_15OpaqueValueExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOpaqueValueExpr(OpaqueValueExpr /*P*/ S) {
    return TraverseOpaqueValueExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOpaqueValueExpr(OpaqueValueExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOpaqueValueExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOpaqueValueExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnresolvedLookupExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2362,
   FQN="clang::RecursiveASTVisitor::TraverseUnresolvedLookupExpr", NM="_ZN5clang19RecursiveASTVisitor28TraverseUnresolvedLookupExprEPNS_20UnresolvedLookupExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseUnresolvedLookupExprEPNS_20UnresolvedLookupExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnresolvedLookupExpr(UnresolvedLookupExpr /*P*/ S) {
    return TraverseUnresolvedLookupExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnresolvedLookupExpr(UnresolvedLookupExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedLookupExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(S.getQualifierLoc())) {
            return false;
          }
        } while (false);
        if (S.hasExplicitTemplateArgs()) {
          do {
            if (!getDerived().TraverseTemplateArgumentLocsHelper(S.getTemplateArgs(), S.getNumTemplateArgs())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedLookupExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnresolvedMemberExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2370,
   FQN="clang::RecursiveASTVisitor::TraverseUnresolvedMemberExpr", NM="_ZN5clang19RecursiveASTVisitor28TraverseUnresolvedMemberExprEPNS_20UnresolvedMemberExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseUnresolvedMemberExprEPNS_20UnresolvedMemberExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnresolvedMemberExpr(UnresolvedMemberExpr /*P*/ S) {
    return TraverseUnresolvedMemberExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnresolvedMemberExpr(UnresolvedMemberExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedMemberExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(S.getQualifierLoc())) {
            return false;
          }
        } while (false);
        if (S.hasExplicitTemplateArgs()) {
          do {
            if (!getDerived().TraverseTemplateArgumentLocsHelper(S.getTemplateArgs(), S.getNumTemplateArgs())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedMemberExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePackExpansionExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2397,
   FQN="clang::RecursiveASTVisitor::TraversePackExpansionExpr", NM="_ZN5clang19RecursiveASTVisitor25TraversePackExpansionExprEPNS_17PackExpansionExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraversePackExpansionExprEPNS_17PackExpansionExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePackExpansionExpr(PackExpansionExpr /*P*/ S) {
    return TraversePackExpansionExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraversePackExpansionExpr(PackExpansionExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPackExpansionExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPackExpansionExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseParenExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2356,
   FQN="clang::RecursiveASTVisitor::TraverseParenExpr", NM="_ZN5clang19RecursiveASTVisitor17TraverseParenExprEPNS_9ParenExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseParenExprEPNS_9ParenExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseParenExpr(ParenExpr /*P*/ S) {
    return TraverseParenExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseParenExpr(ParenExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromParenExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromParenExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseParenListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2357,
   FQN="clang::RecursiveASTVisitor::TraverseParenListExpr", NM="_ZN5clang19RecursiveASTVisitor21TraverseParenListExprEPNS_13ParenListExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseParenListExprEPNS_13ParenListExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseParenListExpr(ParenListExpr /*P*/ S) {
    return TraverseParenListExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseParenListExpr(ParenListExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromParenListExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromParenListExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePredefinedExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2358,
   FQN="clang::RecursiveASTVisitor::TraversePredefinedExpr", NM="_ZN5clang19RecursiveASTVisitor22TraversePredefinedExprEPNS_14PredefinedExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraversePredefinedExprEPNS_14PredefinedExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePredefinedExpr(PredefinedExpr /*P*/ S) {
    return TraversePredefinedExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraversePredefinedExpr(PredefinedExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPredefinedExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPredefinedExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // PseudoObjectExpr is a special case because of the weirdness with
  // syntactic expressions and opaque values.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePseudoObjectExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2169,
   FQN="clang::RecursiveASTVisitor::TraversePseudoObjectExpr", NM="_ZN5clang19RecursiveASTVisitor24TraversePseudoObjectExprEPNS_16PseudoObjectExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraversePseudoObjectExprEPNS_16PseudoObjectExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePseudoObjectExpr(PseudoObjectExpr /*P*/ S) {
    return TraversePseudoObjectExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraversePseudoObjectExpr(PseudoObjectExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPseudoObjectExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSyntacticForm())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSyntacticForm()))))) {
            return false;
          }
        } while (false);
        for (type$ptr<Expr /*P*/ /*const*/ /*P*/ > i = $tryClone(S.semantics_begin()), /*P*/ /*const*/ /*P*/ e = $tryClone(S.semantics_end()); $noteq_ptr(i, e); i.$preInc()) {
          Expr /*P*/ sub = i.$star();
          {
            OpaqueValueExpr /*P*/ OVE = dyn_cast_OpaqueValueExpr(sub);
            if ((OVE != null)) {
              sub = OVE.getSourceExpr();
            }
          }
          do {
            if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(sub)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(sub))))) {
              return false;
            }
          } while (false);
        }
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPseudoObjectExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseShuffleVectorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2359,
   FQN="clang::RecursiveASTVisitor::TraverseShuffleVectorExpr", NM="_ZN5clang19RecursiveASTVisitor25TraverseShuffleVectorExprEPNS_17ShuffleVectorExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseShuffleVectorExprEPNS_17ShuffleVectorExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseShuffleVectorExpr(ShuffleVectorExpr /*P*/ S) {
    return TraverseShuffleVectorExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseShuffleVectorExpr(ShuffleVectorExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromShuffleVectorExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromShuffleVectorExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSizeOfPackExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2398,
   FQN="clang::RecursiveASTVisitor::TraverseSizeOfPackExpr", NM="_ZN5clang19RecursiveASTVisitor22TraverseSizeOfPackExprEPNS_14SizeOfPackExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseSizeOfPackExprEPNS_14SizeOfPackExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSizeOfPackExpr(SizeOfPackExpr /*P*/ S) {
    return TraverseSizeOfPackExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseSizeOfPackExpr(SizeOfPackExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSizeOfPackExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSizeOfPackExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseStmtExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2361,
   FQN="clang::RecursiveASTVisitor::TraverseStmtExpr", NM="_ZN5clang19RecursiveASTVisitor16TraverseStmtExprEPNS_8StmtExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseStmtExprEPNS_8StmtExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseStmtExpr(StmtExpr /*P*/ S) {
    return TraverseStmtExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseStmtExpr(StmtExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromStmtExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromStmtExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseStringLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2439,
   FQN="clang::RecursiveASTVisitor::TraverseStringLiteral", NM="_ZN5clang19RecursiveASTVisitor21TraverseStringLiteralEPNS_13StringLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseStringLiteralEPNS_13StringLiteralEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseStringLiteral(StringLiteral /*P*/ S) {
    return TraverseStringLiteral(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseStringLiteral(StringLiteral /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromStringLiteral(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromStringLiteral(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSubstNonTypeTemplateParmExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2400,
   FQN="clang::RecursiveASTVisitor::TraverseSubstNonTypeTemplateParmExpr", NM="_ZN5clang19RecursiveASTVisitor36TraverseSubstNonTypeTemplateParmExprEPNS_28SubstNonTypeTemplateParmExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36TraverseSubstNonTypeTemplateParmExprEPNS_28SubstNonTypeTemplateParmExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSubstNonTypeTemplateParmExpr(SubstNonTypeTemplateParmExpr /*P*/ S) {
    return TraverseSubstNonTypeTemplateParmExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseSubstNonTypeTemplateParmExpr(SubstNonTypeTemplateParmExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSubstNonTypeTemplateParmExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSubstNonTypeTemplateParmExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSubstNonTypeTemplateParmPackExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2399,
   FQN="clang::RecursiveASTVisitor::TraverseSubstNonTypeTemplateParmPackExpr", NM="_ZN5clang19RecursiveASTVisitor40TraverseSubstNonTypeTemplateParmPackExprEPNS_32SubstNonTypeTemplateParmPackExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor40TraverseSubstNonTypeTemplateParmPackExprEPNS_32SubstNonTypeTemplateParmPackExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSubstNonTypeTemplateParmPackExpr(SubstNonTypeTemplateParmPackExpr /*P*/ S) {
    return TraverseSubstNonTypeTemplateParmPackExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseSubstNonTypeTemplateParmPackExpr(SubstNonTypeTemplateParmPackExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSubstNonTypeTemplateParmPackExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSubstNonTypeTemplateParmPackExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2228,
   FQN="clang::RecursiveASTVisitor::TraverseTypeTraitExpr", NM="_ZN5clang19RecursiveASTVisitor21TraverseTypeTraitExprEPNS_13TypeTraitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseTypeTraitExprEPNS_13TypeTraitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeTraitExpr(TypeTraitExpr /*P*/ S) {
    return TraverseTypeTraitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseTypeTraitExpr(TypeTraitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeTraitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        for (/*uint*/int I = 0, N = S.getNumArgs(); I != N; ++I)  {
          do {
            if (!getDerived().TraverseTypeLoc(S.getArg(I).getTypeLoc())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeTraitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypoExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2386,
   FQN="clang::RecursiveASTVisitor::TraverseTypoExpr", NM="_ZN5clang19RecursiveASTVisitor16TraverseTypoExprEPNS_8TypoExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseTypoExprEPNS_8TypoExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypoExpr(TypoExpr /*P*/ S) {
    return TraverseTypoExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseTypoExpr(TypoExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypoExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypoExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryExprOrTypeTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2201,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryExprOrTypeTraitExpr", NM="_ZN5clang19RecursiveASTVisitor32TraverseUnaryExprOrTypeTraitExprEPNS_24UnaryExprOrTypeTraitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseUnaryExprOrTypeTraitExprEPNS_24UnaryExprOrTypeTraitExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryExprOrTypeTraitExpr(UnaryExprOrTypeTraitExpr /*P*/ S) {
    return TraverseUnaryExprOrTypeTraitExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryExprOrTypeTraitExpr(UnaryExprOrTypeTraitExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnaryExprOrTypeTraitExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (S.isArgumentType()) {
          do {
            if (!getDerived().TraverseTypeLoc(S.getArgumentTypeInfo().getTypeLoc())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnaryExprOrTypeTraitExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2393,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryOperator", NM="_ZN5clang19RecursiveASTVisitor21TraverseUnaryOperatorEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseUnaryOperatorEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryOperator(UnaryOperator /*P*/ S) {
    return TraverseUnaryOperator(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryOperator(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnaryOperator(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnaryOperator(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVAArgExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2240,
   FQN="clang::RecursiveASTVisitor::TraverseVAArgExpr", NM="_ZN5clang19RecursiveASTVisitor17TraverseVAArgExprEPNS_9VAArgExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseVAArgExprEPNS_9VAArgExprEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVAArgExpr(VAArgExpr /*P*/ S) {
    return TraverseVAArgExpr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseVAArgExpr(VAArgExpr /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVAArgExpr(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(S.getWrittenTypeInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVAArgExpr(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseForStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2030,
   FQN="clang::RecursiveASTVisitor::TraverseForStmt", NM="_ZN5clang19RecursiveASTVisitor15TraverseForStmtEPNS_7ForStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15TraverseForStmtEPNS_7ForStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseForStmt(ForStmt /*P*/ S) {
    return TraverseForStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseForStmt(ForStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromForStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromForStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseGotoStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2031,
   FQN="clang::RecursiveASTVisitor::TraverseGotoStmt", NM="_ZN5clang19RecursiveASTVisitor16TraverseGotoStmtEPNS_8GotoStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseGotoStmtEPNS_8GotoStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseGotoStmt(GotoStmt /*P*/ S) {
    return TraverseGotoStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseGotoStmt(GotoStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromGotoStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromGotoStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIfStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2032,
   FQN="clang::RecursiveASTVisitor::TraverseIfStmt", NM="_ZN5clang19RecursiveASTVisitor14TraverseIfStmtEPNS_6IfStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseIfStmtEPNS_6IfStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIfStmt(IfStmt /*P*/ S) {
    return TraverseIfStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseIfStmt(IfStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIfStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIfStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIndirectGotoStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2033,
   FQN="clang::RecursiveASTVisitor::TraverseIndirectGotoStmt", NM="_ZN5clang19RecursiveASTVisitor24TraverseIndirectGotoStmtEPNS_16IndirectGotoStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseIndirectGotoStmtEPNS_16IndirectGotoStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIndirectGotoStmt(IndirectGotoStmt /*P*/ S) {
    return TraverseIndirectGotoStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseIndirectGotoStmt(IndirectGotoStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIndirectGotoStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIndirectGotoStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLabelStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2034,
   FQN="clang::RecursiveASTVisitor::TraverseLabelStmt", NM="_ZN5clang19RecursiveASTVisitor17TraverseLabelStmtEPNS_9LabelStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseLabelStmtEPNS_9LabelStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLabelStmt(LabelStmt /*P*/ S) {
    return TraverseLabelStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseLabelStmt(LabelStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLabelStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLabelStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSDependentExistsStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2053,
   FQN="clang::RecursiveASTVisitor::TraverseMSDependentExistsStmt", NM="_ZN5clang19RecursiveASTVisitor29TraverseMSDependentExistsStmtEPNS_21MSDependentExistsStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseMSDependentExistsStmtEPNS_21MSDependentExistsStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSDependentExistsStmt(MSDependentExistsStmt /*P*/ S) {
    return TraverseMSDependentExistsStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseMSDependentExistsStmt(MSDependentExistsStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSDependentExistsStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(S.getQualifierLoc())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseDeclarationNameInfo(S.getNameInfo())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSDependentExistsStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNullStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2036,
   FQN="clang::RecursiveASTVisitor::TraverseNullStmt", NM="_ZN5clang19RecursiveASTVisitor16TraverseNullStmtEPNS_8NullStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseNullStmtEPNS_8NullStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNullStmt(NullStmt /*P*/ S) {
    return TraverseNullStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseNullStmt(NullStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNullStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNullStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPAtomicDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2529,
   FQN="clang::RecursiveASTVisitor::TraverseOMPAtomicDirective", NM="_ZN5clang19RecursiveASTVisitor26TraverseOMPAtomicDirectiveEPNS_18OMPAtomicDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseOMPAtomicDirectiveEPNS_18OMPAtomicDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPAtomicDirective(OMPAtomicDirective /*P*/ S) {
    return TraverseOMPAtomicDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPAtomicDirective(OMPAtomicDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPAtomicDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPAtomicDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPBarrierDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2508,
   FQN="clang::RecursiveASTVisitor::TraverseOMPBarrierDirective", NM="_ZN5clang19RecursiveASTVisitor27TraverseOMPBarrierDirectiveEPNS_19OMPBarrierDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseOMPBarrierDirectiveEPNS_19OMPBarrierDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPBarrierDirective(OMPBarrierDirective /*P*/ S) {
    return TraverseOMPBarrierDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPBarrierDirective(OMPBarrierDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPBarrierDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPBarrierDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPCancelDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2520,
   FQN="clang::RecursiveASTVisitor::TraverseOMPCancelDirective", NM="_ZN5clang19RecursiveASTVisitor26TraverseOMPCancelDirectiveEPNS_18OMPCancelDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseOMPCancelDirectiveEPNS_18OMPCancelDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPCancelDirective(OMPCancelDirective /*P*/ S) {
    return TraverseOMPCancelDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPCancelDirective(OMPCancelDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPCancelDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPCancelDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPCancellationPointDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2517,
   FQN="clang::RecursiveASTVisitor::TraverseOMPCancellationPointDirective", NM="_ZN5clang19RecursiveASTVisitor37TraverseOMPCancellationPointDirectiveEPNS_29OMPCancellationPointDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37TraverseOMPCancellationPointDirectiveEPNS_29OMPCancellationPointDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPCancellationPointDirective(OMPCancellationPointDirective /*P*/ S) {
    return TraverseOMPCancellationPointDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPCancellationPointDirective(OMPCancellationPointDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPCancellationPointDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPCancellationPointDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPCriticalDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2488,
   FQN="clang::RecursiveASTVisitor::TraverseOMPCriticalDirective", NM="_ZN5clang19RecursiveASTVisitor28TraverseOMPCriticalDirectiveEPNS_20OMPCriticalDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseOMPCriticalDirectiveEPNS_20OMPCriticalDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPCriticalDirective(OMPCriticalDirective /*P*/ S) {
    return TraverseOMPCriticalDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPCriticalDirective(OMPCriticalDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPCriticalDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDeclarationNameInfo(S.getDirectiveName())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPCriticalDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPFlushDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2523,
   FQN="clang::RecursiveASTVisitor::TraverseOMPFlushDirective", NM="_ZN5clang19RecursiveASTVisitor25TraverseOMPFlushDirectiveEPNS_17OMPFlushDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseOMPFlushDirectiveEPNS_17OMPFlushDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPFlushDirective(OMPFlushDirective /*P*/ S) {
    return TraverseOMPFlushDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPFlushDirective(OMPFlushDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPFlushDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPFlushDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPDistributeDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2562,
   FQN="clang::RecursiveASTVisitor::TraverseOMPDistributeDirective", NM="_ZN5clang19RecursiveASTVisitor30TraverseOMPDistributeDirectiveEPNS_22OMPDistributeDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseOMPDistributeDirectiveEPNS_22OMPDistributeDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPDistributeDirective(OMPDistributeDirective /*P*/ S) {
    return TraverseOMPDistributeDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPDistributeDirective(OMPDistributeDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPDistributeDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPDistributeDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPDistributeParallelForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2565,
   FQN="clang::RecursiveASTVisitor::TraverseOMPDistributeParallelForDirective", NM="_ZN5clang19RecursiveASTVisitor41TraverseOMPDistributeParallelForDirectiveEPNS_33OMPDistributeParallelForDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor41TraverseOMPDistributeParallelForDirectiveEPNS_33OMPDistributeParallelForDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPDistributeParallelForDirective(OMPDistributeParallelForDirective /*P*/ S) {
    return TraverseOMPDistributeParallelForDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPDistributeParallelForDirective(OMPDistributeParallelForDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPDistributeParallelForDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPDistributeParallelForDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPDistributeParallelForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2568,
   FQN="clang::RecursiveASTVisitor::TraverseOMPDistributeParallelForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor45TraverseOMPDistributeParallelForSimdDirectiveEPNS_37OMPDistributeParallelForSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor45TraverseOMPDistributeParallelForSimdDirectiveEPNS_37OMPDistributeParallelForSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPDistributeParallelForSimdDirective(OMPDistributeParallelForSimdDirective /*P*/ S) {
    return TraverseOMPDistributeParallelForSimdDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPDistributeParallelForSimdDirective(OMPDistributeParallelForSimdDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPDistributeParallelForSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPDistributeParallelForSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPDistributeSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2571,
   FQN="clang::RecursiveASTVisitor::TraverseOMPDistributeSimdDirective", NM="_ZN5clang19RecursiveASTVisitor34TraverseOMPDistributeSimdDirectiveEPNS_26OMPDistributeSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34TraverseOMPDistributeSimdDirectiveEPNS_26OMPDistributeSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPDistributeSimdDirective(OMPDistributeSimdDirective /*P*/ S) {
    return TraverseOMPDistributeSimdDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPDistributeSimdDirective(OMPDistributeSimdDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPDistributeSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPDistributeSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2470,
   FQN="clang::RecursiveASTVisitor::TraverseOMPForDirective", NM="_ZN5clang19RecursiveASTVisitor23TraverseOMPForDirectiveEPNS_15OMPForDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseOMPForDirectiveEPNS_15OMPForDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPForDirective(OMPForDirective /*P*/ S) {
    return TraverseOMPForDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPForDirective(OMPForDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPForDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPForDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2473,
   FQN="clang::RecursiveASTVisitor::TraverseOMPForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor27TraverseOMPForSimdDirectiveEPNS_19OMPForSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseOMPForSimdDirectiveEPNS_19OMPForSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPForSimdDirective(OMPForSimdDirective /*P*/ S) {
    return TraverseOMPForSimdDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPForSimdDirective(OMPForSimdDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPForSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPForSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPParallelForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2493,
   FQN="clang::RecursiveASTVisitor::TraverseOMPParallelForDirective", NM="_ZN5clang19RecursiveASTVisitor31TraverseOMPParallelForDirectiveEPNS_23OMPParallelForDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseOMPParallelForDirectiveEPNS_23OMPParallelForDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPParallelForDirective(OMPParallelForDirective /*P*/ S) {
    return TraverseOMPParallelForDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPParallelForDirective(OMPParallelForDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPParallelForDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPParallelForDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPParallelForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2496,
   FQN="clang::RecursiveASTVisitor::TraverseOMPParallelForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor35TraverseOMPParallelForSimdDirectiveEPNS_27OMPParallelForSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35TraverseOMPParallelForSimdDirectiveEPNS_27OMPParallelForSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPParallelForSimdDirective(OMPParallelForSimdDirective /*P*/ S) {
    return TraverseOMPParallelForSimdDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPParallelForSimdDirective(OMPParallelForSimdDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPParallelForSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPParallelForSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2467,
   FQN="clang::RecursiveASTVisitor::TraverseOMPSimdDirective", NM="_ZN5clang19RecursiveASTVisitor24TraverseOMPSimdDirectiveEPNS_16OMPSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseOMPSimdDirectiveEPNS_16OMPSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPSimdDirective(OMPSimdDirective /*P*/ S) {
    return TraverseOMPSimdDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPSimdDirective(OMPSimdDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTargetParallelForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2574,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTargetParallelForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor41TraverseOMPTargetParallelForSimdDirectiveEPNS_33OMPTargetParallelForSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor41TraverseOMPTargetParallelForSimdDirectiveEPNS_33OMPTargetParallelForSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTargetParallelForSimdDirective(OMPTargetParallelForSimdDirective /*P*/ S) {
    return TraverseOMPTargetParallelForSimdDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTargetParallelForSimdDirective(OMPTargetParallelForSimdDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetParallelForSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetParallelForSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTaskLoopDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2556,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTaskLoopDirective", NM="_ZN5clang19RecursiveASTVisitor28TraverseOMPTaskLoopDirectiveEPNS_20OMPTaskLoopDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseOMPTaskLoopDirectiveEPNS_20OMPTaskLoopDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTaskLoopDirective(OMPTaskLoopDirective /*P*/ S) {
    return TraverseOMPTaskLoopDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTaskLoopDirective(OMPTaskLoopDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskLoopDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskLoopDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTaskLoopSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2559,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTaskLoopSimdDirective", NM="_ZN5clang19RecursiveASTVisitor32TraverseOMPTaskLoopSimdDirectiveEPNS_24OMPTaskLoopSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseOMPTaskLoopSimdDirectiveEPNS_24OMPTaskLoopSimdDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTaskLoopSimdDirective(OMPTaskLoopSimdDirective /*P*/ S) {
    return TraverseOMPTaskLoopSimdDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTaskLoopSimdDirective(OMPTaskLoopSimdDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskLoopSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskLoopSimdDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPMasterDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2485,
   FQN="clang::RecursiveASTVisitor::TraverseOMPMasterDirective", NM="_ZN5clang19RecursiveASTVisitor26TraverseOMPMasterDirectiveEPNS_18OMPMasterDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseOMPMasterDirectiveEPNS_18OMPMasterDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPMasterDirective(OMPMasterDirective /*P*/ S) {
    return TraverseOMPMasterDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPMasterDirective(OMPMasterDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPMasterDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPMasterDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPOrderedDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2526,
   FQN="clang::RecursiveASTVisitor::TraverseOMPOrderedDirective", NM="_ZN5clang19RecursiveASTVisitor27TraverseOMPOrderedDirectiveEPNS_19OMPOrderedDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseOMPOrderedDirectiveEPNS_19OMPOrderedDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPOrderedDirective(OMPOrderedDirective /*P*/ S) {
    return TraverseOMPOrderedDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPOrderedDirective(OMPOrderedDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPOrderedDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPOrderedDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPParallelDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2464,
   FQN="clang::RecursiveASTVisitor::TraverseOMPParallelDirective", NM="_ZN5clang19RecursiveASTVisitor28TraverseOMPParallelDirectiveEPNS_20OMPParallelDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseOMPParallelDirectiveEPNS_20OMPParallelDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPParallelDirective(OMPParallelDirective /*P*/ S) {
    return TraverseOMPParallelDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPParallelDirective(OMPParallelDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPParallelDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPParallelDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPParallelSectionsDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2499,
   FQN="clang::RecursiveASTVisitor::TraverseOMPParallelSectionsDirective", NM="_ZN5clang19RecursiveASTVisitor36TraverseOMPParallelSectionsDirectiveEPNS_28OMPParallelSectionsDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36TraverseOMPParallelSectionsDirectiveEPNS_28OMPParallelSectionsDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPParallelSectionsDirective(OMPParallelSectionsDirective /*P*/ S) {
    return TraverseOMPParallelSectionsDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPParallelSectionsDirective(OMPParallelSectionsDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPParallelSectionsDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPParallelSectionsDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPSectionDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2479,
   FQN="clang::RecursiveASTVisitor::TraverseOMPSectionDirective", NM="_ZN5clang19RecursiveASTVisitor27TraverseOMPSectionDirectiveEPNS_19OMPSectionDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseOMPSectionDirectiveEPNS_19OMPSectionDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPSectionDirective(OMPSectionDirective /*P*/ S) {
    return TraverseOMPSectionDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPSectionDirective(OMPSectionDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPSectionDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPSectionDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPSectionsDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2476,
   FQN="clang::RecursiveASTVisitor::TraverseOMPSectionsDirective", NM="_ZN5clang19RecursiveASTVisitor28TraverseOMPSectionsDirectiveEPNS_20OMPSectionsDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseOMPSectionsDirectiveEPNS_20OMPSectionsDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPSectionsDirective(OMPSectionsDirective /*P*/ S) {
    return TraverseOMPSectionsDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPSectionsDirective(OMPSectionsDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPSectionsDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPSectionsDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPSingleDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2482,
   FQN="clang::RecursiveASTVisitor::TraverseOMPSingleDirective", NM="_ZN5clang19RecursiveASTVisitor26TraverseOMPSingleDirectiveEPNS_18OMPSingleDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseOMPSingleDirectiveEPNS_18OMPSingleDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPSingleDirective(OMPSingleDirective /*P*/ S) {
    return TraverseOMPSingleDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPSingleDirective(OMPSingleDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPSingleDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPSingleDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTargetDataDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2535,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTargetDataDirective", NM="_ZN5clang19RecursiveASTVisitor30TraverseOMPTargetDataDirectiveEPNS_22OMPTargetDataDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseOMPTargetDataDirectiveEPNS_22OMPTargetDataDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTargetDataDirective(OMPTargetDataDirective /*P*/ S) {
    return TraverseOMPTargetDataDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTargetDataDirective(OMPTargetDataDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetDataDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetDataDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTargetDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2532,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTargetDirective", NM="_ZN5clang19RecursiveASTVisitor26TraverseOMPTargetDirectiveEPNS_18OMPTargetDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseOMPTargetDirectiveEPNS_18OMPTargetDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTargetDirective(OMPTargetDirective /*P*/ S) {
    return TraverseOMPTargetDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTargetDirective(OMPTargetDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTargetEnterDataDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2538,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTargetEnterDataDirective", NM="_ZN5clang19RecursiveASTVisitor35TraverseOMPTargetEnterDataDirectiveEPNS_27OMPTargetEnterDataDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35TraverseOMPTargetEnterDataDirectiveEPNS_27OMPTargetEnterDataDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTargetEnterDataDirective(OMPTargetEnterDataDirective /*P*/ S) {
    return TraverseOMPTargetEnterDataDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTargetEnterDataDirective(OMPTargetEnterDataDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetEnterDataDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetEnterDataDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTargetExitDataDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2541,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTargetExitDataDirective", NM="_ZN5clang19RecursiveASTVisitor34TraverseOMPTargetExitDataDirectiveEPNS_26OMPTargetExitDataDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34TraverseOMPTargetExitDataDirectiveEPNS_26OMPTargetExitDataDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTargetExitDataDirective(OMPTargetExitDataDirective /*P*/ S) {
    return TraverseOMPTargetExitDataDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTargetExitDataDirective(OMPTargetExitDataDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetExitDataDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetExitDataDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTargetParallelDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2544,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTargetParallelDirective", NM="_ZN5clang19RecursiveASTVisitor34TraverseOMPTargetParallelDirectiveEPNS_26OMPTargetParallelDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34TraverseOMPTargetParallelDirectiveEPNS_26OMPTargetParallelDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTargetParallelDirective(OMPTargetParallelDirective /*P*/ S) {
    return TraverseOMPTargetParallelDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTargetParallelDirective(OMPTargetParallelDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetParallelDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetParallelDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTargetParallelForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2547,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTargetParallelForDirective", NM="_ZN5clang19RecursiveASTVisitor37TraverseOMPTargetParallelForDirectiveEPNS_29OMPTargetParallelForDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37TraverseOMPTargetParallelForDirectiveEPNS_29OMPTargetParallelForDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTargetParallelForDirective(OMPTargetParallelForDirective /*P*/ S) {
    return TraverseOMPTargetParallelForDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTargetParallelForDirective(OMPTargetParallelForDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetParallelForDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetParallelForDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTargetUpdateDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2553,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTargetUpdateDirective", NM="_ZN5clang19RecursiveASTVisitor32TraverseOMPTargetUpdateDirectiveEPNS_24OMPTargetUpdateDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseOMPTargetUpdateDirectiveEPNS_24OMPTargetUpdateDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTargetUpdateDirective(OMPTargetUpdateDirective /*P*/ S) {
    return TraverseOMPTargetUpdateDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTargetUpdateDirective(OMPTargetUpdateDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetUpdateDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTargetUpdateDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTaskDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2502,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTaskDirective", NM="_ZN5clang19RecursiveASTVisitor24TraverseOMPTaskDirectiveEPNS_16OMPTaskDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseOMPTaskDirectiveEPNS_16OMPTaskDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTaskDirective(OMPTaskDirective /*P*/ S) {
    return TraverseOMPTaskDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTaskDirective(OMPTaskDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTaskgroupDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2514,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTaskgroupDirective", NM="_ZN5clang19RecursiveASTVisitor29TraverseOMPTaskgroupDirectiveEPNS_21OMPTaskgroupDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseOMPTaskgroupDirectiveEPNS_21OMPTaskgroupDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTaskgroupDirective(OMPTaskgroupDirective /*P*/ S) {
    return TraverseOMPTaskgroupDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTaskgroupDirective(OMPTaskgroupDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskgroupDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskgroupDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTaskwaitDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2511,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTaskwaitDirective", NM="_ZN5clang19RecursiveASTVisitor28TraverseOMPTaskwaitDirectiveEPNS_20OMPTaskwaitDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseOMPTaskwaitDirectiveEPNS_20OMPTaskwaitDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTaskwaitDirective(OMPTaskwaitDirective /*P*/ S) {
    return TraverseOMPTaskwaitDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTaskwaitDirective(OMPTaskwaitDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskwaitDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskwaitDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTaskyieldDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2505,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTaskyieldDirective", NM="_ZN5clang19RecursiveASTVisitor29TraverseOMPTaskyieldDirectiveEPNS_21OMPTaskyieldDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseOMPTaskyieldDirectiveEPNS_21OMPTaskyieldDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTaskyieldDirective(OMPTaskyieldDirective /*P*/ S) {
    return TraverseOMPTaskyieldDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTaskyieldDirective(OMPTaskyieldDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskyieldDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTaskyieldDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPTeamsDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2550,
   FQN="clang::RecursiveASTVisitor::TraverseOMPTeamsDirective", NM="_ZN5clang19RecursiveASTVisitor25TraverseOMPTeamsDirectiveEPNS_17OMPTeamsDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseOMPTeamsDirectiveEPNS_17OMPTeamsDirectiveEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPTeamsDirective(OMPTeamsDirective /*P*/ S) {
    return TraverseOMPTeamsDirective(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseOMPTeamsDirective(OMPTeamsDirective /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTeamsDirective(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseOMPExecutableDirective(S)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPTeamsDirective(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCAtCatchStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2037,
   FQN="clang::RecursiveASTVisitor::TraverseObjCAtCatchStmt", NM="_ZN5clang19RecursiveASTVisitor23TraverseObjCAtCatchStmtEPNS_15ObjCAtCatchStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseObjCAtCatchStmtEPNS_15ObjCAtCatchStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCAtCatchStmt(ObjCAtCatchStmt /*P*/ S) {
    return TraverseObjCAtCatchStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCAtCatchStmt(ObjCAtCatchStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtCatchStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtCatchStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCAtFinallyStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2038,
   FQN="clang::RecursiveASTVisitor::TraverseObjCAtFinallyStmt", NM="_ZN5clang19RecursiveASTVisitor25TraverseObjCAtFinallyStmtEPNS_17ObjCAtFinallyStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseObjCAtFinallyStmtEPNS_17ObjCAtFinallyStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCAtFinallyStmt(ObjCAtFinallyStmt /*P*/ S) {
    return TraverseObjCAtFinallyStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCAtFinallyStmt(ObjCAtFinallyStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtFinallyStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtFinallyStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCAtSynchronizedStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2039,
   FQN="clang::RecursiveASTVisitor::TraverseObjCAtSynchronizedStmt", NM="_ZN5clang19RecursiveASTVisitor30TraverseObjCAtSynchronizedStmtEPNS_22ObjCAtSynchronizedStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseObjCAtSynchronizedStmtEPNS_22ObjCAtSynchronizedStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCAtSynchronizedStmt(ObjCAtSynchronizedStmt /*P*/ S) {
    return TraverseObjCAtSynchronizedStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCAtSynchronizedStmt(ObjCAtSynchronizedStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtSynchronizedStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtSynchronizedStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCAtThrowStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2040,
   FQN="clang::RecursiveASTVisitor::TraverseObjCAtThrowStmt", NM="_ZN5clang19RecursiveASTVisitor23TraverseObjCAtThrowStmtEPNS_15ObjCAtThrowStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseObjCAtThrowStmtEPNS_15ObjCAtThrowStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCAtThrowStmt(ObjCAtThrowStmt /*P*/ S) {
    return TraverseObjCAtThrowStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCAtThrowStmt(ObjCAtThrowStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtThrowStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtThrowStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCAtTryStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2041,
   FQN="clang::RecursiveASTVisitor::TraverseObjCAtTryStmt", NM="_ZN5clang19RecursiveASTVisitor21TraverseObjCAtTryStmtEPNS_13ObjCAtTryStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseObjCAtTryStmtEPNS_13ObjCAtTryStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCAtTryStmt(ObjCAtTryStmt /*P*/ S) {
    return TraverseObjCAtTryStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCAtTryStmt(ObjCAtTryStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtTryStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtTryStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCAutoreleasePoolStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2043,
   FQN="clang::RecursiveASTVisitor::TraverseObjCAutoreleasePoolStmt", NM="_ZN5clang19RecursiveASTVisitor31TraverseObjCAutoreleasePoolStmtEPNS_23ObjCAutoreleasePoolStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseObjCAutoreleasePoolStmtEPNS_23ObjCAutoreleasePoolStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCAutoreleasePoolStmt(ObjCAutoreleasePoolStmt /*P*/ S) {
    return TraverseObjCAutoreleasePoolStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCAutoreleasePoolStmt(ObjCAutoreleasePoolStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAutoreleasePoolStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAutoreleasePoolStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCForCollectionStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2042,
   FQN="clang::RecursiveASTVisitor::TraverseObjCForCollectionStmt", NM="_ZN5clang19RecursiveASTVisitor29TraverseObjCForCollectionStmtEPNS_21ObjCForCollectionStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseObjCForCollectionStmtEPNS_21ObjCForCollectionStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCForCollectionStmt(ObjCForCollectionStmt /*P*/ S) {
    return TraverseObjCForCollectionStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseObjCForCollectionStmt(ObjCForCollectionStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCForCollectionStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCForCollectionStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseReturnStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2057,
   FQN="clang::RecursiveASTVisitor::TraverseReturnStmt", NM="_ZN5clang19RecursiveASTVisitor18TraverseReturnStmtEPNS_10ReturnStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseReturnStmtEPNS_10ReturnStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseReturnStmt(ReturnStmt /*P*/ S) {
    return TraverseReturnStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseReturnStmt(ReturnStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromReturnStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromReturnStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSEHExceptStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2379,
   FQN="clang::RecursiveASTVisitor::TraverseSEHExceptStmt", NM="_ZN5clang19RecursiveASTVisitor21TraverseSEHExceptStmtEPNS_13SEHExceptStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseSEHExceptStmtEPNS_13SEHExceptStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSEHExceptStmt(SEHExceptStmt /*P*/ S) {
    return TraverseSEHExceptStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseSEHExceptStmt(SEHExceptStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSEHExceptStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSEHExceptStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSEHFinallyStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2380,
   FQN="clang::RecursiveASTVisitor::TraverseSEHFinallyStmt", NM="_ZN5clang19RecursiveASTVisitor22TraverseSEHFinallyStmtEPNS_14SEHFinallyStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseSEHFinallyStmtEPNS_14SEHFinallyStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSEHFinallyStmt(SEHFinallyStmt /*P*/ S) {
    return TraverseSEHFinallyStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseSEHFinallyStmt(SEHFinallyStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSEHFinallyStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSEHFinallyStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSEHLeaveStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2381,
   FQN="clang::RecursiveASTVisitor::TraverseSEHLeaveStmt", NM="_ZN5clang19RecursiveASTVisitor20TraverseSEHLeaveStmtEPNS_12SEHLeaveStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseSEHLeaveStmtEPNS_12SEHLeaveStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSEHLeaveStmt(SEHLeaveStmt /*P*/ S) {
    return TraverseSEHLeaveStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseSEHLeaveStmt(SEHLeaveStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSEHLeaveStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSEHLeaveStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSEHTryStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2378,
   FQN="clang::RecursiveASTVisitor::TraverseSEHTryStmt", NM="_ZN5clang19RecursiveASTVisitor18TraverseSEHTryStmtEPNS_10SEHTryStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseSEHTryStmtEPNS_10SEHTryStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSEHTryStmt(SEHTryStmt /*P*/ S) {
    return TraverseSEHTryStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseSEHTryStmt(SEHTryStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSEHTryStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSEHTryStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCaseStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2025,
   FQN="clang::RecursiveASTVisitor::TraverseCaseStmt", NM="_ZN5clang19RecursiveASTVisitor16TraverseCaseStmtEPNS_8CaseStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseCaseStmtEPNS_8CaseStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCaseStmt(CaseStmt /*P*/ S) {
    return TraverseCaseStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseCaseStmt(CaseStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCaseStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCaseStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDefaultStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2028,
   FQN="clang::RecursiveASTVisitor::TraverseDefaultStmt", NM="_ZN5clang19RecursiveASTVisitor19TraverseDefaultStmtEPNS_11DefaultStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseDefaultStmtEPNS_11DefaultStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDefaultStmt(DefaultStmt /*P*/ S) {
    return TraverseDefaultStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseDefaultStmt(DefaultStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDefaultStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDefaultStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSwitchStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2058,
   FQN="clang::RecursiveASTVisitor::TraverseSwitchStmt", NM="_ZN5clang19RecursiveASTVisitor18TraverseSwitchStmtEPNS_10SwitchStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseSwitchStmtEPNS_10SwitchStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSwitchStmt(SwitchStmt /*P*/ S) {
    return TraverseSwitchStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseSwitchStmt(SwitchStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSwitchStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSwitchStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseWhileStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2059,
   FQN="clang::RecursiveASTVisitor::TraverseWhileStmt", NM="_ZN5clang19RecursiveASTVisitor17TraverseWhileStmtEPNS_9WhileStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseWhileStmtEPNS_9WhileStmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseWhileStmt(WhileStmt /*P*/ S) {
    return TraverseWhileStmt(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseWhileStmt(WhileStmt /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromWhileStmt(S)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ShouldVisitChildren) {
      for (Stmt /*P*/ SubStmt : S.children()) {
        do {
          if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt)), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(SubStmt))))) {
            return false;
          }
        } while (false);
      }
    }
    if (!(Queue != null) && ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromWhileStmt(S)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  // The above header #undefs ABSTRACT_STMT and STMT upon exit.
  
  // Define WalkUpFrom*() and empty Visit*() for all Stmt classes.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 341,
   FQN="clang::RecursiveASTVisitor::WalkUpFromStmt", NM="_ZN5clang19RecursiveASTVisitor14WalkUpFromStmtEPNS_4StmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14WalkUpFromStmtEPNS_4StmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromStmt(Stmt /*P*/ S) {
    return getDerived().VisitStmt(S);
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 342,
   FQN="clang::RecursiveASTVisitor::VisitStmt", NM="_ZN5clang19RecursiveASTVisitor9VisitStmtEPNS_4StmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor9VisitStmtEPNS_4StmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitStmt(Stmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAsmStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 23,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAsmStmt", NM="_ZN5clang19RecursiveASTVisitor17WalkUpFromAsmStmtEPNS_7AsmStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17WalkUpFromAsmStmtEPNS_7AsmStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAsmStmt(AsmStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAsmStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAsmStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 23,
   FQN="clang::RecursiveASTVisitor::VisitAsmStmt", NM="_ZN5clang19RecursiveASTVisitor12VisitAsmStmtEPNS_7AsmStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12VisitAsmStmtEPNS_7AsmStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAsmStmt(AsmStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromGCCAsmStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 27,
   FQN="clang::RecursiveASTVisitor::WalkUpFromGCCAsmStmt", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromGCCAsmStmtEPNS_10GCCAsmStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromGCCAsmStmtEPNS_10GCCAsmStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromGCCAsmStmt(GCCAsmStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromAsmStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitGCCAsmStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitGCCAsmStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 27,
   FQN="clang::RecursiveASTVisitor::VisitGCCAsmStmt", NM="_ZN5clang19RecursiveASTVisitor15VisitGCCAsmStmtEPNS_10GCCAsmStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitGCCAsmStmtEPNS_10GCCAsmStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitGCCAsmStmt(GCCAsmStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromMSAsmStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 33,
   FQN="clang::RecursiveASTVisitor::WalkUpFromMSAsmStmt", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromMSAsmStmtEPNS_9MSAsmStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromMSAsmStmtEPNS_9MSAsmStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromMSAsmStmt(MSAsmStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromAsmStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitMSAsmStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSAsmStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 33,
   FQN="clang::RecursiveASTVisitor::VisitMSAsmStmt", NM="_ZN5clang19RecursiveASTVisitor14VisitMSAsmStmtEPNS_9MSAsmStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitMSAsmStmtEPNS_9MSAsmStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSAsmStmt(MSAsmStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAttributedStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 43,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAttributedStmt", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromAttributedStmtEPNS_14AttributedStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromAttributedStmtEPNS_14AttributedStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAttributedStmt(AttributedStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAttributedStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAttributedStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 43,
   FQN="clang::RecursiveASTVisitor::VisitAttributedStmt", NM="_ZN5clang19RecursiveASTVisitor19VisitAttributedStmtEPNS_14AttributedStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitAttributedStmtEPNS_14AttributedStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAttributedStmt(AttributedStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBreakStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 49,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBreakStmt", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromBreakStmtEPNS_9BreakStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromBreakStmtEPNS_9BreakStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBreakStmt(BreakStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBreakStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBreakStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 49,
   FQN="clang::RecursiveASTVisitor::VisitBreakStmt", NM="_ZN5clang19RecursiveASTVisitor14VisitBreakStmtEPNS_9BreakStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitBreakStmtEPNS_9BreakStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBreakStmt(BreakStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXCatchStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 55,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXCatchStmt", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromCXXCatchStmtEPNS_12CXXCatchStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromCXXCatchStmtEPNS_12CXXCatchStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXCatchStmt(CXXCatchStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXCatchStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXCatchStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 55,
   FQN="clang::RecursiveASTVisitor::VisitCXXCatchStmt", NM="_ZN5clang19RecursiveASTVisitor17VisitCXXCatchStmtEPNS_12CXXCatchStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitCXXCatchStmtEPNS_12CXXCatchStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXCatchStmt(CXXCatchStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXForRangeStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 61,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXForRangeStmt", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromCXXForRangeStmtEPNS_15CXXForRangeStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromCXXForRangeStmtEPNS_15CXXForRangeStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXForRangeStmt(CXXForRangeStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXForRangeStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXForRangeStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 61,
   FQN="clang::RecursiveASTVisitor::VisitCXXForRangeStmt", NM="_ZN5clang19RecursiveASTVisitor20VisitCXXForRangeStmtEPNS_15CXXForRangeStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitCXXForRangeStmtEPNS_15CXXForRangeStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXForRangeStmt(CXXForRangeStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXTryStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 67,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXTryStmt", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromCXXTryStmtEPNS_10CXXTryStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromCXXTryStmtEPNS_10CXXTryStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXTryStmt(CXXTryStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXTryStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXTryStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 67,
   FQN="clang::RecursiveASTVisitor::VisitCXXTryStmt", NM="_ZN5clang19RecursiveASTVisitor15VisitCXXTryStmtEPNS_10CXXTryStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitCXXTryStmtEPNS_10CXXTryStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXTryStmt(CXXTryStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCapturedStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 73,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCapturedStmt", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromCapturedStmtEPNS_12CapturedStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromCapturedStmtEPNS_12CapturedStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCapturedStmt(CapturedStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCapturedStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCapturedStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 73,
   FQN="clang::RecursiveASTVisitor::VisitCapturedStmt", NM="_ZN5clang19RecursiveASTVisitor17VisitCapturedStmtEPNS_12CapturedStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitCapturedStmtEPNS_12CapturedStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCapturedStmt(CapturedStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCompoundStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 79,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCompoundStmt", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromCompoundStmtEPNS_12CompoundStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromCompoundStmtEPNS_12CompoundStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCompoundStmt(CompoundStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCompoundStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCompoundStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 79,
   FQN="clang::RecursiveASTVisitor::VisitCompoundStmt", NM="_ZN5clang19RecursiveASTVisitor17VisitCompoundStmtEPNS_12CompoundStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitCompoundStmtEPNS_12CompoundStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCompoundStmt(CompoundStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromContinueStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 85,
   FQN="clang::RecursiveASTVisitor::WalkUpFromContinueStmt", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromContinueStmtEPNS_12ContinueStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromContinueStmtEPNS_12ContinueStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromContinueStmt(ContinueStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitContinueStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitContinueStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 85,
   FQN="clang::RecursiveASTVisitor::VisitContinueStmt", NM="_ZN5clang19RecursiveASTVisitor17VisitContinueStmtEPNS_12ContinueStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitContinueStmtEPNS_12ContinueStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitContinueStmt(ContinueStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCoreturnStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 91,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCoreturnStmt", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromCoreturnStmtEPNS_12CoreturnStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromCoreturnStmtEPNS_12CoreturnStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCoreturnStmt(CoreturnStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCoreturnStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCoreturnStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 91,
   FQN="clang::RecursiveASTVisitor::VisitCoreturnStmt", NM="_ZN5clang19RecursiveASTVisitor17VisitCoreturnStmtEPNS_12CoreturnStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitCoreturnStmtEPNS_12CoreturnStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCoreturnStmt(CoreturnStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCoroutineBodyStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 97,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCoroutineBodyStmt", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromCoroutineBodyStmtEPNS_17CoroutineBodyStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromCoroutineBodyStmtEPNS_17CoroutineBodyStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCoroutineBodyStmt(CoroutineBodyStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCoroutineBodyStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCoroutineBodyStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 97,
   FQN="clang::RecursiveASTVisitor::VisitCoroutineBodyStmt", NM="_ZN5clang19RecursiveASTVisitor22VisitCoroutineBodyStmtEPNS_17CoroutineBodyStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitCoroutineBodyStmtEPNS_17CoroutineBodyStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCoroutineBodyStmt(CoroutineBodyStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDeclStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 103,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDeclStmt", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromDeclStmtEPNS_8DeclStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromDeclStmtEPNS_8DeclStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDeclStmt(DeclStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDeclStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDeclStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 103,
   FQN="clang::RecursiveASTVisitor::VisitDeclStmt", NM="_ZN5clang19RecursiveASTVisitor13VisitDeclStmtEPNS_8DeclStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitDeclStmtEPNS_8DeclStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDeclStmt(DeclStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDoStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 109,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDoStmt", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromDoStmtEPNS_6DoStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromDoStmtEPNS_6DoStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDoStmt(DoStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDoStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDoStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 109,
   FQN="clang::RecursiveASTVisitor::VisitDoStmt", NM="_ZN5clang19RecursiveASTVisitor11VisitDoStmtEPNS_6DoStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitDoStmtEPNS_6DoStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDoStmt(DoStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 115,
   FQN="clang::RecursiveASTVisitor::WalkUpFromExpr", NM="_ZN5clang19RecursiveASTVisitor14WalkUpFromExprEPNS_4ExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14WalkUpFromExprEPNS_4ExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromExpr(Expr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 115,
   FQN="clang::RecursiveASTVisitor::VisitExpr", NM="_ZN5clang19RecursiveASTVisitor9VisitExprEPNS_4ExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor9VisitExprEPNS_4ExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitExpr(Expr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAbstractConditionalOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 119,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAbstractConditionalOperator", NM="_ZN5clang19RecursiveASTVisitor37WalkUpFromAbstractConditionalOperatorEPNS_27AbstractConditionalOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37WalkUpFromAbstractConditionalOperatorEPNS_27AbstractConditionalOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAbstractConditionalOperator(AbstractConditionalOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAbstractConditionalOperator(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAbstractConditionalOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 119,
   FQN="clang::RecursiveASTVisitor::VisitAbstractConditionalOperator", NM="_ZN5clang19RecursiveASTVisitor32VisitAbstractConditionalOperatorEPNS_27AbstractConditionalOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32VisitAbstractConditionalOperatorEPNS_27AbstractConditionalOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAbstractConditionalOperator(AbstractConditionalOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinaryConditionalOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 123,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinaryConditionalOperator", NM="_ZN5clang19RecursiveASTVisitor35WalkUpFromBinaryConditionalOperatorEPNS_25BinaryConditionalOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35WalkUpFromBinaryConditionalOperatorEPNS_25BinaryConditionalOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinaryConditionalOperator(BinaryConditionalOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromAbstractConditionalOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinaryConditionalOperator(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinaryConditionalOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 123,
   FQN="clang::RecursiveASTVisitor::VisitBinaryConditionalOperator", NM="_ZN5clang19RecursiveASTVisitor30VisitBinaryConditionalOperatorEPNS_25BinaryConditionalOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30VisitBinaryConditionalOperatorEPNS_25BinaryConditionalOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinaryConditionalOperator(BinaryConditionalOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromConditionalOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 129,
   FQN="clang::RecursiveASTVisitor::WalkUpFromConditionalOperator", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromConditionalOperatorEPNS_19ConditionalOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromConditionalOperatorEPNS_19ConditionalOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromConditionalOperator(ConditionalOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromAbstractConditionalOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitConditionalOperator(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConditionalOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 129,
   FQN="clang::RecursiveASTVisitor::VisitConditionalOperator", NM="_ZN5clang19RecursiveASTVisitor24VisitConditionalOperatorEPNS_19ConditionalOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitConditionalOperatorEPNS_19ConditionalOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConditionalOperator(ConditionalOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAddrLabelExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 139,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAddrLabelExpr", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromAddrLabelExprEPNS_13AddrLabelExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromAddrLabelExprEPNS_13AddrLabelExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAddrLabelExpr(AddrLabelExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAddrLabelExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAddrLabelExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 139,
   FQN="clang::RecursiveASTVisitor::VisitAddrLabelExpr", NM="_ZN5clang19RecursiveASTVisitor18VisitAddrLabelExprEPNS_13AddrLabelExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitAddrLabelExprEPNS_13AddrLabelExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAddrLabelExpr(AddrLabelExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromArraySubscriptExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 145,
   FQN="clang::RecursiveASTVisitor::WalkUpFromArraySubscriptExpr", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromArraySubscriptExprEPNS_18ArraySubscriptExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromArraySubscriptExprEPNS_18ArraySubscriptExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromArraySubscriptExpr(ArraySubscriptExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitArraySubscriptExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitArraySubscriptExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 145,
   FQN="clang::RecursiveASTVisitor::VisitArraySubscriptExpr", NM="_ZN5clang19RecursiveASTVisitor23VisitArraySubscriptExprEPNS_18ArraySubscriptExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitArraySubscriptExprEPNS_18ArraySubscriptExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitArraySubscriptExpr(ArraySubscriptExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromArrayTypeTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 151,
   FQN="clang::RecursiveASTVisitor::WalkUpFromArrayTypeTraitExpr", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromArrayTypeTraitExprEPNS_18ArrayTypeTraitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromArrayTypeTraitExprEPNS_18ArrayTypeTraitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromArrayTypeTraitExpr(ArrayTypeTraitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitArrayTypeTraitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitArrayTypeTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 151,
   FQN="clang::RecursiveASTVisitor::VisitArrayTypeTraitExpr", NM="_ZN5clang19RecursiveASTVisitor23VisitArrayTypeTraitExprEPNS_18ArrayTypeTraitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitArrayTypeTraitExprEPNS_18ArrayTypeTraitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitArrayTypeTraitExpr(ArrayTypeTraitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAsTypeExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 157,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAsTypeExpr", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromAsTypeExprEPNS_10AsTypeExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromAsTypeExprEPNS_10AsTypeExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAsTypeExpr(AsTypeExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAsTypeExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAsTypeExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 157,
   FQN="clang::RecursiveASTVisitor::VisitAsTypeExpr", NM="_ZN5clang19RecursiveASTVisitor15VisitAsTypeExprEPNS_10AsTypeExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitAsTypeExprEPNS_10AsTypeExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAsTypeExpr(AsTypeExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAtomicExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 163,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAtomicExpr", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromAtomicExprEPNS_10AtomicExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromAtomicExprEPNS_10AtomicExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAtomicExpr(AtomicExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAtomicExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAtomicExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 163,
   FQN="clang::RecursiveASTVisitor::VisitAtomicExpr", NM="_ZN5clang19RecursiveASTVisitor15VisitAtomicExprEPNS_10AtomicExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitAtomicExprEPNS_10AtomicExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAtomicExpr(AtomicExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinaryOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 169,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinaryOperator", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromBinaryOperatorEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromBinaryOperatorEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinaryOperator(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinaryOperator(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinaryOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 169,
   FQN="clang::RecursiveASTVisitor::VisitBinaryOperator", NM="_ZN5clang19RecursiveASTVisitor19VisitBinaryOperatorEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitBinaryOperatorEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinaryOperator(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCompoundAssignOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 173,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCompoundAssignOperator", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromCompoundAssignOperatorEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromCompoundAssignOperatorEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCompoundAssignOperator(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCompoundAssignOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 173,
   FQN="clang::RecursiveASTVisitor::VisitCompoundAssignOperator", NM="_ZN5clang19RecursiveASTVisitor27VisitCompoundAssignOperatorEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitCompoundAssignOperatorEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCompoundAssignOperator(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBlockExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 183,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBlockExpr", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromBlockExprEPNS_9BlockExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromBlockExprEPNS_9BlockExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBlockExpr(BlockExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBlockExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBlockExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 183,
   FQN="clang::RecursiveASTVisitor::VisitBlockExpr", NM="_ZN5clang19RecursiveASTVisitor14VisitBlockExprEPNS_9BlockExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitBlockExprEPNS_9BlockExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBlockExpr(BlockExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXBindTemporaryExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 189,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXBindTemporaryExpr", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromCXXBindTemporaryExprEPNS_20CXXBindTemporaryExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromCXXBindTemporaryExprEPNS_20CXXBindTemporaryExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXBindTemporaryExpr(CXXBindTemporaryExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXBindTemporaryExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXBindTemporaryExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 189,
   FQN="clang::RecursiveASTVisitor::VisitCXXBindTemporaryExpr", NM="_ZN5clang19RecursiveASTVisitor25VisitCXXBindTemporaryExprEPNS_20CXXBindTemporaryExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitCXXBindTemporaryExprEPNS_20CXXBindTemporaryExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXBindTemporaryExpr(CXXBindTemporaryExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXBoolLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 195,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXBoolLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromCXXBoolLiteralExprEPNS_18CXXBoolLiteralExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromCXXBoolLiteralExprEPNS_18CXXBoolLiteralExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXBoolLiteralExpr(CXXBoolLiteralExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXBoolLiteralExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXBoolLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 195,
   FQN="clang::RecursiveASTVisitor::VisitCXXBoolLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor23VisitCXXBoolLiteralExprEPNS_18CXXBoolLiteralExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitCXXBoolLiteralExprEPNS_18CXXBoolLiteralExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXBoolLiteralExpr(CXXBoolLiteralExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXConstructExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 201,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXConstructExpr", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromCXXConstructExprEPNS_16CXXConstructExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromCXXConstructExprEPNS_16CXXConstructExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXConstructExpr(CXXConstructExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXConstructExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXConstructExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 201,
   FQN="clang::RecursiveASTVisitor::VisitCXXConstructExpr", NM="_ZN5clang19RecursiveASTVisitor21VisitCXXConstructExprEPNS_16CXXConstructExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitCXXConstructExprEPNS_16CXXConstructExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXConstructExpr(CXXConstructExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXTemporaryObjectExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 205,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXTemporaryObjectExpr", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromCXXTemporaryObjectExprEPNS_22CXXTemporaryObjectExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromCXXTemporaryObjectExprEPNS_22CXXTemporaryObjectExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXTemporaryObjectExpr(CXXTemporaryObjectExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCXXConstructExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXTemporaryObjectExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXTemporaryObjectExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 205,
   FQN="clang::RecursiveASTVisitor::VisitCXXTemporaryObjectExpr", NM="_ZN5clang19RecursiveASTVisitor27VisitCXXTemporaryObjectExprEPNS_22CXXTemporaryObjectExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitCXXTemporaryObjectExprEPNS_22CXXTemporaryObjectExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXTemporaryObjectExpr(CXXTemporaryObjectExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXDefaultArgExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 215,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXDefaultArgExpr", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXDefaultArgExprEPNS_17CXXDefaultArgExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXDefaultArgExprEPNS_17CXXDefaultArgExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXDefaultArgExpr(CXXDefaultArgExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXDefaultArgExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXDefaultArgExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 215,
   FQN="clang::RecursiveASTVisitor::VisitCXXDefaultArgExpr", NM="_ZN5clang19RecursiveASTVisitor22VisitCXXDefaultArgExprEPNS_17CXXDefaultArgExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitCXXDefaultArgExprEPNS_17CXXDefaultArgExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXDefaultArgExpr(CXXDefaultArgExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXDefaultInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 221,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXDefaultInitExpr", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromCXXDefaultInitExprEPNS_18CXXDefaultInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromCXXDefaultInitExprEPNS_18CXXDefaultInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXDefaultInitExpr(CXXDefaultInitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXDefaultInitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXDefaultInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 221,
   FQN="clang::RecursiveASTVisitor::VisitCXXDefaultInitExpr", NM="_ZN5clang19RecursiveASTVisitor23VisitCXXDefaultInitExprEPNS_18CXXDefaultInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitCXXDefaultInitExprEPNS_18CXXDefaultInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXDefaultInitExpr(CXXDefaultInitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXDeleteExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 227,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXDeleteExpr", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXDeleteExprEPNS_13CXXDeleteExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXDeleteExprEPNS_13CXXDeleteExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXDeleteExpr(CXXDeleteExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXDeleteExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXDeleteExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 227,
   FQN="clang::RecursiveASTVisitor::VisitCXXDeleteExpr", NM="_ZN5clang19RecursiveASTVisitor18VisitCXXDeleteExprEPNS_13CXXDeleteExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitCXXDeleteExprEPNS_13CXXDeleteExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXDeleteExpr(CXXDeleteExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXDependentScopeMemberExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 233,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXDependentScopeMemberExpr", NM="_ZN5clang19RecursiveASTVisitor37WalkUpFromCXXDependentScopeMemberExprEPNS_27CXXDependentScopeMemberExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37WalkUpFromCXXDependentScopeMemberExprEPNS_27CXXDependentScopeMemberExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXDependentScopeMemberExpr(CXXDependentScopeMemberExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXDependentScopeMemberExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXDependentScopeMemberExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 233,
   FQN="clang::RecursiveASTVisitor::VisitCXXDependentScopeMemberExpr", NM="_ZN5clang19RecursiveASTVisitor32VisitCXXDependentScopeMemberExprEPNS_27CXXDependentScopeMemberExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32VisitCXXDependentScopeMemberExprEPNS_27CXXDependentScopeMemberExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXDependentScopeMemberExpr(CXXDependentScopeMemberExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXFoldExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 239,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXFoldExpr", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromCXXFoldExprEPNS_11CXXFoldExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromCXXFoldExprEPNS_11CXXFoldExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXFoldExpr(CXXFoldExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXFoldExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXFoldExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 239,
   FQN="clang::RecursiveASTVisitor::VisitCXXFoldExpr", NM="_ZN5clang19RecursiveASTVisitor16VisitCXXFoldExprEPNS_11CXXFoldExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitCXXFoldExprEPNS_11CXXFoldExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXFoldExpr(CXXFoldExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXInheritedCtorInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 245,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXInheritedCtorInitExpr", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromCXXInheritedCtorInitExprEPNS_24CXXInheritedCtorInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromCXXInheritedCtorInitExprEPNS_24CXXInheritedCtorInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXInheritedCtorInitExpr(CXXInheritedCtorInitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXInheritedCtorInitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXInheritedCtorInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 245,
   FQN="clang::RecursiveASTVisitor::VisitCXXInheritedCtorInitExpr", NM="_ZN5clang19RecursiveASTVisitor29VisitCXXInheritedCtorInitExprEPNS_24CXXInheritedCtorInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitCXXInheritedCtorInitExprEPNS_24CXXInheritedCtorInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXInheritedCtorInitExpr(CXXInheritedCtorInitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXNewExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 251,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXNewExpr", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromCXXNewExprEPNS_10CXXNewExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromCXXNewExprEPNS_10CXXNewExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXNewExpr(CXXNewExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXNewExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXNewExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 251,
   FQN="clang::RecursiveASTVisitor::VisitCXXNewExpr", NM="_ZN5clang19RecursiveASTVisitor15VisitCXXNewExprEPNS_10CXXNewExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitCXXNewExprEPNS_10CXXNewExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXNewExpr(CXXNewExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXNoexceptExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 257,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXNoexceptExpr", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromCXXNoexceptExprEPNS_15CXXNoexceptExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromCXXNoexceptExprEPNS_15CXXNoexceptExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXNoexceptExpr(CXXNoexceptExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXNoexceptExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXNoexceptExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 257,
   FQN="clang::RecursiveASTVisitor::VisitCXXNoexceptExpr", NM="_ZN5clang19RecursiveASTVisitor20VisitCXXNoexceptExprEPNS_15CXXNoexceptExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitCXXNoexceptExprEPNS_15CXXNoexceptExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXNoexceptExpr(CXXNoexceptExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXNullPtrLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 263,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXNullPtrLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromCXXNullPtrLiteralExprEPNS_21CXXNullPtrLiteralExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromCXXNullPtrLiteralExprEPNS_21CXXNullPtrLiteralExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXNullPtrLiteralExpr(CXXNullPtrLiteralExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXNullPtrLiteralExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXNullPtrLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 263,
   FQN="clang::RecursiveASTVisitor::VisitCXXNullPtrLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor26VisitCXXNullPtrLiteralExprEPNS_21CXXNullPtrLiteralExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitCXXNullPtrLiteralExprEPNS_21CXXNullPtrLiteralExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXNullPtrLiteralExpr(CXXNullPtrLiteralExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXPseudoDestructorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 269,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXPseudoDestructorExpr", NM="_ZN5clang19RecursiveASTVisitor33WalkUpFromCXXPseudoDestructorExprEPNS_23CXXPseudoDestructorExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33WalkUpFromCXXPseudoDestructorExprEPNS_23CXXPseudoDestructorExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXPseudoDestructorExpr(CXXPseudoDestructorExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXPseudoDestructorExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXPseudoDestructorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 269,
   FQN="clang::RecursiveASTVisitor::VisitCXXPseudoDestructorExpr", NM="_ZN5clang19RecursiveASTVisitor28VisitCXXPseudoDestructorExprEPNS_23CXXPseudoDestructorExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitCXXPseudoDestructorExprEPNS_23CXXPseudoDestructorExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXPseudoDestructorExpr(CXXPseudoDestructorExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXScalarValueInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 275,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXScalarValueInitExpr", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromCXXScalarValueInitExprEPNS_22CXXScalarValueInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromCXXScalarValueInitExprEPNS_22CXXScalarValueInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXScalarValueInitExpr(CXXScalarValueInitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXScalarValueInitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXScalarValueInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 275,
   FQN="clang::RecursiveASTVisitor::VisitCXXScalarValueInitExpr", NM="_ZN5clang19RecursiveASTVisitor27VisitCXXScalarValueInitExprEPNS_22CXXScalarValueInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitCXXScalarValueInitExprEPNS_22CXXScalarValueInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXScalarValueInitExpr(CXXScalarValueInitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXStdInitializerListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 281,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXStdInitializerListExpr", NM="_ZN5clang19RecursiveASTVisitor35WalkUpFromCXXStdInitializerListExprEPNS_25CXXStdInitializerListExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35WalkUpFromCXXStdInitializerListExprEPNS_25CXXStdInitializerListExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXStdInitializerListExpr(CXXStdInitializerListExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXStdInitializerListExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXStdInitializerListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 281,
   FQN="clang::RecursiveASTVisitor::VisitCXXStdInitializerListExpr", NM="_ZN5clang19RecursiveASTVisitor30VisitCXXStdInitializerListExprEPNS_25CXXStdInitializerListExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30VisitCXXStdInitializerListExprEPNS_25CXXStdInitializerListExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXStdInitializerListExpr(CXXStdInitializerListExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXThisExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 287,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXThisExpr", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromCXXThisExprEPNS_11CXXThisExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromCXXThisExprEPNS_11CXXThisExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXThisExpr(CXXThisExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXThisExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXThisExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 287,
   FQN="clang::RecursiveASTVisitor::VisitCXXThisExpr", NM="_ZN5clang19RecursiveASTVisitor16VisitCXXThisExprEPNS_11CXXThisExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitCXXThisExprEPNS_11CXXThisExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXThisExpr(CXXThisExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXThrowExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 293,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXThrowExpr", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromCXXThrowExprEPNS_12CXXThrowExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromCXXThrowExprEPNS_12CXXThrowExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXThrowExpr(CXXThrowExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXThrowExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXThrowExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 293,
   FQN="clang::RecursiveASTVisitor::VisitCXXThrowExpr", NM="_ZN5clang19RecursiveASTVisitor17VisitCXXThrowExprEPNS_12CXXThrowExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitCXXThrowExprEPNS_12CXXThrowExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXThrowExpr(CXXThrowExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXTypeidExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 299,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXTypeidExpr", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXTypeidExprEPNS_13CXXTypeidExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXTypeidExprEPNS_13CXXTypeidExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXTypeidExpr(CXXTypeidExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXTypeidExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXTypeidExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 299,
   FQN="clang::RecursiveASTVisitor::VisitCXXTypeidExpr", NM="_ZN5clang19RecursiveASTVisitor18VisitCXXTypeidExprEPNS_13CXXTypeidExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitCXXTypeidExprEPNS_13CXXTypeidExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXTypeidExpr(CXXTypeidExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXUnresolvedConstructExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 305,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXUnresolvedConstructExpr", NM="_ZN5clang19RecursiveASTVisitor36WalkUpFromCXXUnresolvedConstructExprEPNS_26CXXUnresolvedConstructExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36WalkUpFromCXXUnresolvedConstructExprEPNS_26CXXUnresolvedConstructExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXUnresolvedConstructExpr(CXXUnresolvedConstructExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXUnresolvedConstructExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXUnresolvedConstructExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 305,
   FQN="clang::RecursiveASTVisitor::VisitCXXUnresolvedConstructExpr", NM="_ZN5clang19RecursiveASTVisitor31VisitCXXUnresolvedConstructExprEPNS_26CXXUnresolvedConstructExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31VisitCXXUnresolvedConstructExprEPNS_26CXXUnresolvedConstructExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXUnresolvedConstructExpr(CXXUnresolvedConstructExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXUuidofExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 311,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXUuidofExpr", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXUuidofExprEPNS_13CXXUuidofExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXUuidofExprEPNS_13CXXUuidofExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXUuidofExpr(CXXUuidofExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXUuidofExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXUuidofExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 311,
   FQN="clang::RecursiveASTVisitor::VisitCXXUuidofExpr", NM="_ZN5clang19RecursiveASTVisitor18VisitCXXUuidofExprEPNS_13CXXUuidofExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitCXXUuidofExprEPNS_13CXXUuidofExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXUuidofExpr(CXXUuidofExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 317,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCallExpr", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromCallExprEPNS_8CallExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromCallExprEPNS_8CallExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCallExpr(CallExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCallExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 317,
   FQN="clang::RecursiveASTVisitor::VisitCallExpr", NM="_ZN5clang19RecursiveASTVisitor13VisitCallExprEPNS_8CallExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitCallExprEPNS_8CallExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCallExpr(CallExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCUDAKernelCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 321,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCUDAKernelCallExpr", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromCUDAKernelCallExprEPNS_18CUDAKernelCallExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromCUDAKernelCallExprEPNS_18CUDAKernelCallExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCUDAKernelCallExpr(CUDAKernelCallExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCallExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCUDAKernelCallExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCUDAKernelCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 321,
   FQN="clang::RecursiveASTVisitor::VisitCUDAKernelCallExpr", NM="_ZN5clang19RecursiveASTVisitor23VisitCUDAKernelCallExprEPNS_18CUDAKernelCallExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitCUDAKernelCallExprEPNS_18CUDAKernelCallExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCUDAKernelCallExpr(CUDAKernelCallExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXMemberCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 327,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXMemberCallExpr", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXMemberCallExprEPNS_17CXXMemberCallExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXMemberCallExprEPNS_17CXXMemberCallExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXMemberCallExpr(CXXMemberCallExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCallExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXMemberCallExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXMemberCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 327,
   FQN="clang::RecursiveASTVisitor::VisitCXXMemberCallExpr", NM="_ZN5clang19RecursiveASTVisitor22VisitCXXMemberCallExprEPNS_17CXXMemberCallExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitCXXMemberCallExprEPNS_17CXXMemberCallExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXMemberCallExpr(CXXMemberCallExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXOperatorCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 333,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXOperatorCallExpr", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromCXXOperatorCallExprEPNS_19CXXOperatorCallExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromCXXOperatorCallExprEPNS_19CXXOperatorCallExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXOperatorCallExpr(CXXOperatorCallExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCallExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXOperatorCallExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXOperatorCallExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 333,
   FQN="clang::RecursiveASTVisitor::VisitCXXOperatorCallExpr", NM="_ZN5clang19RecursiveASTVisitor24VisitCXXOperatorCallExprEPNS_19CXXOperatorCallExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitCXXOperatorCallExprEPNS_19CXXOperatorCallExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXOperatorCallExpr(CXXOperatorCallExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUserDefinedLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 339,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUserDefinedLiteral", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromUserDefinedLiteralEPNS_18UserDefinedLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromUserDefinedLiteralEPNS_18UserDefinedLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUserDefinedLiteral(UserDefinedLiteral /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCallExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUserDefinedLiteral(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUserDefinedLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 339,
   FQN="clang::RecursiveASTVisitor::VisitUserDefinedLiteral", NM="_ZN5clang19RecursiveASTVisitor23VisitUserDefinedLiteralEPNS_18UserDefinedLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitUserDefinedLiteralEPNS_18UserDefinedLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUserDefinedLiteral(UserDefinedLiteral /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 349,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCastExpr", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromCastExprEPNS_8CastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromCastExprEPNS_8CastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCastExpr(CastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 349,
   FQN="clang::RecursiveASTVisitor::VisitCastExpr", NM="_ZN5clang19RecursiveASTVisitor13VisitCastExprEPNS_8CastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitCastExprEPNS_8CastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCastExpr(CastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromExplicitCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 353,
   FQN="clang::RecursiveASTVisitor::WalkUpFromExplicitCastExpr", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromExplicitCastExprEPNS_16ExplicitCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromExplicitCastExprEPNS_16ExplicitCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromExplicitCastExpr(ExplicitCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitExplicitCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitExplicitCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 353,
   FQN="clang::RecursiveASTVisitor::VisitExplicitCastExpr", NM="_ZN5clang19RecursiveASTVisitor21VisitExplicitCastExprEPNS_16ExplicitCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitExplicitCastExprEPNS_16ExplicitCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitExplicitCastExpr(ExplicitCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCStyleCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 357,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCStyleCastExpr", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromCStyleCastExprEPNS_14CStyleCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromCStyleCastExprEPNS_14CStyleCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCStyleCastExpr(CStyleCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExplicitCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCStyleCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCStyleCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 357,
   FQN="clang::RecursiveASTVisitor::VisitCStyleCastExpr", NM="_ZN5clang19RecursiveASTVisitor19VisitCStyleCastExprEPNS_14CStyleCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitCStyleCastExprEPNS_14CStyleCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCStyleCastExpr(CStyleCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXFunctionalCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 363,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXFunctionalCastExpr", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromCXXFunctionalCastExprEPNS_21CXXFunctionalCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromCXXFunctionalCastExprEPNS_21CXXFunctionalCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXFunctionalCastExpr(CXXFunctionalCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExplicitCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXFunctionalCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXFunctionalCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 363,
   FQN="clang::RecursiveASTVisitor::VisitCXXFunctionalCastExpr", NM="_ZN5clang19RecursiveASTVisitor26VisitCXXFunctionalCastExprEPNS_21CXXFunctionalCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitCXXFunctionalCastExprEPNS_21CXXFunctionalCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXFunctionalCastExpr(CXXFunctionalCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXNamedCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXNamedCastExpr", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromCXXNamedCastExprEPNS_16CXXNamedCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromCXXNamedCastExprEPNS_16CXXNamedCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXNamedCastExpr(CXXNamedCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExplicitCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXNamedCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXNamedCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitCXXNamedCastExpr", NM="_ZN5clang19RecursiveASTVisitor21VisitCXXNamedCastExprEPNS_16CXXNamedCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitCXXNamedCastExprEPNS_16CXXNamedCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXNamedCastExpr(CXXNamedCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXConstCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 373,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXConstCastExpr", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromCXXConstCastExprEPNS_16CXXConstCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromCXXConstCastExprEPNS_16CXXConstCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXConstCastExpr(CXXConstCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCXXNamedCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXConstCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXConstCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 373,
   FQN="clang::RecursiveASTVisitor::VisitCXXConstCastExpr", NM="_ZN5clang19RecursiveASTVisitor21VisitCXXConstCastExprEPNS_16CXXConstCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitCXXConstCastExprEPNS_16CXXConstCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXConstCastExpr(CXXConstCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXDynamicCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 379,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXDynamicCastExpr", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromCXXDynamicCastExprEPNS_18CXXDynamicCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromCXXDynamicCastExprEPNS_18CXXDynamicCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXDynamicCastExpr(CXXDynamicCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCXXNamedCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXDynamicCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXDynamicCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 379,
   FQN="clang::RecursiveASTVisitor::VisitCXXDynamicCastExpr", NM="_ZN5clang19RecursiveASTVisitor23VisitCXXDynamicCastExprEPNS_18CXXDynamicCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitCXXDynamicCastExprEPNS_18CXXDynamicCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXDynamicCastExpr(CXXDynamicCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXReinterpretCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 385,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXReinterpretCastExpr", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromCXXReinterpretCastExprEPNS_22CXXReinterpretCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromCXXReinterpretCastExprEPNS_22CXXReinterpretCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXReinterpretCastExpr(CXXReinterpretCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCXXNamedCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXReinterpretCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXReinterpretCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 385,
   FQN="clang::RecursiveASTVisitor::VisitCXXReinterpretCastExpr", NM="_ZN5clang19RecursiveASTVisitor27VisitCXXReinterpretCastExprEPNS_22CXXReinterpretCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitCXXReinterpretCastExprEPNS_22CXXReinterpretCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXReinterpretCastExpr(CXXReinterpretCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXStaticCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXStaticCastExpr", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXStaticCastExprEPNS_17CXXStaticCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXStaticCastExprEPNS_17CXXStaticCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXStaticCastExpr(CXXStaticCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCXXNamedCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXStaticCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXStaticCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitCXXStaticCastExpr", NM="_ZN5clang19RecursiveASTVisitor22VisitCXXStaticCastExprEPNS_17CXXStaticCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitCXXStaticCastExprEPNS_17CXXStaticCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXStaticCastExpr(CXXStaticCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCBridgedCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCBridgedCastExpr", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromObjCBridgedCastExprEPNS_19ObjCBridgedCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromObjCBridgedCastExprEPNS_19ObjCBridgedCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCBridgedCastExpr(ObjCBridgedCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExplicitCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCBridgedCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCBridgedCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitObjCBridgedCastExpr", NM="_ZN5clang19RecursiveASTVisitor24VisitObjCBridgedCastExprEPNS_19ObjCBridgedCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitObjCBridgedCastExprEPNS_19ObjCBridgedCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCBridgedCastExpr(ObjCBridgedCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromImplicitCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 411,
   FQN="clang::RecursiveASTVisitor::WalkUpFromImplicitCastExpr", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromImplicitCastExprEPNS_16ImplicitCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromImplicitCastExprEPNS_16ImplicitCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromImplicitCastExpr(ImplicitCastExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCastExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitImplicitCastExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitImplicitCastExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 411,
   FQN="clang::RecursiveASTVisitor::VisitImplicitCastExpr", NM="_ZN5clang19RecursiveASTVisitor21VisitImplicitCastExprEPNS_16ImplicitCastExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitImplicitCastExprEPNS_16ImplicitCastExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitImplicitCastExpr(ImplicitCastExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCharacterLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 421,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCharacterLiteral", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromCharacterLiteralEPNS_16CharacterLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromCharacterLiteralEPNS_16CharacterLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCharacterLiteral(CharacterLiteral /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCharacterLiteral(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCharacterLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 421,
   FQN="clang::RecursiveASTVisitor::VisitCharacterLiteral", NM="_ZN5clang19RecursiveASTVisitor21VisitCharacterLiteralEPNS_16CharacterLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitCharacterLiteralEPNS_16CharacterLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCharacterLiteral(CharacterLiteral /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromChooseExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 427,
   FQN="clang::RecursiveASTVisitor::WalkUpFromChooseExpr", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromChooseExprEPNS_10ChooseExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromChooseExprEPNS_10ChooseExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromChooseExpr(ChooseExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitChooseExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitChooseExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 427,
   FQN="clang::RecursiveASTVisitor::VisitChooseExpr", NM="_ZN5clang19RecursiveASTVisitor15VisitChooseExprEPNS_10ChooseExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitChooseExprEPNS_10ChooseExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitChooseExpr(ChooseExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCompoundLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 433,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCompoundLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromCompoundLiteralExprEPNS_19CompoundLiteralExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromCompoundLiteralExprEPNS_19CompoundLiteralExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCompoundLiteralExpr(CompoundLiteralExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCompoundLiteralExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCompoundLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 433,
   FQN="clang::RecursiveASTVisitor::VisitCompoundLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor24VisitCompoundLiteralExprEPNS_19CompoundLiteralExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitCompoundLiteralExprEPNS_19CompoundLiteralExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCompoundLiteralExpr(CompoundLiteralExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromConvertVectorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 439,
   FQN="clang::RecursiveASTVisitor::WalkUpFromConvertVectorExpr", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromConvertVectorExprEPNS_17ConvertVectorExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromConvertVectorExprEPNS_17ConvertVectorExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromConvertVectorExpr(ConvertVectorExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitConvertVectorExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConvertVectorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 439,
   FQN="clang::RecursiveASTVisitor::VisitConvertVectorExpr", NM="_ZN5clang19RecursiveASTVisitor22VisitConvertVectorExprEPNS_17ConvertVectorExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitConvertVectorExprEPNS_17ConvertVectorExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConvertVectorExpr(ConvertVectorExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCoroutineSuspendExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 445,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCoroutineSuspendExpr", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromCoroutineSuspendExprEPNS_20CoroutineSuspendExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromCoroutineSuspendExprEPNS_20CoroutineSuspendExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCoroutineSuspendExpr(CoroutineSuspendExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCoroutineSuspendExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCoroutineSuspendExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 445,
   FQN="clang::RecursiveASTVisitor::VisitCoroutineSuspendExpr", NM="_ZN5clang19RecursiveASTVisitor25VisitCoroutineSuspendExprEPNS_20CoroutineSuspendExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitCoroutineSuspendExprEPNS_20CoroutineSuspendExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCoroutineSuspendExpr(CoroutineSuspendExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCoawaitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 449,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCoawaitExpr", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromCoawaitExprEPNS_11CoawaitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromCoawaitExprEPNS_11CoawaitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCoawaitExpr(CoawaitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCoroutineSuspendExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCoawaitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCoawaitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 449,
   FQN="clang::RecursiveASTVisitor::VisitCoawaitExpr", NM="_ZN5clang19RecursiveASTVisitor16VisitCoawaitExprEPNS_11CoawaitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitCoawaitExprEPNS_11CoawaitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCoawaitExpr(CoawaitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCoyieldExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 455,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCoyieldExpr", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromCoyieldExprEPNS_11CoyieldExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromCoyieldExprEPNS_11CoyieldExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCoyieldExpr(CoyieldExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCoroutineSuspendExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCoyieldExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCoyieldExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 455,
   FQN="clang::RecursiveASTVisitor::VisitCoyieldExpr", NM="_ZN5clang19RecursiveASTVisitor16VisitCoyieldExprEPNS_11CoyieldExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitCoyieldExprEPNS_11CoyieldExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCoyieldExpr(CoyieldExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDeclRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 465,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDeclRefExpr", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromDeclRefExprEPNS_11DeclRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromDeclRefExprEPNS_11DeclRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDeclRefExpr(DeclRefExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDeclRefExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDeclRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 465,
   FQN="clang::RecursiveASTVisitor::VisitDeclRefExpr", NM="_ZN5clang19RecursiveASTVisitor16VisitDeclRefExprEPNS_11DeclRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitDeclRefExprEPNS_11DeclRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDeclRefExpr(DeclRefExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDependentScopeDeclRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 471,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDependentScopeDeclRefExpr", NM="_ZN5clang19RecursiveASTVisitor35WalkUpFromDependentScopeDeclRefExprEPNS_25DependentScopeDeclRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35WalkUpFromDependentScopeDeclRefExprEPNS_25DependentScopeDeclRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDependentScopeDeclRefExpr(DependentScopeDeclRefExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDependentScopeDeclRefExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDependentScopeDeclRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 471,
   FQN="clang::RecursiveASTVisitor::VisitDependentScopeDeclRefExpr", NM="_ZN5clang19RecursiveASTVisitor30VisitDependentScopeDeclRefExprEPNS_25DependentScopeDeclRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30VisitDependentScopeDeclRefExprEPNS_25DependentScopeDeclRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDependentScopeDeclRefExpr(DependentScopeDeclRefExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDesignatedInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 477,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDesignatedInitExpr", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromDesignatedInitExprEPNS_18DesignatedInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromDesignatedInitExprEPNS_18DesignatedInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDesignatedInitExpr(DesignatedInitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDesignatedInitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDesignatedInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 477,
   FQN="clang::RecursiveASTVisitor::VisitDesignatedInitExpr", NM="_ZN5clang19RecursiveASTVisitor23VisitDesignatedInitExprEPNS_18DesignatedInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitDesignatedInitExprEPNS_18DesignatedInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDesignatedInitExpr(DesignatedInitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDesignatedInitUpdateExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 483,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDesignatedInitUpdateExpr", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromDesignatedInitUpdateExprEPNS_24DesignatedInitUpdateExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromDesignatedInitUpdateExprEPNS_24DesignatedInitUpdateExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDesignatedInitUpdateExpr(DesignatedInitUpdateExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDesignatedInitUpdateExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDesignatedInitUpdateExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 483,
   FQN="clang::RecursiveASTVisitor::VisitDesignatedInitUpdateExpr", NM="_ZN5clang19RecursiveASTVisitor29VisitDesignatedInitUpdateExprEPNS_24DesignatedInitUpdateExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitDesignatedInitUpdateExprEPNS_24DesignatedInitUpdateExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDesignatedInitUpdateExpr(DesignatedInitUpdateExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromExprWithCleanups">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 489,
   FQN="clang::RecursiveASTVisitor::WalkUpFromExprWithCleanups", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromExprWithCleanupsEPNS_16ExprWithCleanupsE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromExprWithCleanupsEPNS_16ExprWithCleanupsE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromExprWithCleanups(ExprWithCleanups /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitExprWithCleanups(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitExprWithCleanups">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 489,
   FQN="clang::RecursiveASTVisitor::VisitExprWithCleanups", NM="_ZN5clang19RecursiveASTVisitor21VisitExprWithCleanupsEPNS_16ExprWithCleanupsE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitExprWithCleanupsEPNS_16ExprWithCleanupsE")
  //</editor-fold>
  public default/*interface*/ boolean VisitExprWithCleanups(ExprWithCleanups /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromExpressionTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 495,
   FQN="clang::RecursiveASTVisitor::WalkUpFromExpressionTraitExpr", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromExpressionTraitExprEPNS_19ExpressionTraitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromExpressionTraitExprEPNS_19ExpressionTraitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromExpressionTraitExpr(ExpressionTraitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitExpressionTraitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitExpressionTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 495,
   FQN="clang::RecursiveASTVisitor::VisitExpressionTraitExpr", NM="_ZN5clang19RecursiveASTVisitor24VisitExpressionTraitExprEPNS_19ExpressionTraitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitExpressionTraitExprEPNS_19ExpressionTraitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitExpressionTraitExpr(ExpressionTraitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromExtVectorElementExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 501,
   FQN="clang::RecursiveASTVisitor::WalkUpFromExtVectorElementExpr", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromExtVectorElementExprEPNS_20ExtVectorElementExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromExtVectorElementExprEPNS_20ExtVectorElementExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromExtVectorElementExpr(ExtVectorElementExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitExtVectorElementExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitExtVectorElementExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 501,
   FQN="clang::RecursiveASTVisitor::VisitExtVectorElementExpr", NM="_ZN5clang19RecursiveASTVisitor25VisitExtVectorElementExprEPNS_20ExtVectorElementExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitExtVectorElementExprEPNS_20ExtVectorElementExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitExtVectorElementExpr(ExtVectorElementExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFloatingLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 507,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFloatingLiteral", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromFloatingLiteralEPNS_15FloatingLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromFloatingLiteralEPNS_15FloatingLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFloatingLiteral(FloatingLiteral /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFloatingLiteral(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFloatingLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 507,
   FQN="clang::RecursiveASTVisitor::VisitFloatingLiteral", NM="_ZN5clang19RecursiveASTVisitor20VisitFloatingLiteralEPNS_15FloatingLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitFloatingLiteralEPNS_15FloatingLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFloatingLiteral(FloatingLiteral /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFunctionParmPackExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 513,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFunctionParmPackExpr", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromFunctionParmPackExprEPNS_20FunctionParmPackExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromFunctionParmPackExprEPNS_20FunctionParmPackExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFunctionParmPackExpr(FunctionParmPackExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFunctionParmPackExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFunctionParmPackExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 513,
   FQN="clang::RecursiveASTVisitor::VisitFunctionParmPackExpr", NM="_ZN5clang19RecursiveASTVisitor25VisitFunctionParmPackExprEPNS_20FunctionParmPackExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitFunctionParmPackExprEPNS_20FunctionParmPackExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFunctionParmPackExpr(FunctionParmPackExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromGNUNullExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 519,
   FQN="clang::RecursiveASTVisitor::WalkUpFromGNUNullExpr", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromGNUNullExprEPNS_11GNUNullExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromGNUNullExprEPNS_11GNUNullExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromGNUNullExpr(GNUNullExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitGNUNullExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitGNUNullExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 519,
   FQN="clang::RecursiveASTVisitor::VisitGNUNullExpr", NM="_ZN5clang19RecursiveASTVisitor16VisitGNUNullExprEPNS_11GNUNullExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitGNUNullExprEPNS_11GNUNullExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitGNUNullExpr(GNUNullExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromGenericSelectionExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 525,
   FQN="clang::RecursiveASTVisitor::WalkUpFromGenericSelectionExpr", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromGenericSelectionExprEPNS_20GenericSelectionExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromGenericSelectionExprEPNS_20GenericSelectionExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromGenericSelectionExpr(GenericSelectionExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitGenericSelectionExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitGenericSelectionExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 525,
   FQN="clang::RecursiveASTVisitor::VisitGenericSelectionExpr", NM="_ZN5clang19RecursiveASTVisitor25VisitGenericSelectionExprEPNS_20GenericSelectionExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitGenericSelectionExprEPNS_20GenericSelectionExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitGenericSelectionExpr(GenericSelectionExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromImaginaryLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 531,
   FQN="clang::RecursiveASTVisitor::WalkUpFromImaginaryLiteral", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromImaginaryLiteralEPNS_16ImaginaryLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromImaginaryLiteralEPNS_16ImaginaryLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromImaginaryLiteral(ImaginaryLiteral /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitImaginaryLiteral(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitImaginaryLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 531,
   FQN="clang::RecursiveASTVisitor::VisitImaginaryLiteral", NM="_ZN5clang19RecursiveASTVisitor21VisitImaginaryLiteralEPNS_16ImaginaryLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitImaginaryLiteralEPNS_16ImaginaryLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean VisitImaginaryLiteral(ImaginaryLiteral /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromImplicitValueInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 537,
   FQN="clang::RecursiveASTVisitor::WalkUpFromImplicitValueInitExpr", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromImplicitValueInitExprEPNS_21ImplicitValueInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromImplicitValueInitExprEPNS_21ImplicitValueInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromImplicitValueInitExpr(ImplicitValueInitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitImplicitValueInitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitImplicitValueInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 537,
   FQN="clang::RecursiveASTVisitor::VisitImplicitValueInitExpr", NM="_ZN5clang19RecursiveASTVisitor26VisitImplicitValueInitExprEPNS_21ImplicitValueInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitImplicitValueInitExprEPNS_21ImplicitValueInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitImplicitValueInitExpr(ImplicitValueInitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromInitListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 543,
   FQN="clang::RecursiveASTVisitor::WalkUpFromInitListExpr", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromInitListExprEPNS_12InitListExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromInitListExprEPNS_12InitListExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromInitListExpr(InitListExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitInitListExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitInitListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 543,
   FQN="clang::RecursiveASTVisitor::VisitInitListExpr", NM="_ZN5clang19RecursiveASTVisitor17VisitInitListExprEPNS_12InitListExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitInitListExprEPNS_12InitListExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitInitListExpr(InitListExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromIntegerLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 549,
   FQN="clang::RecursiveASTVisitor::WalkUpFromIntegerLiteral", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromIntegerLiteralEPNS_14IntegerLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromIntegerLiteralEPNS_14IntegerLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromIntegerLiteral(IntegerLiteral /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitIntegerLiteral(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIntegerLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 549,
   FQN="clang::RecursiveASTVisitor::VisitIntegerLiteral", NM="_ZN5clang19RecursiveASTVisitor19VisitIntegerLiteralEPNS_14IntegerLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitIntegerLiteralEPNS_14IntegerLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIntegerLiteral(IntegerLiteral /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromLambdaExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 555,
   FQN="clang::RecursiveASTVisitor::WalkUpFromLambdaExpr", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromLambdaExprEPNS_10LambdaExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromLambdaExprEPNS_10LambdaExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromLambdaExpr(LambdaExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitLambdaExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLambdaExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 555,
   FQN="clang::RecursiveASTVisitor::VisitLambdaExpr", NM="_ZN5clang19RecursiveASTVisitor15VisitLambdaExprEPNS_10LambdaExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitLambdaExprEPNS_10LambdaExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLambdaExpr(LambdaExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromMSPropertyRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 561,
   FQN="clang::RecursiveASTVisitor::WalkUpFromMSPropertyRefExpr", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromMSPropertyRefExprEPNS_17MSPropertyRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromMSPropertyRefExprEPNS_17MSPropertyRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromMSPropertyRefExpr(MSPropertyRefExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitMSPropertyRefExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSPropertyRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 561,
   FQN="clang::RecursiveASTVisitor::VisitMSPropertyRefExpr", NM="_ZN5clang19RecursiveASTVisitor22VisitMSPropertyRefExprEPNS_17MSPropertyRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitMSPropertyRefExprEPNS_17MSPropertyRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSPropertyRefExpr(MSPropertyRefExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromMSPropertySubscriptExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 567,
   FQN="clang::RecursiveASTVisitor::WalkUpFromMSPropertySubscriptExpr", NM="_ZN5clang19RecursiveASTVisitor33WalkUpFromMSPropertySubscriptExprEPNS_23MSPropertySubscriptExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33WalkUpFromMSPropertySubscriptExprEPNS_23MSPropertySubscriptExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromMSPropertySubscriptExpr(MSPropertySubscriptExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitMSPropertySubscriptExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSPropertySubscriptExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 567,
   FQN="clang::RecursiveASTVisitor::VisitMSPropertySubscriptExpr", NM="_ZN5clang19RecursiveASTVisitor28VisitMSPropertySubscriptExprEPNS_23MSPropertySubscriptExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitMSPropertySubscriptExprEPNS_23MSPropertySubscriptExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSPropertySubscriptExpr(MSPropertySubscriptExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromMaterializeTemporaryExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 573,
   FQN="clang::RecursiveASTVisitor::WalkUpFromMaterializeTemporaryExpr", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromMaterializeTemporaryExprEPNS_24MaterializeTemporaryExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromMaterializeTemporaryExprEPNS_24MaterializeTemporaryExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromMaterializeTemporaryExpr(MaterializeTemporaryExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitMaterializeTemporaryExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMaterializeTemporaryExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 573,
   FQN="clang::RecursiveASTVisitor::VisitMaterializeTemporaryExpr", NM="_ZN5clang19RecursiveASTVisitor29VisitMaterializeTemporaryExprEPNS_24MaterializeTemporaryExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitMaterializeTemporaryExprEPNS_24MaterializeTemporaryExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMaterializeTemporaryExpr(MaterializeTemporaryExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromMemberExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 579,
   FQN="clang::RecursiveASTVisitor::WalkUpFromMemberExpr", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromMemberExprEPNS_10MemberExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromMemberExprEPNS_10MemberExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromMemberExpr(MemberExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitMemberExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMemberExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 579,
   FQN="clang::RecursiveASTVisitor::VisitMemberExpr", NM="_ZN5clang19RecursiveASTVisitor15VisitMemberExprEPNS_10MemberExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitMemberExprEPNS_10MemberExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMemberExpr(MemberExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromNoInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 585,
   FQN="clang::RecursiveASTVisitor::WalkUpFromNoInitExpr", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromNoInitExprEPNS_10NoInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromNoInitExprEPNS_10NoInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromNoInitExpr(NoInitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitNoInitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNoInitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 585,
   FQN="clang::RecursiveASTVisitor::VisitNoInitExpr", NM="_ZN5clang19RecursiveASTVisitor15VisitNoInitExprEPNS_10NoInitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitNoInitExprEPNS_10NoInitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNoInitExpr(NoInitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPArraySectionExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 591,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPArraySectionExpr", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPArraySectionExprEPNS_19OMPArraySectionExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPArraySectionExprEPNS_19OMPArraySectionExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPArraySectionExpr(OMPArraySectionExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPArraySectionExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPArraySectionExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 591,
   FQN="clang::RecursiveASTVisitor::VisitOMPArraySectionExpr", NM="_ZN5clang19RecursiveASTVisitor24VisitOMPArraySectionExprEPNS_19OMPArraySectionExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitOMPArraySectionExprEPNS_19OMPArraySectionExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPArraySectionExpr(OMPArraySectionExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCArrayLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 597,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCArrayLiteral", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCArrayLiteralEPNS_16ObjCArrayLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCArrayLiteralEPNS_16ObjCArrayLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCArrayLiteral(ObjCArrayLiteral /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCArrayLiteral(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCArrayLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 597,
   FQN="clang::RecursiveASTVisitor::VisitObjCArrayLiteral", NM="_ZN5clang19RecursiveASTVisitor21VisitObjCArrayLiteralEPNS_16ObjCArrayLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitObjCArrayLiteralEPNS_16ObjCArrayLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCArrayLiteral(ObjCArrayLiteral /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCAvailabilityCheckExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 603,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCAvailabilityCheckExpr", NM="_ZN5clang19RecursiveASTVisitor35WalkUpFromObjCAvailabilityCheckExprEPNS_25ObjCAvailabilityCheckExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35WalkUpFromObjCAvailabilityCheckExprEPNS_25ObjCAvailabilityCheckExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCAvailabilityCheckExpr(ObjCAvailabilityCheckExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCAvailabilityCheckExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCAvailabilityCheckExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 603,
   FQN="clang::RecursiveASTVisitor::VisitObjCAvailabilityCheckExpr", NM="_ZN5clang19RecursiveASTVisitor30VisitObjCAvailabilityCheckExprEPNS_25ObjCAvailabilityCheckExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30VisitObjCAvailabilityCheckExprEPNS_25ObjCAvailabilityCheckExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCAvailabilityCheckExpr(ObjCAvailabilityCheckExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCBoolLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 609,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCBoolLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromObjCBoolLiteralExprEPNS_19ObjCBoolLiteralExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromObjCBoolLiteralExprEPNS_19ObjCBoolLiteralExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCBoolLiteralExpr(ObjCBoolLiteralExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCBoolLiteralExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCBoolLiteralExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 609,
   FQN="clang::RecursiveASTVisitor::VisitObjCBoolLiteralExpr", NM="_ZN5clang19RecursiveASTVisitor24VisitObjCBoolLiteralExprEPNS_19ObjCBoolLiteralExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitObjCBoolLiteralExprEPNS_19ObjCBoolLiteralExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCBoolLiteralExpr(ObjCBoolLiteralExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCBoxedExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 615,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCBoxedExpr", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromObjCBoxedExprEPNS_13ObjCBoxedExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromObjCBoxedExprEPNS_13ObjCBoxedExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCBoxedExpr(ObjCBoxedExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCBoxedExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCBoxedExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 615,
   FQN="clang::RecursiveASTVisitor::VisitObjCBoxedExpr", NM="_ZN5clang19RecursiveASTVisitor18VisitObjCBoxedExprEPNS_13ObjCBoxedExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitObjCBoxedExprEPNS_13ObjCBoxedExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCBoxedExpr(ObjCBoxedExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCDictionaryLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 621,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCDictionaryLiteral", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromObjCDictionaryLiteralEPNS_21ObjCDictionaryLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromObjCDictionaryLiteralEPNS_21ObjCDictionaryLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCDictionaryLiteral(ObjCDictionaryLiteral /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCDictionaryLiteral(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCDictionaryLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 621,
   FQN="clang::RecursiveASTVisitor::VisitObjCDictionaryLiteral", NM="_ZN5clang19RecursiveASTVisitor26VisitObjCDictionaryLiteralEPNS_21ObjCDictionaryLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitObjCDictionaryLiteralEPNS_21ObjCDictionaryLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCDictionaryLiteral(ObjCDictionaryLiteral /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCEncodeExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 627,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCEncodeExpr", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromObjCEncodeExprEPNS_14ObjCEncodeExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromObjCEncodeExprEPNS_14ObjCEncodeExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCEncodeExpr(ObjCEncodeExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCEncodeExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCEncodeExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 627,
   FQN="clang::RecursiveASTVisitor::VisitObjCEncodeExpr", NM="_ZN5clang19RecursiveASTVisitor19VisitObjCEncodeExprEPNS_14ObjCEncodeExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitObjCEncodeExprEPNS_14ObjCEncodeExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCEncodeExpr(ObjCEncodeExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCIndirectCopyRestoreExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 633,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCIndirectCopyRestoreExpr", NM="_ZN5clang19RecursiveASTVisitor37WalkUpFromObjCIndirectCopyRestoreExprEPNS_27ObjCIndirectCopyRestoreExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37WalkUpFromObjCIndirectCopyRestoreExprEPNS_27ObjCIndirectCopyRestoreExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCIndirectCopyRestoreExpr(ObjCIndirectCopyRestoreExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCIndirectCopyRestoreExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCIndirectCopyRestoreExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 633,
   FQN="clang::RecursiveASTVisitor::VisitObjCIndirectCopyRestoreExpr", NM="_ZN5clang19RecursiveASTVisitor32VisitObjCIndirectCopyRestoreExprEPNS_27ObjCIndirectCopyRestoreExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32VisitObjCIndirectCopyRestoreExprEPNS_27ObjCIndirectCopyRestoreExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCIndirectCopyRestoreExpr(ObjCIndirectCopyRestoreExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCIsaExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 639,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCIsaExpr", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromObjCIsaExprEPNS_11ObjCIsaExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromObjCIsaExprEPNS_11ObjCIsaExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCIsaExpr(ObjCIsaExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCIsaExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCIsaExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 639,
   FQN="clang::RecursiveASTVisitor::VisitObjCIsaExpr", NM="_ZN5clang19RecursiveASTVisitor16VisitObjCIsaExprEPNS_11ObjCIsaExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitObjCIsaExprEPNS_11ObjCIsaExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCIsaExpr(ObjCIsaExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCIvarRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 645,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCIvarRefExpr", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromObjCIvarRefExprEPNS_15ObjCIvarRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromObjCIvarRefExprEPNS_15ObjCIvarRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCIvarRefExpr(ObjCIvarRefExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCIvarRefExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCIvarRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 645,
   FQN="clang::RecursiveASTVisitor::VisitObjCIvarRefExpr", NM="_ZN5clang19RecursiveASTVisitor20VisitObjCIvarRefExprEPNS_15ObjCIvarRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitObjCIvarRefExprEPNS_15ObjCIvarRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCIvarRefExpr(ObjCIvarRefExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCMessageExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 651,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCMessageExpr", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromObjCMessageExprEPNS_15ObjCMessageExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromObjCMessageExprEPNS_15ObjCMessageExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCMessageExpr(ObjCMessageExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCMessageExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCMessageExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 651,
   FQN="clang::RecursiveASTVisitor::VisitObjCMessageExpr", NM="_ZN5clang19RecursiveASTVisitor20VisitObjCMessageExprEPNS_15ObjCMessageExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitObjCMessageExprEPNS_15ObjCMessageExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCMessageExpr(ObjCMessageExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCPropertyRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 657,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCPropertyRefExpr", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromObjCPropertyRefExprEPNS_19ObjCPropertyRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromObjCPropertyRefExprEPNS_19ObjCPropertyRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCPropertyRefExpr(ObjCPropertyRefExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCPropertyRefExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCPropertyRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 657,
   FQN="clang::RecursiveASTVisitor::VisitObjCPropertyRefExpr", NM="_ZN5clang19RecursiveASTVisitor24VisitObjCPropertyRefExprEPNS_19ObjCPropertyRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitObjCPropertyRefExprEPNS_19ObjCPropertyRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCPropertyRefExpr(ObjCPropertyRefExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCProtocolExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 663,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCProtocolExpr", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCProtocolExprEPNS_16ObjCProtocolExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCProtocolExprEPNS_16ObjCProtocolExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCProtocolExpr(ObjCProtocolExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCProtocolExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCProtocolExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 663,
   FQN="clang::RecursiveASTVisitor::VisitObjCProtocolExpr", NM="_ZN5clang19RecursiveASTVisitor21VisitObjCProtocolExprEPNS_16ObjCProtocolExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitObjCProtocolExprEPNS_16ObjCProtocolExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCProtocolExpr(ObjCProtocolExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCSelectorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 669,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCSelectorExpr", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCSelectorExprEPNS_16ObjCSelectorExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCSelectorExprEPNS_16ObjCSelectorExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCSelectorExpr(ObjCSelectorExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCSelectorExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCSelectorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 669,
   FQN="clang::RecursiveASTVisitor::VisitObjCSelectorExpr", NM="_ZN5clang19RecursiveASTVisitor21VisitObjCSelectorExprEPNS_16ObjCSelectorExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitObjCSelectorExprEPNS_16ObjCSelectorExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCSelectorExpr(ObjCSelectorExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCStringLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 675,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCStringLiteral", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCStringLiteralEPNS_17ObjCStringLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCStringLiteralEPNS_17ObjCStringLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCStringLiteral(ObjCStringLiteral /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCStringLiteral(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCStringLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 675,
   FQN="clang::RecursiveASTVisitor::VisitObjCStringLiteral", NM="_ZN5clang19RecursiveASTVisitor22VisitObjCStringLiteralEPNS_17ObjCStringLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitObjCStringLiteralEPNS_17ObjCStringLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCStringLiteral(ObjCStringLiteral /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCSubscriptRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 681,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCSubscriptRefExpr", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromObjCSubscriptRefExprEPNS_20ObjCSubscriptRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromObjCSubscriptRefExprEPNS_20ObjCSubscriptRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCSubscriptRefExpr(ObjCSubscriptRefExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCSubscriptRefExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCSubscriptRefExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 681,
   FQN="clang::RecursiveASTVisitor::VisitObjCSubscriptRefExpr", NM="_ZN5clang19RecursiveASTVisitor25VisitObjCSubscriptRefExprEPNS_20ObjCSubscriptRefExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitObjCSubscriptRefExprEPNS_20ObjCSubscriptRefExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCSubscriptRefExpr(ObjCSubscriptRefExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOffsetOfExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 687,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOffsetOfExpr", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromOffsetOfExprEPNS_12OffsetOfExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromOffsetOfExprEPNS_12OffsetOfExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOffsetOfExpr(OffsetOfExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOffsetOfExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOffsetOfExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 687,
   FQN="clang::RecursiveASTVisitor::VisitOffsetOfExpr", NM="_ZN5clang19RecursiveASTVisitor17VisitOffsetOfExprEPNS_12OffsetOfExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitOffsetOfExprEPNS_12OffsetOfExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOffsetOfExpr(OffsetOfExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOpaqueValueExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 693,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOpaqueValueExpr", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromOpaqueValueExprEPNS_15OpaqueValueExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromOpaqueValueExprEPNS_15OpaqueValueExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOpaqueValueExpr(OpaqueValueExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOpaqueValueExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOpaqueValueExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 693,
   FQN="clang::RecursiveASTVisitor::VisitOpaqueValueExpr", NM="_ZN5clang19RecursiveASTVisitor20VisitOpaqueValueExprEPNS_15OpaqueValueExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOpaqueValueExprEPNS_15OpaqueValueExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOpaqueValueExpr(OpaqueValueExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOverloadExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 699,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOverloadExpr", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromOverloadExprEPNS_12OverloadExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromOverloadExprEPNS_12OverloadExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOverloadExpr(OverloadExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOverloadExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOverloadExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 699,
   FQN="clang::RecursiveASTVisitor::VisitOverloadExpr", NM="_ZN5clang19RecursiveASTVisitor17VisitOverloadExprEPNS_12OverloadExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitOverloadExprEPNS_12OverloadExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOverloadExpr(OverloadExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnresolvedLookupExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 703,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnresolvedLookupExpr", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromUnresolvedLookupExprEPNS_20UnresolvedLookupExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromUnresolvedLookupExprEPNS_20UnresolvedLookupExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnresolvedLookupExpr(UnresolvedLookupExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOverloadExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnresolvedLookupExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnresolvedLookupExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 703,
   FQN="clang::RecursiveASTVisitor::VisitUnresolvedLookupExpr", NM="_ZN5clang19RecursiveASTVisitor25VisitUnresolvedLookupExprEPNS_20UnresolvedLookupExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitUnresolvedLookupExprEPNS_20UnresolvedLookupExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnresolvedLookupExpr(UnresolvedLookupExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnresolvedMemberExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 709,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnresolvedMemberExpr", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromUnresolvedMemberExprEPNS_20UnresolvedMemberExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromUnresolvedMemberExprEPNS_20UnresolvedMemberExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnresolvedMemberExpr(UnresolvedMemberExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOverloadExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnresolvedMemberExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnresolvedMemberExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 709,
   FQN="clang::RecursiveASTVisitor::VisitUnresolvedMemberExpr", NM="_ZN5clang19RecursiveASTVisitor25VisitUnresolvedMemberExprEPNS_20UnresolvedMemberExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitUnresolvedMemberExprEPNS_20UnresolvedMemberExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnresolvedMemberExpr(UnresolvedMemberExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPackExpansionExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 719,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPackExpansionExpr", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromPackExpansionExprEPNS_17PackExpansionExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromPackExpansionExprEPNS_17PackExpansionExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPackExpansionExpr(PackExpansionExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPackExpansionExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPackExpansionExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 719,
   FQN="clang::RecursiveASTVisitor::VisitPackExpansionExpr", NM="_ZN5clang19RecursiveASTVisitor22VisitPackExpansionExprEPNS_17PackExpansionExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitPackExpansionExprEPNS_17PackExpansionExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPackExpansionExpr(PackExpansionExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromParenExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 725,
   FQN="clang::RecursiveASTVisitor::WalkUpFromParenExpr", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromParenExprEPNS_9ParenExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromParenExprEPNS_9ParenExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromParenExpr(ParenExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitParenExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitParenExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 725,
   FQN="clang::RecursiveASTVisitor::VisitParenExpr", NM="_ZN5clang19RecursiveASTVisitor14VisitParenExprEPNS_9ParenExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitParenExprEPNS_9ParenExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitParenExpr(ParenExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromParenListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 731,
   FQN="clang::RecursiveASTVisitor::WalkUpFromParenListExpr", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromParenListExprEPNS_13ParenListExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromParenListExprEPNS_13ParenListExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromParenListExpr(ParenListExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitParenListExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitParenListExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 731,
   FQN="clang::RecursiveASTVisitor::VisitParenListExpr", NM="_ZN5clang19RecursiveASTVisitor18VisitParenListExprEPNS_13ParenListExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitParenListExprEPNS_13ParenListExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitParenListExpr(ParenListExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPredefinedExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 737,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPredefinedExpr", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromPredefinedExprEPNS_14PredefinedExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromPredefinedExprEPNS_14PredefinedExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPredefinedExpr(PredefinedExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPredefinedExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPredefinedExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 737,
   FQN="clang::RecursiveASTVisitor::VisitPredefinedExpr", NM="_ZN5clang19RecursiveASTVisitor19VisitPredefinedExprEPNS_14PredefinedExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitPredefinedExprEPNS_14PredefinedExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPredefinedExpr(PredefinedExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPseudoObjectExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 743,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPseudoObjectExpr", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromPseudoObjectExprEPNS_16PseudoObjectExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromPseudoObjectExprEPNS_16PseudoObjectExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPseudoObjectExpr(PseudoObjectExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPseudoObjectExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPseudoObjectExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 743,
   FQN="clang::RecursiveASTVisitor::VisitPseudoObjectExpr", NM="_ZN5clang19RecursiveASTVisitor21VisitPseudoObjectExprEPNS_16PseudoObjectExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitPseudoObjectExprEPNS_16PseudoObjectExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPseudoObjectExpr(PseudoObjectExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromShuffleVectorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 749,
   FQN="clang::RecursiveASTVisitor::WalkUpFromShuffleVectorExpr", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromShuffleVectorExprEPNS_17ShuffleVectorExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromShuffleVectorExprEPNS_17ShuffleVectorExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromShuffleVectorExpr(ShuffleVectorExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitShuffleVectorExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitShuffleVectorExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 749,
   FQN="clang::RecursiveASTVisitor::VisitShuffleVectorExpr", NM="_ZN5clang19RecursiveASTVisitor22VisitShuffleVectorExprEPNS_17ShuffleVectorExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitShuffleVectorExprEPNS_17ShuffleVectorExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitShuffleVectorExpr(ShuffleVectorExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSizeOfPackExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 755,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSizeOfPackExpr", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromSizeOfPackExprEPNS_14SizeOfPackExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromSizeOfPackExprEPNS_14SizeOfPackExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSizeOfPackExpr(SizeOfPackExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSizeOfPackExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSizeOfPackExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 755,
   FQN="clang::RecursiveASTVisitor::VisitSizeOfPackExpr", NM="_ZN5clang19RecursiveASTVisitor19VisitSizeOfPackExprEPNS_14SizeOfPackExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitSizeOfPackExprEPNS_14SizeOfPackExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSizeOfPackExpr(SizeOfPackExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromStmtExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 761,
   FQN="clang::RecursiveASTVisitor::WalkUpFromStmtExpr", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromStmtExprEPNS_8StmtExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromStmtExprEPNS_8StmtExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromStmtExpr(StmtExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitStmtExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitStmtExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 761,
   FQN="clang::RecursiveASTVisitor::VisitStmtExpr", NM="_ZN5clang19RecursiveASTVisitor13VisitStmtExprEPNS_8StmtExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitStmtExprEPNS_8StmtExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitStmtExpr(StmtExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromStringLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 767,
   FQN="clang::RecursiveASTVisitor::WalkUpFromStringLiteral", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromStringLiteralEPNS_13StringLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromStringLiteralEPNS_13StringLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromStringLiteral(StringLiteral /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitStringLiteral(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitStringLiteral">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 767,
   FQN="clang::RecursiveASTVisitor::VisitStringLiteral", NM="_ZN5clang19RecursiveASTVisitor18VisitStringLiteralEPNS_13StringLiteralE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitStringLiteralEPNS_13StringLiteralE")
  //</editor-fold>
  public default/*interface*/ boolean VisitStringLiteral(StringLiteral /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSubstNonTypeTemplateParmExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 773,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSubstNonTypeTemplateParmExpr", NM="_ZN5clang19RecursiveASTVisitor38WalkUpFromSubstNonTypeTemplateParmExprEPNS_28SubstNonTypeTemplateParmExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor38WalkUpFromSubstNonTypeTemplateParmExprEPNS_28SubstNonTypeTemplateParmExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSubstNonTypeTemplateParmExpr(SubstNonTypeTemplateParmExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSubstNonTypeTemplateParmExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSubstNonTypeTemplateParmExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 773,
   FQN="clang::RecursiveASTVisitor::VisitSubstNonTypeTemplateParmExpr", NM="_ZN5clang19RecursiveASTVisitor33VisitSubstNonTypeTemplateParmExprEPNS_28SubstNonTypeTemplateParmExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33VisitSubstNonTypeTemplateParmExprEPNS_28SubstNonTypeTemplateParmExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSubstNonTypeTemplateParmExpr(SubstNonTypeTemplateParmExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSubstNonTypeTemplateParmPackExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 779,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSubstNonTypeTemplateParmPackExpr", NM="_ZN5clang19RecursiveASTVisitor42WalkUpFromSubstNonTypeTemplateParmPackExprEPNS_32SubstNonTypeTemplateParmPackExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor42WalkUpFromSubstNonTypeTemplateParmPackExprEPNS_32SubstNonTypeTemplateParmPackExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSubstNonTypeTemplateParmPackExpr(SubstNonTypeTemplateParmPackExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSubstNonTypeTemplateParmPackExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSubstNonTypeTemplateParmPackExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 779,
   FQN="clang::RecursiveASTVisitor::VisitSubstNonTypeTemplateParmPackExpr", NM="_ZN5clang19RecursiveASTVisitor37VisitSubstNonTypeTemplateParmPackExprEPNS_32SubstNonTypeTemplateParmPackExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37VisitSubstNonTypeTemplateParmPackExprEPNS_32SubstNonTypeTemplateParmPackExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSubstNonTypeTemplateParmPackExpr(SubstNonTypeTemplateParmPackExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypeTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 785,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypeTraitExpr", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromTypeTraitExprEPNS_13TypeTraitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromTypeTraitExprEPNS_13TypeTraitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypeTraitExpr(TypeTraitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypeTraitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 785,
   FQN="clang::RecursiveASTVisitor::VisitTypeTraitExpr", NM="_ZN5clang19RecursiveASTVisitor18VisitTypeTraitExprEPNS_13TypeTraitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitTypeTraitExprEPNS_13TypeTraitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeTraitExpr(TypeTraitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypoExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 791,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypoExpr", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromTypoExprEPNS_8TypoExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromTypoExprEPNS_8TypoExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypoExpr(TypoExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypoExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypoExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 791,
   FQN="clang::RecursiveASTVisitor::VisitTypoExpr", NM="_ZN5clang19RecursiveASTVisitor13VisitTypoExprEPNS_8TypoExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitTypoExprEPNS_8TypoExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypoExpr(TypoExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryExprOrTypeTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 797,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryExprOrTypeTraitExpr", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromUnaryExprOrTypeTraitExprEPNS_24UnaryExprOrTypeTraitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromUnaryExprOrTypeTraitExprEPNS_24UnaryExprOrTypeTraitExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryExprOrTypeTraitExpr(UnaryExprOrTypeTraitExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryExprOrTypeTraitExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryExprOrTypeTraitExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 797,
   FQN="clang::RecursiveASTVisitor::VisitUnaryExprOrTypeTraitExpr", NM="_ZN5clang19RecursiveASTVisitor29VisitUnaryExprOrTypeTraitExprEPNS_24UnaryExprOrTypeTraitExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitUnaryExprOrTypeTraitExprEPNS_24UnaryExprOrTypeTraitExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryExprOrTypeTraitExpr(UnaryExprOrTypeTraitExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 803,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryOperator", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromUnaryOperatorEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromUnaryOperatorEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryOperator(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryOperator(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryOperator">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 803,
   FQN="clang::RecursiveASTVisitor::VisitUnaryOperator", NM="_ZN5clang19RecursiveASTVisitor18VisitUnaryOperatorEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitUnaryOperatorEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryOperator(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromVAArgExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 809,
   FQN="clang::RecursiveASTVisitor::WalkUpFromVAArgExpr", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromVAArgExprEPNS_9VAArgExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromVAArgExprEPNS_9VAArgExprE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromVAArgExpr(VAArgExpr /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromExpr(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitVAArgExpr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVAArgExpr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 809,
   FQN="clang::RecursiveASTVisitor::VisitVAArgExpr", NM="_ZN5clang19RecursiveASTVisitor14VisitVAArgExprEPNS_9VAArgExprE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitVAArgExprEPNS_9VAArgExprE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVAArgExpr(VAArgExpr /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromForStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 819,
   FQN="clang::RecursiveASTVisitor::WalkUpFromForStmt", NM="_ZN5clang19RecursiveASTVisitor17WalkUpFromForStmtEPNS_7ForStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17WalkUpFromForStmtEPNS_7ForStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromForStmt(ForStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitForStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitForStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 819,
   FQN="clang::RecursiveASTVisitor::VisitForStmt", NM="_ZN5clang19RecursiveASTVisitor12VisitForStmtEPNS_7ForStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12VisitForStmtEPNS_7ForStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitForStmt(ForStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromGotoStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 825,
   FQN="clang::RecursiveASTVisitor::WalkUpFromGotoStmt", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromGotoStmtEPNS_8GotoStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromGotoStmtEPNS_8GotoStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromGotoStmt(GotoStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitGotoStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitGotoStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 825,
   FQN="clang::RecursiveASTVisitor::VisitGotoStmt", NM="_ZN5clang19RecursiveASTVisitor13VisitGotoStmtEPNS_8GotoStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitGotoStmtEPNS_8GotoStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitGotoStmt(GotoStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromIfStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 831,
   FQN="clang::RecursiveASTVisitor::WalkUpFromIfStmt", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromIfStmtEPNS_6IfStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromIfStmtEPNS_6IfStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromIfStmt(IfStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitIfStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIfStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 831,
   FQN="clang::RecursiveASTVisitor::VisitIfStmt", NM="_ZN5clang19RecursiveASTVisitor11VisitIfStmtEPNS_6IfStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitIfStmtEPNS_6IfStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIfStmt(IfStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromIndirectGotoStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 837,
   FQN="clang::RecursiveASTVisitor::WalkUpFromIndirectGotoStmt", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromIndirectGotoStmtEPNS_16IndirectGotoStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromIndirectGotoStmtEPNS_16IndirectGotoStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromIndirectGotoStmt(IndirectGotoStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitIndirectGotoStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIndirectGotoStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 837,
   FQN="clang::RecursiveASTVisitor::VisitIndirectGotoStmt", NM="_ZN5clang19RecursiveASTVisitor21VisitIndirectGotoStmtEPNS_16IndirectGotoStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitIndirectGotoStmtEPNS_16IndirectGotoStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIndirectGotoStmt(IndirectGotoStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromLabelStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 843,
   FQN="clang::RecursiveASTVisitor::WalkUpFromLabelStmt", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromLabelStmtEPNS_9LabelStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromLabelStmtEPNS_9LabelStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromLabelStmt(LabelStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitLabelStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLabelStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 843,
   FQN="clang::RecursiveASTVisitor::VisitLabelStmt", NM="_ZN5clang19RecursiveASTVisitor14VisitLabelStmtEPNS_9LabelStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitLabelStmtEPNS_9LabelStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLabelStmt(LabelStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromMSDependentExistsStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 849,
   FQN="clang::RecursiveASTVisitor::WalkUpFromMSDependentExistsStmt", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromMSDependentExistsStmtEPNS_21MSDependentExistsStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromMSDependentExistsStmtEPNS_21MSDependentExistsStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromMSDependentExistsStmt(MSDependentExistsStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitMSDependentExistsStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSDependentExistsStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 849,
   FQN="clang::RecursiveASTVisitor::VisitMSDependentExistsStmt", NM="_ZN5clang19RecursiveASTVisitor26VisitMSDependentExistsStmtEPNS_21MSDependentExistsStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitMSDependentExistsStmtEPNS_21MSDependentExistsStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSDependentExistsStmt(MSDependentExistsStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromNullStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 855,
   FQN="clang::RecursiveASTVisitor::WalkUpFromNullStmt", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromNullStmtEPNS_8NullStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromNullStmtEPNS_8NullStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromNullStmt(NullStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitNullStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNullStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 855,
   FQN="clang::RecursiveASTVisitor::VisitNullStmt", NM="_ZN5clang19RecursiveASTVisitor13VisitNullStmtEPNS_8NullStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitNullStmtEPNS_8NullStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNullStmt(NullStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPExecutableDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 861,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPExecutableDirective", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromOMPExecutableDirectiveEPNS_22OMPExecutableDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromOMPExecutableDirectiveEPNS_22OMPExecutableDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPExecutableDirective(OMPExecutableDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPExecutableDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 861,
   FQN="clang::RecursiveASTVisitor::VisitOMPExecutableDirective", NM="_ZN5clang19RecursiveASTVisitor27VisitOMPExecutableDirectiveEPNS_22OMPExecutableDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitOMPExecutableDirectiveEPNS_22OMPExecutableDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPExecutableDirective(OMPExecutableDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPAtomicDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 865,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPAtomicDirective", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPAtomicDirectiveEPNS_18OMPAtomicDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPAtomicDirectiveEPNS_18OMPAtomicDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPAtomicDirective(OMPAtomicDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPAtomicDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPAtomicDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 865,
   FQN="clang::RecursiveASTVisitor::VisitOMPAtomicDirective", NM="_ZN5clang19RecursiveASTVisitor23VisitOMPAtomicDirectiveEPNS_18OMPAtomicDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitOMPAtomicDirectiveEPNS_18OMPAtomicDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPAtomicDirective(OMPAtomicDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPBarrierDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 871,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPBarrierDirective", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPBarrierDirectiveEPNS_19OMPBarrierDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPBarrierDirectiveEPNS_19OMPBarrierDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPBarrierDirective(OMPBarrierDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPBarrierDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPBarrierDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 871,
   FQN="clang::RecursiveASTVisitor::VisitOMPBarrierDirective", NM="_ZN5clang19RecursiveASTVisitor24VisitOMPBarrierDirectiveEPNS_19OMPBarrierDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitOMPBarrierDirectiveEPNS_19OMPBarrierDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPBarrierDirective(OMPBarrierDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPCancelDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 877,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPCancelDirective", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPCancelDirectiveEPNS_18OMPCancelDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPCancelDirectiveEPNS_18OMPCancelDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPCancelDirective(OMPCancelDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPCancelDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPCancelDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 877,
   FQN="clang::RecursiveASTVisitor::VisitOMPCancelDirective", NM="_ZN5clang19RecursiveASTVisitor23VisitOMPCancelDirectiveEPNS_18OMPCancelDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitOMPCancelDirectiveEPNS_18OMPCancelDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPCancelDirective(OMPCancelDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPCancellationPointDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 883,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPCancellationPointDirective", NM="_ZN5clang19RecursiveASTVisitor39WalkUpFromOMPCancellationPointDirectiveEPNS_29OMPCancellationPointDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor39WalkUpFromOMPCancellationPointDirectiveEPNS_29OMPCancellationPointDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPCancellationPointDirective(OMPCancellationPointDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPCancellationPointDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPCancellationPointDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 883,
   FQN="clang::RecursiveASTVisitor::VisitOMPCancellationPointDirective", NM="_ZN5clang19RecursiveASTVisitor34VisitOMPCancellationPointDirectiveEPNS_29OMPCancellationPointDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34VisitOMPCancellationPointDirectiveEPNS_29OMPCancellationPointDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPCancellationPointDirective(OMPCancellationPointDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPCriticalDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 889,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPCriticalDirective", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPCriticalDirectiveEPNS_20OMPCriticalDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPCriticalDirectiveEPNS_20OMPCriticalDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPCriticalDirective(OMPCriticalDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPCriticalDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPCriticalDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 889,
   FQN="clang::RecursiveASTVisitor::VisitOMPCriticalDirective", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPCriticalDirectiveEPNS_20OMPCriticalDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPCriticalDirectiveEPNS_20OMPCriticalDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPCriticalDirective(OMPCriticalDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPFlushDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 895,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPFlushDirective", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromOMPFlushDirectiveEPNS_17OMPFlushDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromOMPFlushDirectiveEPNS_17OMPFlushDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPFlushDirective(OMPFlushDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPFlushDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPFlushDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 895,
   FQN="clang::RecursiveASTVisitor::VisitOMPFlushDirective", NM="_ZN5clang19RecursiveASTVisitor22VisitOMPFlushDirectiveEPNS_17OMPFlushDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitOMPFlushDirectiveEPNS_17OMPFlushDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPFlushDirective(OMPFlushDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPLoopDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 901,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPLoopDirective", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromOMPLoopDirectiveEPNS_16OMPLoopDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromOMPLoopDirectiveEPNS_16OMPLoopDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPLoopDirective(OMPLoopDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPLoopDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 901,
   FQN="clang::RecursiveASTVisitor::VisitOMPLoopDirective", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPLoopDirectiveEPNS_16OMPLoopDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPLoopDirectiveEPNS_16OMPLoopDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPLoopDirective(OMPLoopDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPDistributeDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 905,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPDistributeDirective", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromOMPDistributeDirectiveEPNS_22OMPDistributeDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromOMPDistributeDirectiveEPNS_22OMPDistributeDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPDistributeDirective(OMPDistributeDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPDistributeDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDistributeDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 905,
   FQN="clang::RecursiveASTVisitor::VisitOMPDistributeDirective", NM="_ZN5clang19RecursiveASTVisitor27VisitOMPDistributeDirectiveEPNS_22OMPDistributeDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitOMPDistributeDirectiveEPNS_22OMPDistributeDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPDistributeDirective(OMPDistributeDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPDistributeParallelForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 911,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPDistributeParallelForDirective", NM="_ZN5clang19RecursiveASTVisitor43WalkUpFromOMPDistributeParallelForDirectiveEPNS_33OMPDistributeParallelForDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor43WalkUpFromOMPDistributeParallelForDirectiveEPNS_33OMPDistributeParallelForDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPDistributeParallelForDirective(OMPDistributeParallelForDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPDistributeParallelForDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDistributeParallelForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 911,
   FQN="clang::RecursiveASTVisitor::VisitOMPDistributeParallelForDirective", NM="_ZN5clang19RecursiveASTVisitor38VisitOMPDistributeParallelForDirectiveEPNS_33OMPDistributeParallelForDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor38VisitOMPDistributeParallelForDirectiveEPNS_33OMPDistributeParallelForDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPDistributeParallelForDirective(OMPDistributeParallelForDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPDistributeParallelForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 917,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPDistributeParallelForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor47WalkUpFromOMPDistributeParallelForSimdDirectiveEPNS_37OMPDistributeParallelForSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor47WalkUpFromOMPDistributeParallelForSimdDirectiveEPNS_37OMPDistributeParallelForSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPDistributeParallelForSimdDirective(OMPDistributeParallelForSimdDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPDistributeParallelForSimdDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDistributeParallelForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 917,
   FQN="clang::RecursiveASTVisitor::VisitOMPDistributeParallelForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor42VisitOMPDistributeParallelForSimdDirectiveEPNS_37OMPDistributeParallelForSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor42VisitOMPDistributeParallelForSimdDirectiveEPNS_37OMPDistributeParallelForSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPDistributeParallelForSimdDirective(OMPDistributeParallelForSimdDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPDistributeSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 923,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPDistributeSimdDirective", NM="_ZN5clang19RecursiveASTVisitor36WalkUpFromOMPDistributeSimdDirectiveEPNS_26OMPDistributeSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36WalkUpFromOMPDistributeSimdDirectiveEPNS_26OMPDistributeSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPDistributeSimdDirective(OMPDistributeSimdDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPDistributeSimdDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDistributeSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 923,
   FQN="clang::RecursiveASTVisitor::VisitOMPDistributeSimdDirective", NM="_ZN5clang19RecursiveASTVisitor31VisitOMPDistributeSimdDirectiveEPNS_26OMPDistributeSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31VisitOMPDistributeSimdDirectiveEPNS_26OMPDistributeSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPDistributeSimdDirective(OMPDistributeSimdDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 929,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPForDirective", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromOMPForDirectiveEPNS_15OMPForDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromOMPForDirectiveEPNS_15OMPForDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPForDirective(OMPForDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPForDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 929,
   FQN="clang::RecursiveASTVisitor::VisitOMPForDirective", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPForDirectiveEPNS_15OMPForDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPForDirectiveEPNS_15OMPForDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPForDirective(OMPForDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 935,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPForSimdDirectiveEPNS_19OMPForSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPForSimdDirectiveEPNS_19OMPForSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPForSimdDirective(OMPForSimdDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPForSimdDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 935,
   FQN="clang::RecursiveASTVisitor::VisitOMPForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor24VisitOMPForSimdDirectiveEPNS_19OMPForSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitOMPForSimdDirectiveEPNS_19OMPForSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPForSimdDirective(OMPForSimdDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPParallelForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 941,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPParallelForDirective", NM="_ZN5clang19RecursiveASTVisitor33WalkUpFromOMPParallelForDirectiveEPNS_23OMPParallelForDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33WalkUpFromOMPParallelForDirectiveEPNS_23OMPParallelForDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPParallelForDirective(OMPParallelForDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPParallelForDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPParallelForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 941,
   FQN="clang::RecursiveASTVisitor::VisitOMPParallelForDirective", NM="_ZN5clang19RecursiveASTVisitor28VisitOMPParallelForDirectiveEPNS_23OMPParallelForDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitOMPParallelForDirectiveEPNS_23OMPParallelForDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPParallelForDirective(OMPParallelForDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPParallelForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 947,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPParallelForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor37WalkUpFromOMPParallelForSimdDirectiveEPNS_27OMPParallelForSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37WalkUpFromOMPParallelForSimdDirectiveEPNS_27OMPParallelForSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPParallelForSimdDirective(OMPParallelForSimdDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPParallelForSimdDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPParallelForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 947,
   FQN="clang::RecursiveASTVisitor::VisitOMPParallelForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor32VisitOMPParallelForSimdDirectiveEPNS_27OMPParallelForSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32VisitOMPParallelForSimdDirectiveEPNS_27OMPParallelForSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPParallelForSimdDirective(OMPParallelForSimdDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 953,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPSimdDirective", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromOMPSimdDirectiveEPNS_16OMPSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromOMPSimdDirectiveEPNS_16OMPSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPSimdDirective(OMPSimdDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPSimdDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 953,
   FQN="clang::RecursiveASTVisitor::VisitOMPSimdDirective", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPSimdDirectiveEPNS_16OMPSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPSimdDirectiveEPNS_16OMPSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPSimdDirective(OMPSimdDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTargetParallelForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 959,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTargetParallelForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor43WalkUpFromOMPTargetParallelForSimdDirectiveEPNS_33OMPTargetParallelForSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor43WalkUpFromOMPTargetParallelForSimdDirectiveEPNS_33OMPTargetParallelForSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTargetParallelForSimdDirective(OMPTargetParallelForSimdDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTargetParallelForSimdDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTargetParallelForSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 959,
   FQN="clang::RecursiveASTVisitor::VisitOMPTargetParallelForSimdDirective", NM="_ZN5clang19RecursiveASTVisitor38VisitOMPTargetParallelForSimdDirectiveEPNS_33OMPTargetParallelForSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor38VisitOMPTargetParallelForSimdDirectiveEPNS_33OMPTargetParallelForSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTargetParallelForSimdDirective(OMPTargetParallelForSimdDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTaskLoopDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 965,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTaskLoopDirective", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPTaskLoopDirectiveEPNS_20OMPTaskLoopDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPTaskLoopDirectiveEPNS_20OMPTaskLoopDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTaskLoopDirective(OMPTaskLoopDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTaskLoopDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTaskLoopDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 965,
   FQN="clang::RecursiveASTVisitor::VisitOMPTaskLoopDirective", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPTaskLoopDirectiveEPNS_20OMPTaskLoopDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPTaskLoopDirectiveEPNS_20OMPTaskLoopDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTaskLoopDirective(OMPTaskLoopDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTaskLoopSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 971,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTaskLoopSimdDirective", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromOMPTaskLoopSimdDirectiveEPNS_24OMPTaskLoopSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromOMPTaskLoopSimdDirectiveEPNS_24OMPTaskLoopSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTaskLoopSimdDirective(OMPTaskLoopSimdDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPLoopDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTaskLoopSimdDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTaskLoopSimdDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 971,
   FQN="clang::RecursiveASTVisitor::VisitOMPTaskLoopSimdDirective", NM="_ZN5clang19RecursiveASTVisitor29VisitOMPTaskLoopSimdDirectiveEPNS_24OMPTaskLoopSimdDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitOMPTaskLoopSimdDirectiveEPNS_24OMPTaskLoopSimdDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTaskLoopSimdDirective(OMPTaskLoopSimdDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPMasterDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 981,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPMasterDirective", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPMasterDirectiveEPNS_18OMPMasterDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPMasterDirectiveEPNS_18OMPMasterDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPMasterDirective(OMPMasterDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPMasterDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPMasterDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 981,
   FQN="clang::RecursiveASTVisitor::VisitOMPMasterDirective", NM="_ZN5clang19RecursiveASTVisitor23VisitOMPMasterDirectiveEPNS_18OMPMasterDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitOMPMasterDirectiveEPNS_18OMPMasterDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPMasterDirective(OMPMasterDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPOrderedDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 987,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPOrderedDirective", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPOrderedDirectiveEPNS_19OMPOrderedDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPOrderedDirectiveEPNS_19OMPOrderedDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPOrderedDirective(OMPOrderedDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPOrderedDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPOrderedDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 987,
   FQN="clang::RecursiveASTVisitor::VisitOMPOrderedDirective", NM="_ZN5clang19RecursiveASTVisitor24VisitOMPOrderedDirectiveEPNS_19OMPOrderedDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitOMPOrderedDirectiveEPNS_19OMPOrderedDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPOrderedDirective(OMPOrderedDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPParallelDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 993,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPParallelDirective", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPParallelDirectiveEPNS_20OMPParallelDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPParallelDirectiveEPNS_20OMPParallelDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPParallelDirective(OMPParallelDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPParallelDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPParallelDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 993,
   FQN="clang::RecursiveASTVisitor::VisitOMPParallelDirective", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPParallelDirectiveEPNS_20OMPParallelDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPParallelDirectiveEPNS_20OMPParallelDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPParallelDirective(OMPParallelDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPParallelSectionsDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 999,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPParallelSectionsDirective", NM="_ZN5clang19RecursiveASTVisitor38WalkUpFromOMPParallelSectionsDirectiveEPNS_28OMPParallelSectionsDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor38WalkUpFromOMPParallelSectionsDirectiveEPNS_28OMPParallelSectionsDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPParallelSectionsDirective(OMPParallelSectionsDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPParallelSectionsDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPParallelSectionsDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 999,
   FQN="clang::RecursiveASTVisitor::VisitOMPParallelSectionsDirective", NM="_ZN5clang19RecursiveASTVisitor33VisitOMPParallelSectionsDirectiveEPNS_28OMPParallelSectionsDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33VisitOMPParallelSectionsDirectiveEPNS_28OMPParallelSectionsDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPParallelSectionsDirective(OMPParallelSectionsDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPSectionDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1005,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPSectionDirective", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPSectionDirectiveEPNS_19OMPSectionDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPSectionDirectiveEPNS_19OMPSectionDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPSectionDirective(OMPSectionDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPSectionDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPSectionDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1005,
   FQN="clang::RecursiveASTVisitor::VisitOMPSectionDirective", NM="_ZN5clang19RecursiveASTVisitor24VisitOMPSectionDirectiveEPNS_19OMPSectionDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitOMPSectionDirectiveEPNS_19OMPSectionDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPSectionDirective(OMPSectionDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPSectionsDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1011,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPSectionsDirective", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPSectionsDirectiveEPNS_20OMPSectionsDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPSectionsDirectiveEPNS_20OMPSectionsDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPSectionsDirective(OMPSectionsDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPSectionsDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPSectionsDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1011,
   FQN="clang::RecursiveASTVisitor::VisitOMPSectionsDirective", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPSectionsDirectiveEPNS_20OMPSectionsDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPSectionsDirectiveEPNS_20OMPSectionsDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPSectionsDirective(OMPSectionsDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPSingleDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1017,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPSingleDirective", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPSingleDirectiveEPNS_18OMPSingleDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPSingleDirectiveEPNS_18OMPSingleDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPSingleDirective(OMPSingleDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPSingleDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPSingleDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1017,
   FQN="clang::RecursiveASTVisitor::VisitOMPSingleDirective", NM="_ZN5clang19RecursiveASTVisitor23VisitOMPSingleDirectiveEPNS_18OMPSingleDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitOMPSingleDirectiveEPNS_18OMPSingleDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPSingleDirective(OMPSingleDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTargetDataDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1023,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTargetDataDirective", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromOMPTargetDataDirectiveEPNS_22OMPTargetDataDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromOMPTargetDataDirectiveEPNS_22OMPTargetDataDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTargetDataDirective(OMPTargetDataDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTargetDataDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTargetDataDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1023,
   FQN="clang::RecursiveASTVisitor::VisitOMPTargetDataDirective", NM="_ZN5clang19RecursiveASTVisitor27VisitOMPTargetDataDirectiveEPNS_22OMPTargetDataDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitOMPTargetDataDirectiveEPNS_22OMPTargetDataDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTargetDataDirective(OMPTargetDataDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTargetDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1029,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTargetDirective", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPTargetDirectiveEPNS_18OMPTargetDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromOMPTargetDirectiveEPNS_18OMPTargetDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTargetDirective(OMPTargetDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTargetDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTargetDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1029,
   FQN="clang::RecursiveASTVisitor::VisitOMPTargetDirective", NM="_ZN5clang19RecursiveASTVisitor23VisitOMPTargetDirectiveEPNS_18OMPTargetDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitOMPTargetDirectiveEPNS_18OMPTargetDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTargetDirective(OMPTargetDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTargetEnterDataDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1035,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTargetEnterDataDirective", NM="_ZN5clang19RecursiveASTVisitor37WalkUpFromOMPTargetEnterDataDirectiveEPNS_27OMPTargetEnterDataDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37WalkUpFromOMPTargetEnterDataDirectiveEPNS_27OMPTargetEnterDataDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTargetEnterDataDirective(OMPTargetEnterDataDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTargetEnterDataDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTargetEnterDataDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1035,
   FQN="clang::RecursiveASTVisitor::VisitOMPTargetEnterDataDirective", NM="_ZN5clang19RecursiveASTVisitor32VisitOMPTargetEnterDataDirectiveEPNS_27OMPTargetEnterDataDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32VisitOMPTargetEnterDataDirectiveEPNS_27OMPTargetEnterDataDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTargetEnterDataDirective(OMPTargetEnterDataDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTargetExitDataDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1041,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTargetExitDataDirective", NM="_ZN5clang19RecursiveASTVisitor36WalkUpFromOMPTargetExitDataDirectiveEPNS_26OMPTargetExitDataDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36WalkUpFromOMPTargetExitDataDirectiveEPNS_26OMPTargetExitDataDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTargetExitDataDirective(OMPTargetExitDataDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTargetExitDataDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTargetExitDataDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1041,
   FQN="clang::RecursiveASTVisitor::VisitOMPTargetExitDataDirective", NM="_ZN5clang19RecursiveASTVisitor31VisitOMPTargetExitDataDirectiveEPNS_26OMPTargetExitDataDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31VisitOMPTargetExitDataDirectiveEPNS_26OMPTargetExitDataDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTargetExitDataDirective(OMPTargetExitDataDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTargetParallelDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1047,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTargetParallelDirective", NM="_ZN5clang19RecursiveASTVisitor36WalkUpFromOMPTargetParallelDirectiveEPNS_26OMPTargetParallelDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36WalkUpFromOMPTargetParallelDirectiveEPNS_26OMPTargetParallelDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTargetParallelDirective(OMPTargetParallelDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTargetParallelDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTargetParallelDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1047,
   FQN="clang::RecursiveASTVisitor::VisitOMPTargetParallelDirective", NM="_ZN5clang19RecursiveASTVisitor31VisitOMPTargetParallelDirectiveEPNS_26OMPTargetParallelDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31VisitOMPTargetParallelDirectiveEPNS_26OMPTargetParallelDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTargetParallelDirective(OMPTargetParallelDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTargetParallelForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1053,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTargetParallelForDirective", NM="_ZN5clang19RecursiveASTVisitor39WalkUpFromOMPTargetParallelForDirectiveEPNS_29OMPTargetParallelForDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor39WalkUpFromOMPTargetParallelForDirectiveEPNS_29OMPTargetParallelForDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTargetParallelForDirective(OMPTargetParallelForDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTargetParallelForDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTargetParallelForDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1053,
   FQN="clang::RecursiveASTVisitor::VisitOMPTargetParallelForDirective", NM="_ZN5clang19RecursiveASTVisitor34VisitOMPTargetParallelForDirectiveEPNS_29OMPTargetParallelForDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34VisitOMPTargetParallelForDirectiveEPNS_29OMPTargetParallelForDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTargetParallelForDirective(OMPTargetParallelForDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTargetUpdateDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1059,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTargetUpdateDirective", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromOMPTargetUpdateDirectiveEPNS_24OMPTargetUpdateDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromOMPTargetUpdateDirectiveEPNS_24OMPTargetUpdateDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTargetUpdateDirective(OMPTargetUpdateDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTargetUpdateDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTargetUpdateDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1059,
   FQN="clang::RecursiveASTVisitor::VisitOMPTargetUpdateDirective", NM="_ZN5clang19RecursiveASTVisitor29VisitOMPTargetUpdateDirectiveEPNS_24OMPTargetUpdateDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitOMPTargetUpdateDirectiveEPNS_24OMPTargetUpdateDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTargetUpdateDirective(OMPTargetUpdateDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTaskDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1065,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTaskDirective", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromOMPTaskDirectiveEPNS_16OMPTaskDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromOMPTaskDirectiveEPNS_16OMPTaskDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTaskDirective(OMPTaskDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTaskDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTaskDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1065,
   FQN="clang::RecursiveASTVisitor::VisitOMPTaskDirective", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPTaskDirectiveEPNS_16OMPTaskDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPTaskDirectiveEPNS_16OMPTaskDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTaskDirective(OMPTaskDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTaskgroupDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1071,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTaskgroupDirective", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromOMPTaskgroupDirectiveEPNS_21OMPTaskgroupDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromOMPTaskgroupDirectiveEPNS_21OMPTaskgroupDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTaskgroupDirective(OMPTaskgroupDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTaskgroupDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTaskgroupDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1071,
   FQN="clang::RecursiveASTVisitor::VisitOMPTaskgroupDirective", NM="_ZN5clang19RecursiveASTVisitor26VisitOMPTaskgroupDirectiveEPNS_21OMPTaskgroupDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitOMPTaskgroupDirectiveEPNS_21OMPTaskgroupDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTaskgroupDirective(OMPTaskgroupDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTaskwaitDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1077,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTaskwaitDirective", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPTaskwaitDirectiveEPNS_20OMPTaskwaitDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPTaskwaitDirectiveEPNS_20OMPTaskwaitDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTaskwaitDirective(OMPTaskwaitDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTaskwaitDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTaskwaitDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1077,
   FQN="clang::RecursiveASTVisitor::VisitOMPTaskwaitDirective", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPTaskwaitDirectiveEPNS_20OMPTaskwaitDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPTaskwaitDirectiveEPNS_20OMPTaskwaitDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTaskwaitDirective(OMPTaskwaitDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTaskyieldDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1083,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTaskyieldDirective", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromOMPTaskyieldDirectiveEPNS_21OMPTaskyieldDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromOMPTaskyieldDirectiveEPNS_21OMPTaskyieldDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTaskyieldDirective(OMPTaskyieldDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTaskyieldDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTaskyieldDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1083,
   FQN="clang::RecursiveASTVisitor::VisitOMPTaskyieldDirective", NM="_ZN5clang19RecursiveASTVisitor26VisitOMPTaskyieldDirectiveEPNS_21OMPTaskyieldDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitOMPTaskyieldDirectiveEPNS_21OMPTaskyieldDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTaskyieldDirective(OMPTaskyieldDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPTeamsDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1089,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPTeamsDirective", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromOMPTeamsDirectiveEPNS_17OMPTeamsDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromOMPTeamsDirectiveEPNS_17OMPTeamsDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPTeamsDirective(OMPTeamsDirective /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromOMPExecutableDirective(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPTeamsDirective(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPTeamsDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1089,
   FQN="clang::RecursiveASTVisitor::VisitOMPTeamsDirective", NM="_ZN5clang19RecursiveASTVisitor22VisitOMPTeamsDirectiveEPNS_17OMPTeamsDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitOMPTeamsDirectiveEPNS_17OMPTeamsDirectiveE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPTeamsDirective(OMPTeamsDirective /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCAtCatchStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1099,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCAtCatchStmt", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromObjCAtCatchStmtEPNS_15ObjCAtCatchStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromObjCAtCatchStmtEPNS_15ObjCAtCatchStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCAtCatchStmt(ObjCAtCatchStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCAtCatchStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCAtCatchStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1099,
   FQN="clang::RecursiveASTVisitor::VisitObjCAtCatchStmt", NM="_ZN5clang19RecursiveASTVisitor20VisitObjCAtCatchStmtEPNS_15ObjCAtCatchStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitObjCAtCatchStmtEPNS_15ObjCAtCatchStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCAtCatchStmt(ObjCAtCatchStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCAtFinallyStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1105,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCAtFinallyStmt", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCAtFinallyStmtEPNS_17ObjCAtFinallyStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCAtFinallyStmtEPNS_17ObjCAtFinallyStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCAtFinallyStmt(ObjCAtFinallyStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCAtFinallyStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCAtFinallyStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1105,
   FQN="clang::RecursiveASTVisitor::VisitObjCAtFinallyStmt", NM="_ZN5clang19RecursiveASTVisitor22VisitObjCAtFinallyStmtEPNS_17ObjCAtFinallyStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitObjCAtFinallyStmtEPNS_17ObjCAtFinallyStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCAtFinallyStmt(ObjCAtFinallyStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCAtSynchronizedStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1111,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCAtSynchronizedStmt", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromObjCAtSynchronizedStmtEPNS_22ObjCAtSynchronizedStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromObjCAtSynchronizedStmtEPNS_22ObjCAtSynchronizedStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCAtSynchronizedStmt(ObjCAtSynchronizedStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCAtSynchronizedStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCAtSynchronizedStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1111,
   FQN="clang::RecursiveASTVisitor::VisitObjCAtSynchronizedStmt", NM="_ZN5clang19RecursiveASTVisitor27VisitObjCAtSynchronizedStmtEPNS_22ObjCAtSynchronizedStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitObjCAtSynchronizedStmtEPNS_22ObjCAtSynchronizedStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCAtSynchronizedStmt(ObjCAtSynchronizedStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCAtThrowStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1117,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCAtThrowStmt", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromObjCAtThrowStmtEPNS_15ObjCAtThrowStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromObjCAtThrowStmtEPNS_15ObjCAtThrowStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCAtThrowStmt(ObjCAtThrowStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCAtThrowStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCAtThrowStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1117,
   FQN="clang::RecursiveASTVisitor::VisitObjCAtThrowStmt", NM="_ZN5clang19RecursiveASTVisitor20VisitObjCAtThrowStmtEPNS_15ObjCAtThrowStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitObjCAtThrowStmtEPNS_15ObjCAtThrowStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCAtThrowStmt(ObjCAtThrowStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCAtTryStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1123,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCAtTryStmt", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromObjCAtTryStmtEPNS_13ObjCAtTryStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromObjCAtTryStmtEPNS_13ObjCAtTryStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCAtTryStmt(ObjCAtTryStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCAtTryStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCAtTryStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1123,
   FQN="clang::RecursiveASTVisitor::VisitObjCAtTryStmt", NM="_ZN5clang19RecursiveASTVisitor18VisitObjCAtTryStmtEPNS_13ObjCAtTryStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitObjCAtTryStmtEPNS_13ObjCAtTryStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCAtTryStmt(ObjCAtTryStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCAutoreleasePoolStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1129,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCAutoreleasePoolStmt", NM="_ZN5clang19RecursiveASTVisitor33WalkUpFromObjCAutoreleasePoolStmtEPNS_23ObjCAutoreleasePoolStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33WalkUpFromObjCAutoreleasePoolStmtEPNS_23ObjCAutoreleasePoolStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCAutoreleasePoolStmt(ObjCAutoreleasePoolStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCAutoreleasePoolStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCAutoreleasePoolStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1129,
   FQN="clang::RecursiveASTVisitor::VisitObjCAutoreleasePoolStmt", NM="_ZN5clang19RecursiveASTVisitor28VisitObjCAutoreleasePoolStmtEPNS_23ObjCAutoreleasePoolStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitObjCAutoreleasePoolStmtEPNS_23ObjCAutoreleasePoolStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCAutoreleasePoolStmt(ObjCAutoreleasePoolStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCForCollectionStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1135,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCForCollectionStmt", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromObjCForCollectionStmtEPNS_21ObjCForCollectionStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromObjCForCollectionStmtEPNS_21ObjCForCollectionStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCForCollectionStmt(ObjCForCollectionStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCForCollectionStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCForCollectionStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1135,
   FQN="clang::RecursiveASTVisitor::VisitObjCForCollectionStmt", NM="_ZN5clang19RecursiveASTVisitor26VisitObjCForCollectionStmtEPNS_21ObjCForCollectionStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitObjCForCollectionStmtEPNS_21ObjCForCollectionStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCForCollectionStmt(ObjCForCollectionStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromReturnStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1141,
   FQN="clang::RecursiveASTVisitor::WalkUpFromReturnStmt", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromReturnStmtEPNS_10ReturnStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromReturnStmtEPNS_10ReturnStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromReturnStmt(ReturnStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitReturnStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitReturnStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1141,
   FQN="clang::RecursiveASTVisitor::VisitReturnStmt", NM="_ZN5clang19RecursiveASTVisitor15VisitReturnStmtEPNS_10ReturnStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitReturnStmtEPNS_10ReturnStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitReturnStmt(ReturnStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSEHExceptStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1147,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSEHExceptStmt", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromSEHExceptStmtEPNS_13SEHExceptStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromSEHExceptStmtEPNS_13SEHExceptStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSEHExceptStmt(SEHExceptStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSEHExceptStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSEHExceptStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1147,
   FQN="clang::RecursiveASTVisitor::VisitSEHExceptStmt", NM="_ZN5clang19RecursiveASTVisitor18VisitSEHExceptStmtEPNS_13SEHExceptStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitSEHExceptStmtEPNS_13SEHExceptStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSEHExceptStmt(SEHExceptStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSEHFinallyStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1153,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSEHFinallyStmt", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromSEHFinallyStmtEPNS_14SEHFinallyStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromSEHFinallyStmtEPNS_14SEHFinallyStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSEHFinallyStmt(SEHFinallyStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSEHFinallyStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSEHFinallyStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1153,
   FQN="clang::RecursiveASTVisitor::VisitSEHFinallyStmt", NM="_ZN5clang19RecursiveASTVisitor19VisitSEHFinallyStmtEPNS_14SEHFinallyStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitSEHFinallyStmtEPNS_14SEHFinallyStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSEHFinallyStmt(SEHFinallyStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSEHLeaveStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1159,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSEHLeaveStmt", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromSEHLeaveStmtEPNS_12SEHLeaveStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromSEHLeaveStmtEPNS_12SEHLeaveStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSEHLeaveStmt(SEHLeaveStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSEHLeaveStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSEHLeaveStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1159,
   FQN="clang::RecursiveASTVisitor::VisitSEHLeaveStmt", NM="_ZN5clang19RecursiveASTVisitor17VisitSEHLeaveStmtEPNS_12SEHLeaveStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitSEHLeaveStmtEPNS_12SEHLeaveStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSEHLeaveStmt(SEHLeaveStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSEHTryStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1165,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSEHTryStmt", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromSEHTryStmtEPNS_10SEHTryStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromSEHTryStmtEPNS_10SEHTryStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSEHTryStmt(SEHTryStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSEHTryStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSEHTryStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1165,
   FQN="clang::RecursiveASTVisitor::VisitSEHTryStmt", NM="_ZN5clang19RecursiveASTVisitor15VisitSEHTryStmtEPNS_10SEHTryStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitSEHTryStmtEPNS_10SEHTryStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSEHTryStmt(SEHTryStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSwitchCase">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1171,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSwitchCase", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromSwitchCaseEPNS_10SwitchCaseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromSwitchCaseEPNS_10SwitchCaseE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSwitchCase(SwitchCase /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSwitchCase(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSwitchCase">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1171,
   FQN="clang::RecursiveASTVisitor::VisitSwitchCase", NM="_ZN5clang19RecursiveASTVisitor15VisitSwitchCaseEPNS_10SwitchCaseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitSwitchCaseEPNS_10SwitchCaseE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSwitchCase(SwitchCase /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCaseStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1175,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCaseStmt", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromCaseStmtEPNS_8CaseStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromCaseStmtEPNS_8CaseStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCaseStmt(CaseStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromSwitchCase(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCaseStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCaseStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1175,
   FQN="clang::RecursiveASTVisitor::VisitCaseStmt", NM="_ZN5clang19RecursiveASTVisitor13VisitCaseStmtEPNS_8CaseStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitCaseStmtEPNS_8CaseStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCaseStmt(CaseStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDefaultStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1181,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDefaultStmt", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromDefaultStmtEPNS_11DefaultStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromDefaultStmtEPNS_11DefaultStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDefaultStmt(DefaultStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromSwitchCase(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDefaultStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDefaultStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1181,
   FQN="clang::RecursiveASTVisitor::VisitDefaultStmt", NM="_ZN5clang19RecursiveASTVisitor16VisitDefaultStmtEPNS_11DefaultStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitDefaultStmtEPNS_11DefaultStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDefaultStmt(DefaultStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSwitchStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1191,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSwitchStmt", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromSwitchStmtEPNS_10SwitchStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromSwitchStmtEPNS_10SwitchStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSwitchStmt(SwitchStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSwitchStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSwitchStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1191,
   FQN="clang::RecursiveASTVisitor::VisitSwitchStmt", NM="_ZN5clang19RecursiveASTVisitor15VisitSwitchStmtEPNS_10SwitchStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitSwitchStmtEPNS_10SwitchStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSwitchStmt(SwitchStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromWhileStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1197,
   FQN="clang::RecursiveASTVisitor::WalkUpFromWhileStmt", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromWhileStmtEPNS_9WhileStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromWhileStmtEPNS_9WhileStmtE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromWhileStmt(WhileStmt /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromStmt(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitWhileStmt(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitWhileStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/StmtNodes.inc", line = 1197,
   FQN="clang::RecursiveASTVisitor::VisitWhileStmt", NM="_ZN5clang19RecursiveASTVisitor14VisitWhileStmtEPNS_9WhileStmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitWhileStmtEPNS_9WhileStmtE")
  //</editor-fold>
  public default/*interface*/ boolean VisitWhileStmt(WhileStmt /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryPostInc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryPostInc", NM="_ZN5clang19RecursiveASTVisitor20TraverseUnaryPostIncEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseUnaryPostIncEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryPostInc(UnaryOperator /*P*/ S) {
    return TraverseUnaryPostInc(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryPostInc(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryPostInc(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryPostInc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryPostInc", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromUnaryPostIncEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromUnaryPostIncEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryPostInc(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryPostInc(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryPostInc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryPostInc", NM="_ZN5clang19RecursiveASTVisitor17VisitUnaryPostIncEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitUnaryPostIncEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryPostInc(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryPostDec">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryPostDec", NM="_ZN5clang19RecursiveASTVisitor20TraverseUnaryPostDecEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseUnaryPostDecEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryPostDec(UnaryOperator /*P*/ S) {
    return TraverseUnaryPostDec(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryPostDec(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryPostDec(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryPostDec">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryPostDec", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromUnaryPostDecEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromUnaryPostDecEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryPostDec(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryPostDec(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryPostDec">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryPostDec", NM="_ZN5clang19RecursiveASTVisitor17VisitUnaryPostDecEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitUnaryPostDecEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryPostDec(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryPreInc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryPreInc", NM="_ZN5clang19RecursiveASTVisitor19TraverseUnaryPreIncEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseUnaryPreIncEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryPreInc(UnaryOperator /*P*/ S) {
    return TraverseUnaryPreInc(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryPreInc(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryPreInc(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryPreInc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryPreInc", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromUnaryPreIncEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromUnaryPreIncEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryPreInc(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryPreInc(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryPreInc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryPreInc", NM="_ZN5clang19RecursiveASTVisitor16VisitUnaryPreIncEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitUnaryPreIncEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryPreInc(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryPreDec">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryPreDec", NM="_ZN5clang19RecursiveASTVisitor19TraverseUnaryPreDecEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseUnaryPreDecEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryPreDec(UnaryOperator /*P*/ S) {
    return TraverseUnaryPreDec(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryPreDec(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryPreDec(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryPreDec">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryPreDec", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromUnaryPreDecEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromUnaryPreDecEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryPreDec(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryPreDec(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryPreDec">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryPreDec", NM="_ZN5clang19RecursiveASTVisitor16VisitUnaryPreDecEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitUnaryPreDecEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryPreDec(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryAddrOf">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryAddrOf", NM="_ZN5clang19RecursiveASTVisitor19TraverseUnaryAddrOfEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseUnaryAddrOfEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryAddrOf(UnaryOperator /*P*/ S) {
    return TraverseUnaryAddrOf(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryAddrOf(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryAddrOf(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryAddrOf">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryAddrOf", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromUnaryAddrOfEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromUnaryAddrOfEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryAddrOf(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryAddrOf(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryAddrOf">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryAddrOf", NM="_ZN5clang19RecursiveASTVisitor16VisitUnaryAddrOfEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitUnaryAddrOfEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryAddrOf(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryDeref">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryDeref", NM="_ZN5clang19RecursiveASTVisitor18TraverseUnaryDerefEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseUnaryDerefEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryDeref(UnaryOperator /*P*/ S) {
    return TraverseUnaryDeref(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryDeref(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryDeref(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryDeref">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryDeref", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromUnaryDerefEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromUnaryDerefEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryDeref(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryDeref(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryDeref">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryDeref", NM="_ZN5clang19RecursiveASTVisitor15VisitUnaryDerefEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitUnaryDerefEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryDeref(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryPlus">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryPlus", NM="_ZN5clang19RecursiveASTVisitor17TraverseUnaryPlusEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseUnaryPlusEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryPlus(UnaryOperator /*P*/ S) {
    return TraverseUnaryPlus(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryPlus(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryPlus(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryPlus">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryPlus", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromUnaryPlusEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromUnaryPlusEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryPlus(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryPlus(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryPlus">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryPlus", NM="_ZN5clang19RecursiveASTVisitor14VisitUnaryPlusEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitUnaryPlusEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryPlus(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryMinus">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryMinus", NM="_ZN5clang19RecursiveASTVisitor18TraverseUnaryMinusEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseUnaryMinusEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryMinus(UnaryOperator /*P*/ S) {
    return TraverseUnaryMinus(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryMinus(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryMinus(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryMinus">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryMinus", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromUnaryMinusEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromUnaryMinusEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryMinus(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryMinus(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryMinus">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryMinus", NM="_ZN5clang19RecursiveASTVisitor15VisitUnaryMinusEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitUnaryMinusEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryMinus(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryNot">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryNot", NM="_ZN5clang19RecursiveASTVisitor16TraverseUnaryNotEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseUnaryNotEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryNot(UnaryOperator /*P*/ S) {
    return TraverseUnaryNot(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryNot(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryNot(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryNot">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryNot", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromUnaryNotEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromUnaryNotEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryNot(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryNot(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryNot">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryNot", NM="_ZN5clang19RecursiveASTVisitor13VisitUnaryNotEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitUnaryNotEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryNot(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryLNot">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryLNot", NM="_ZN5clang19RecursiveASTVisitor17TraverseUnaryLNotEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseUnaryLNotEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryLNot(UnaryOperator /*P*/ S) {
    return TraverseUnaryLNot(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryLNot(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryLNot(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryLNot">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryLNot", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromUnaryLNotEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromUnaryLNotEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryLNot(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryLNot(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryLNot">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryLNot", NM="_ZN5clang19RecursiveASTVisitor14VisitUnaryLNotEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitUnaryLNotEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryLNot(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryReal">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryReal", NM="_ZN5clang19RecursiveASTVisitor17TraverseUnaryRealEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseUnaryRealEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryReal(UnaryOperator /*P*/ S) {
    return TraverseUnaryReal(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryReal(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryReal(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryReal">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryReal", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromUnaryRealEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromUnaryRealEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryReal(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryReal(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryReal">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryReal", NM="_ZN5clang19RecursiveASTVisitor14VisitUnaryRealEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitUnaryRealEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryReal(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryImag">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryImag", NM="_ZN5clang19RecursiveASTVisitor17TraverseUnaryImagEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseUnaryImagEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryImag(UnaryOperator /*P*/ S) {
    return TraverseUnaryImag(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryImag(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryImag(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryImag">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryImag", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromUnaryImagEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromUnaryImagEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryImag(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryImag(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryImag">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryImag", NM="_ZN5clang19RecursiveASTVisitor14VisitUnaryImagEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitUnaryImagEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryImag(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryExtension">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryExtension", NM="_ZN5clang19RecursiveASTVisitor22TraverseUnaryExtensionEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseUnaryExtensionEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryExtension(UnaryOperator /*P*/ S) {
    return TraverseUnaryExtension(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryExtension(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryExtension(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryExtension">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryExtension", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromUnaryExtensionEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromUnaryExtensionEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryExtension(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryExtension(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryExtension">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryExtension", NM="_ZN5clang19RecursiveASTVisitor19VisitUnaryExtensionEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitUnaryExtensionEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryExtension(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryCoawait">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryCoawait", NM="_ZN5clang19RecursiveASTVisitor20TraverseUnaryCoawaitEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseUnaryCoawaitEPNS_13UnaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryCoawait(UnaryOperator /*P*/ S) {
    return TraverseUnaryCoawait(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseUnaryCoawait(UnaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    do {
      if (!getDerived().WalkUpFromUnaryCoawait(S)) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getSubExpr()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryCoawait">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryCoawait", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromUnaryCoawaitEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromUnaryCoawaitEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryCoawait(UnaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromUnaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryCoawait(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryCoawait">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 369,
   FQN="clang::RecursiveASTVisitor::VisitUnaryCoawait", NM="_ZN5clang19RecursiveASTVisitor17VisitUnaryCoawaitEPNS_13UnaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitUnaryCoawaitEPNS_13UnaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryCoawait(UnaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinPtrMemD">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinPtrMemD", NM="_ZN5clang19RecursiveASTVisitor18TraverseBinPtrMemDEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseBinPtrMemDEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinPtrMemD(BinaryOperator /*P*/ S) {
    return TraverseBinPtrMemD(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinPtrMemD(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinPtrMemD(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinPtrMemD">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinPtrMemD", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromBinPtrMemDEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromBinPtrMemDEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinPtrMemD(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinPtrMemD(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinPtrMemD">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinPtrMemD", NM="_ZN5clang19RecursiveASTVisitor15VisitBinPtrMemDEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitBinPtrMemDEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinPtrMemD(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinPtrMemI">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinPtrMemI", NM="_ZN5clang19RecursiveASTVisitor18TraverseBinPtrMemIEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseBinPtrMemIEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinPtrMemI(BinaryOperator /*P*/ S) {
    return TraverseBinPtrMemI(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinPtrMemI(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinPtrMemI(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinPtrMemI">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinPtrMemI", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromBinPtrMemIEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromBinPtrMemIEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinPtrMemI(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinPtrMemI(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinPtrMemI">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinPtrMemI", NM="_ZN5clang19RecursiveASTVisitor15VisitBinPtrMemIEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitBinPtrMemIEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinPtrMemI(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinMul">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinMul", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinMulEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinMulEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinMul(BinaryOperator /*P*/ S) {
    return TraverseBinMul(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinMul(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinMul(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinMul">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinMul", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinMulEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinMulEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinMul(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinMul(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinMul">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinMul", NM="_ZN5clang19RecursiveASTVisitor11VisitBinMulEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinMulEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinMul(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinDiv">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinDiv", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinDivEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinDivEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinDiv(BinaryOperator /*P*/ S) {
    return TraverseBinDiv(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinDiv(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinDiv(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinDiv">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinDiv", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinDivEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinDivEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinDiv(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinDiv(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinDiv">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinDiv", NM="_ZN5clang19RecursiveASTVisitor11VisitBinDivEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinDivEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinDiv(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinRem">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinRem", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinRemEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinRemEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinRem(BinaryOperator /*P*/ S) {
    return TraverseBinRem(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinRem(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinRem(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinRem">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinRem", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinRemEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinRemEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinRem(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinRem(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinRem">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinRem", NM="_ZN5clang19RecursiveASTVisitor11VisitBinRemEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinRemEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinRem(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinAdd">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinAdd", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinAddEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinAddEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinAdd(BinaryOperator /*P*/ S) {
    return TraverseBinAdd(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinAdd(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinAdd(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinAdd">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinAdd", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinAddEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinAddEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinAdd(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinAdd(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinAdd">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinAdd", NM="_ZN5clang19RecursiveASTVisitor11VisitBinAddEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinAddEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinAdd(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinSub">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinSub", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinSubEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinSubEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinSub(BinaryOperator /*P*/ S) {
    return TraverseBinSub(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinSub(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinSub(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinSub">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinSub", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinSubEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinSubEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinSub(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinSub(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinSub">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinSub", NM="_ZN5clang19RecursiveASTVisitor11VisitBinSubEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinSubEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinSub(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinShl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinShl", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinShlEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinShlEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinShl(BinaryOperator /*P*/ S) {
    return TraverseBinShl(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinShl(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinShl(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinShl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinShl", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinShlEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinShlEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinShl(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinShl(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinShl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinShl", NM="_ZN5clang19RecursiveASTVisitor11VisitBinShlEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinShlEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinShl(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinShr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinShr", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinShrEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinShrEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinShr(BinaryOperator /*P*/ S) {
    return TraverseBinShr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinShr(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinShr(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinShr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinShr", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinShrEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinShrEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinShr(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinShr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinShr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinShr", NM="_ZN5clang19RecursiveASTVisitor11VisitBinShrEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinShrEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinShr(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinLT">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinLT", NM="_ZN5clang19RecursiveASTVisitor13TraverseBinLTEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13TraverseBinLTEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinLT(BinaryOperator /*P*/ S) {
    return TraverseBinLT(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinLT(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinLT(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinLT">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinLT", NM="_ZN5clang19RecursiveASTVisitor15WalkUpFromBinLTEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15WalkUpFromBinLTEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinLT(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinLT(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinLT">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinLT", NM="_ZN5clang19RecursiveASTVisitor10VisitBinLTEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor10VisitBinLTEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinLT(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinGT">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinGT", NM="_ZN5clang19RecursiveASTVisitor13TraverseBinGTEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13TraverseBinGTEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinGT(BinaryOperator /*P*/ S) {
    return TraverseBinGT(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinGT(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinGT(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinGT">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinGT", NM="_ZN5clang19RecursiveASTVisitor15WalkUpFromBinGTEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15WalkUpFromBinGTEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinGT(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinGT(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinGT">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinGT", NM="_ZN5clang19RecursiveASTVisitor10VisitBinGTEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor10VisitBinGTEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinGT(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinLE">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinLE", NM="_ZN5clang19RecursiveASTVisitor13TraverseBinLEEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13TraverseBinLEEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinLE(BinaryOperator /*P*/ S) {
    return TraverseBinLE(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinLE(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinLE(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinLE">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinLE", NM="_ZN5clang19RecursiveASTVisitor15WalkUpFromBinLEEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15WalkUpFromBinLEEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinLE(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinLE(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinLE">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinLE", NM="_ZN5clang19RecursiveASTVisitor10VisitBinLEEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor10VisitBinLEEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinLE(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinGE">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinGE", NM="_ZN5clang19RecursiveASTVisitor13TraverseBinGEEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13TraverseBinGEEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinGE(BinaryOperator /*P*/ S) {
    return TraverseBinGE(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinGE(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinGE(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinGE">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinGE", NM="_ZN5clang19RecursiveASTVisitor15WalkUpFromBinGEEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15WalkUpFromBinGEEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinGE(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinGE(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinGE">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinGE", NM="_ZN5clang19RecursiveASTVisitor10VisitBinGEEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor10VisitBinGEEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinGE(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinEQ">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinEQ", NM="_ZN5clang19RecursiveASTVisitor13TraverseBinEQEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13TraverseBinEQEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinEQ(BinaryOperator /*P*/ S) {
    return TraverseBinEQ(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinEQ(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinEQ(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinEQ">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinEQ", NM="_ZN5clang19RecursiveASTVisitor15WalkUpFromBinEQEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15WalkUpFromBinEQEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinEQ(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinEQ(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinEQ">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinEQ", NM="_ZN5clang19RecursiveASTVisitor10VisitBinEQEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor10VisitBinEQEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinEQ(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinNE">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinNE", NM="_ZN5clang19RecursiveASTVisitor13TraverseBinNEEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13TraverseBinNEEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinNE(BinaryOperator /*P*/ S) {
    return TraverseBinNE(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinNE(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinNE(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinNE">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinNE", NM="_ZN5clang19RecursiveASTVisitor15WalkUpFromBinNEEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15WalkUpFromBinNEEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinNE(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinNE(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinNE">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinNE", NM="_ZN5clang19RecursiveASTVisitor10VisitBinNEEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor10VisitBinNEEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinNE(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinAnd">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinAnd", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinAndEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinAndEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinAnd(BinaryOperator /*P*/ S) {
    return TraverseBinAnd(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinAnd(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinAnd(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinAnd">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinAnd", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinAndEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinAndEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinAnd(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinAnd(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinAnd">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinAnd", NM="_ZN5clang19RecursiveASTVisitor11VisitBinAndEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinAndEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinAnd(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinXor">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinXor", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinXorEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinXorEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinXor(BinaryOperator /*P*/ S) {
    return TraverseBinXor(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinXor(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinXor(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinXor">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinXor", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinXorEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinXorEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinXor(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinXor(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinXor">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinXor", NM="_ZN5clang19RecursiveASTVisitor11VisitBinXorEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinXorEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinXor(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinOr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinOr", NM="_ZN5clang19RecursiveASTVisitor13TraverseBinOrEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13TraverseBinOrEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinOr(BinaryOperator /*P*/ S) {
    return TraverseBinOr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinOr(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinOr(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinOr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinOr", NM="_ZN5clang19RecursiveASTVisitor15WalkUpFromBinOrEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15WalkUpFromBinOrEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinOr(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinOr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinOr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinOr", NM="_ZN5clang19RecursiveASTVisitor10VisitBinOrEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor10VisitBinOrEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinOr(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinLAnd">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinLAnd", NM="_ZN5clang19RecursiveASTVisitor15TraverseBinLAndEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15TraverseBinLAndEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinLAnd(BinaryOperator /*P*/ S) {
    return TraverseBinLAnd(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinLAnd(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinLAnd(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinLAnd">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinLAnd", NM="_ZN5clang19RecursiveASTVisitor17WalkUpFromBinLAndEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17WalkUpFromBinLAndEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinLAnd(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinLAnd(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinLAnd">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinLAnd", NM="_ZN5clang19RecursiveASTVisitor12VisitBinLAndEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12VisitBinLAndEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinLAnd(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinLOr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinLOr", NM="_ZN5clang19RecursiveASTVisitor14TraverseBinLOrEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14TraverseBinLOrEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinLOr(BinaryOperator /*P*/ S) {
    return TraverseBinLOr(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinLOr(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinLOr(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinLOr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinLOr", NM="_ZN5clang19RecursiveASTVisitor16WalkUpFromBinLOrEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16WalkUpFromBinLOrEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinLOr(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinLOr(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinLOr">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinLOr", NM="_ZN5clang19RecursiveASTVisitor11VisitBinLOrEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor11VisitBinLOrEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinLOr(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinAssign", NM="_ZN5clang19RecursiveASTVisitor17TraverseBinAssignEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseBinAssignEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinAssign(BinaryOperator /*P*/ S) {
    return TraverseBinAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinAssign(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinAssign", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromBinAssignEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromBinAssignEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinAssign(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinAssign", NM="_ZN5clang19RecursiveASTVisitor14VisitBinAssignEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitBinAssignEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinAssign(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinComma">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::TraverseBinComma", NM="_ZN5clang19RecursiveASTVisitor16TraverseBinCommaEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseBinCommaEPNS_14BinaryOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinComma(BinaryOperator /*P*/ S) {
    return TraverseBinComma(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinComma(BinaryOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinComma(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinComma">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinComma", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromBinCommaEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromBinCommaEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinComma(BinaryOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromBinaryOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinComma(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinComma">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitBinComma", NM="_ZN5clang19RecursiveASTVisitor13VisitBinCommaEPNS_14BinaryOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitBinCommaEPNS_14BinaryOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinComma(BinaryOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinMulAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinMulAssign", NM="_ZN5clang19RecursiveASTVisitor20TraverseBinMulAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseBinMulAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinMulAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinMulAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinMulAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinMulAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinMulAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinMulAssign", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromBinMulAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromBinMulAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinMulAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinMulAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinMulAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinMulAssign", NM="_ZN5clang19RecursiveASTVisitor17VisitBinMulAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitBinMulAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinMulAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinDivAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinDivAssign", NM="_ZN5clang19RecursiveASTVisitor20TraverseBinDivAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseBinDivAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinDivAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinDivAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinDivAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinDivAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinDivAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinDivAssign", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromBinDivAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromBinDivAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinDivAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinDivAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinDivAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinDivAssign", NM="_ZN5clang19RecursiveASTVisitor17VisitBinDivAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitBinDivAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinDivAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinRemAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinRemAssign", NM="_ZN5clang19RecursiveASTVisitor20TraverseBinRemAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseBinRemAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinRemAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinRemAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinRemAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinRemAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinRemAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinRemAssign", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromBinRemAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromBinRemAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinRemAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinRemAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinRemAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinRemAssign", NM="_ZN5clang19RecursiveASTVisitor17VisitBinRemAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitBinRemAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinRemAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinAddAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinAddAssign", NM="_ZN5clang19RecursiveASTVisitor20TraverseBinAddAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseBinAddAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinAddAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinAddAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinAddAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinAddAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinAddAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinAddAssign", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromBinAddAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromBinAddAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinAddAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinAddAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinAddAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinAddAssign", NM="_ZN5clang19RecursiveASTVisitor17VisitBinAddAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitBinAddAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinAddAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinSubAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinSubAssign", NM="_ZN5clang19RecursiveASTVisitor20TraverseBinSubAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseBinSubAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinSubAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinSubAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinSubAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinSubAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinSubAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinSubAssign", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromBinSubAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromBinSubAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinSubAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinSubAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinSubAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinSubAssign", NM="_ZN5clang19RecursiveASTVisitor17VisitBinSubAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitBinSubAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinSubAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinShlAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinShlAssign", NM="_ZN5clang19RecursiveASTVisitor20TraverseBinShlAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseBinShlAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinShlAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinShlAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinShlAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinShlAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinShlAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinShlAssign", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromBinShlAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromBinShlAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinShlAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinShlAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinShlAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinShlAssign", NM="_ZN5clang19RecursiveASTVisitor17VisitBinShlAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitBinShlAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinShlAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinShrAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinShrAssign", NM="_ZN5clang19RecursiveASTVisitor20TraverseBinShrAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseBinShrAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinShrAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinShrAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinShrAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinShrAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinShrAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinShrAssign", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromBinShrAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromBinShrAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinShrAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinShrAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinShrAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinShrAssign", NM="_ZN5clang19RecursiveASTVisitor17VisitBinShrAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitBinShrAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinShrAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinAndAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinAndAssign", NM="_ZN5clang19RecursiveASTVisitor20TraverseBinAndAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseBinAndAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinAndAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinAndAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinAndAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinAndAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinAndAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinAndAssign", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromBinAndAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromBinAndAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinAndAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinAndAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinAndAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinAndAssign", NM="_ZN5clang19RecursiveASTVisitor17VisitBinAndAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitBinAndAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinAndAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinOrAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinOrAssign", NM="_ZN5clang19RecursiveASTVisitor19TraverseBinOrAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseBinOrAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinOrAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinOrAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinOrAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinOrAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinOrAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinOrAssign", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromBinOrAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromBinOrAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinOrAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinOrAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinOrAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinOrAssign", NM="_ZN5clang19RecursiveASTVisitor16VisitBinOrAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitBinOrAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinOrAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBinXorAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::TraverseBinXorAssign", NM="_ZN5clang19RecursiveASTVisitor20TraverseBinXorAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseBinXorAssignEPNS_22CompoundAssignOperatorEPN4llvm15SmallVectorImplINS3_14PointerIntPairIPNS_4StmtELj1EbNS3_21PointerLikeTypeTraitsIS7_EENS3_18PointerIntPairInfoIS7_Lj1ES9_EEEEEE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBinXorAssign(CompoundAssignOperator /*P*/ S) {
    return TraverseBinXorAssign(S, (SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ )null);
  }
  public default/*interface*/ boolean TraverseBinXorAssign(CompoundAssignOperator /*P*/ S, SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue/*= null*/) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBinXorAssign(S)) {
          return false;
        }
      } while (false);
    }
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getLHS()))))) {
        return false;
      }
    } while (false);
    do {
      if (!(has_overridden_traverse_with_queue_method("TraverseStmt") ? ((Derived)(Native.$star(this))).TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS())), Queue) : getDerived().TraverseStmt(((/*static_cast*/Stmt /*P*/ )(S.getRHS()))))) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBinXorAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBinXorAssign", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromBinXorAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromBinXorAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBinXorAssign(CompoundAssignOperator /*P*/ S) {
    do {
      if (!getDerived().WalkUpFromCompoundAssignOperator(S)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBinXorAssign(S)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBinXorAssign">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 401,
   FQN="clang::RecursiveASTVisitor::VisitBinXorAssign", NM="_ZN5clang19RecursiveASTVisitor17VisitBinXorAssignEPNS_22CompoundAssignOperatorE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitBinXorAssignEPNS_22CompoundAssignOperatorE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBinXorAssign(CompoundAssignOperator /*P*/ S) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBuiltinType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 915,
   FQN="clang::RecursiveASTVisitor::TraverseBuiltinType", NM="_ZN5clang19RecursiveASTVisitor19TraverseBuiltinTypeEPNS_11BuiltinTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseBuiltinTypeEPNS_11BuiltinTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBuiltinType(BuiltinType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBuiltinType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBuiltinType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseComplexType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 917,
   FQN="clang::RecursiveASTVisitor::TraverseComplexType", NM="_ZN5clang19RecursiveASTVisitor19TraverseComplexTypeEPNS_11ComplexTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseComplexTypeEPNS_11ComplexTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseComplexType(ComplexType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromComplexType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromComplexType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 919,
   FQN="clang::RecursiveASTVisitor::TraversePointerType", NM="_ZN5clang19RecursiveASTVisitor19TraversePointerTypeEPNS_11PointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraversePointerTypeEPNS_11PointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePointerType(PointerType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPointerType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getPointeeType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPointerType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBlockPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 921,
   FQN="clang::RecursiveASTVisitor::TraverseBlockPointerType", NM="_ZN5clang19RecursiveASTVisitor24TraverseBlockPointerTypeEPNS_16BlockPointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseBlockPointerTypeEPNS_16BlockPointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBlockPointerType(BlockPointerType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBlockPointerType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getPointeeType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBlockPointerType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLValueReferenceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 924,
   FQN="clang::RecursiveASTVisitor::TraverseLValueReferenceType", NM="_ZN5clang19RecursiveASTVisitor27TraverseLValueReferenceTypeEPNS_19LValueReferenceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseLValueReferenceTypeEPNS_19LValueReferenceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLValueReferenceType(LValueReferenceType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLValueReferenceType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getPointeeType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLValueReferenceType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseRValueReferenceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 927,
   FQN="clang::RecursiveASTVisitor::TraverseRValueReferenceType", NM="_ZN5clang19RecursiveASTVisitor27TraverseRValueReferenceTypeEPNS_19RValueReferenceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseRValueReferenceTypeEPNS_19RValueReferenceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseRValueReferenceType(RValueReferenceType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromRValueReferenceType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getPointeeType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromRValueReferenceType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMemberPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 930,
   FQN="clang::RecursiveASTVisitor::TraverseMemberPointerType", NM="_ZN5clang19RecursiveASTVisitor25TraverseMemberPointerTypeEPNS_17MemberPointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseMemberPointerTypeEPNS_17MemberPointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMemberPointerType(MemberPointerType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMemberPointerType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(new QualType(T.__getClass(), 0))) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseType(T.getPointeeType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMemberPointerType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConstantArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 939,
   FQN="clang::RecursiveASTVisitor::TraverseConstantArrayType", NM="_ZN5clang19RecursiveASTVisitor25TraverseConstantArrayTypeEPNS_17ConstantArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseConstantArrayTypeEPNS_17ConstantArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConstantArrayType(ConstantArrayType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromConstantArrayType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromConstantArrayType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIncompleteArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 942,
   FQN="clang::RecursiveASTVisitor::TraverseIncompleteArrayType", NM="_ZN5clang19RecursiveASTVisitor27TraverseIncompleteArrayTypeEPNS_19IncompleteArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseIncompleteArrayTypeEPNS_19IncompleteArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIncompleteArrayType(IncompleteArrayType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIncompleteArrayType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIncompleteArrayType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVariableArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 945,
   FQN="clang::RecursiveASTVisitor::TraverseVariableArrayType", NM="_ZN5clang19RecursiveASTVisitor25TraverseVariableArrayTypeEPNS_17VariableArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseVariableArrayTypeEPNS_17VariableArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVariableArrayType(VariableArrayType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVariableArrayType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getElementType())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseStmt(T.getSizeExpr())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVariableArrayType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDependentSizedArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 950,
   FQN="clang::RecursiveASTVisitor::TraverseDependentSizedArrayType", NM="_ZN5clang19RecursiveASTVisitor31TraverseDependentSizedArrayTypeEPNS_23DependentSizedArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseDependentSizedArrayTypeEPNS_23DependentSizedArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDependentSizedArrayType(DependentSizedArrayType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentSizedArrayType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getElementType())) {
            return false;
          }
        } while (false);
        if ((T.getSizeExpr() != null)) {
          do {
            if (!getDerived().TraverseStmt(T.getSizeExpr())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentSizedArrayType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDependentSizedExtVectorType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 956,
   FQN="clang::RecursiveASTVisitor::TraverseDependentSizedExtVectorType", NM="_ZN5clang19RecursiveASTVisitor35TraverseDependentSizedExtVectorTypeEPNS_27DependentSizedExtVectorTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35TraverseDependentSizedExtVectorTypeEPNS_27DependentSizedExtVectorTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDependentSizedExtVectorType(DependentSizedExtVectorType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentSizedExtVectorType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if ((T.getSizeExpr() != null)) {
          do {
            if (!getDerived().TraverseStmt(T.getSizeExpr())) {
              return false;
            }
          } while (false);
        }
        do {
          if (!getDerived().TraverseType(T.getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentSizedExtVectorType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVectorType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 962,
   FQN="clang::RecursiveASTVisitor::TraverseVectorType", NM="_ZN5clang19RecursiveASTVisitor18TraverseVectorTypeEPNS_10VectorTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseVectorTypeEPNS_10VectorTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVectorType(VectorType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVectorType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVectorType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseExtVectorType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 964,
   FQN="clang::RecursiveASTVisitor::TraverseExtVectorType", NM="_ZN5clang19RecursiveASTVisitor21TraverseExtVectorTypeEPNS_13ExtVectorTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseExtVectorTypeEPNS_13ExtVectorTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseExtVectorType(ExtVectorType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExtVectorType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExtVectorType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFunctionProtoType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 969,
   FQN="clang::RecursiveASTVisitor::TraverseFunctionProtoType", NM="_ZN5clang19RecursiveASTVisitor25TraverseFunctionProtoTypeEPNS_17FunctionProtoTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseFunctionProtoTypeEPNS_17FunctionProtoTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFunctionProtoType(FunctionProtoType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionProtoType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getReturnType())) {
            return false;
          }
        } while (false);
        for (final /*const*/ QualType /*&*/ A : T.param_types()) {
          do {
            if (!getDerived().TraverseType(A)) {
              return false;
            }
          } while (false);
        }
        for (final /*const*/ QualType /*&*/ E : T.exceptions()) {
          do {
            if (!getDerived().TraverseType(E)) {
              return false;
            }
          } while (false);
        }
        {
          Expr /*P*/ NE = T.getNoexceptExpr();
          if ((NE != null)) {
            do {
              if (!getDerived().TraverseStmt(NE)) {
                return false;
              }
            } while (false);
          }
        }
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionProtoType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFunctionNoProtoType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 966,
   FQN="clang::RecursiveASTVisitor::TraverseFunctionNoProtoType", NM="_ZN5clang19RecursiveASTVisitor27TraverseFunctionNoProtoTypeEPNS_19FunctionNoProtoTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseFunctionNoProtoTypeEPNS_19FunctionNoProtoTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFunctionNoProtoType(FunctionNoProtoType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionNoProtoType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getReturnType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionNoProtoType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnresolvedUsingType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 984,
   FQN="clang::RecursiveASTVisitor::TraverseUnresolvedUsingType", NM="_ZN5clang19RecursiveASTVisitor27TraverseUnresolvedUsingTypeEPNS_19UnresolvedUsingTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseUnresolvedUsingTypeEPNS_19UnresolvedUsingTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnresolvedUsingType(UnresolvedUsingType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedUsingType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedUsingType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseParenType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1018,
   FQN="clang::RecursiveASTVisitor::TraverseParenType", NM="_ZN5clang19RecursiveASTVisitor17TraverseParenTypeEPNS_9ParenTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseParenTypeEPNS_9ParenTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseParenType(ParenType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromParenType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getInnerType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromParenType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypedefType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 985,
   FQN="clang::RecursiveASTVisitor::TraverseTypedefType", NM="_ZN5clang19RecursiveASTVisitor19TraverseTypedefTypeEPNS_11TypedefTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseTypedefTypeEPNS_11TypedefTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypedefType(TypedefType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypedefType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypedefType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAdjustedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 935,
   FQN="clang::RecursiveASTVisitor::TraverseAdjustedType", NM="_ZN5clang19RecursiveASTVisitor20TraverseAdjustedTypeEPNS_12AdjustedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseAdjustedTypeEPNS_12AdjustedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAdjustedType(AdjustedType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAdjustedType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getOriginalType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAdjustedType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDecayedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 937,
   FQN="clang::RecursiveASTVisitor::TraverseDecayedType", NM="_ZN5clang19RecursiveASTVisitor19TraverseDecayedTypeEPNS_11DecayedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseDecayedTypeEPNS_11DecayedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDecayedType(DecayedType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDecayedType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getOriginalType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDecayedType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeOfExprType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 987,
   FQN="clang::RecursiveASTVisitor::TraverseTypeOfExprType", NM="_ZN5clang19RecursiveASTVisitor22TraverseTypeOfExprTypeEPNS_14TypeOfExprTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseTypeOfExprTypeEPNS_14TypeOfExprTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeOfExprType(TypeOfExprType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeOfExprType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseStmt(T.getUnderlyingExpr())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeOfExprType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeOfType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 990,
   FQN="clang::RecursiveASTVisitor::TraverseTypeOfType", NM="_ZN5clang19RecursiveASTVisitor18TraverseTypeOfTypeEPNS_10TypeOfTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseTypeOfTypeEPNS_10TypeOfTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeOfType(TypeOfType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeOfType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getUnderlyingType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeOfType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDecltypeType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 992,
   FQN="clang::RecursiveASTVisitor::TraverseDecltypeType", NM="_ZN5clang19RecursiveASTVisitor20TraverseDecltypeTypeEPNS_12DecltypeTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseDecltypeTypeEPNS_12DecltypeTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDecltypeType(DecltypeType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDecltypeType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseStmt(T.getUnderlyingExpr())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDecltypeType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryTransformType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 995,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryTransformType", NM="_ZN5clang19RecursiveASTVisitor26TraverseUnaryTransformTypeEPNS_18UnaryTransformTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseUnaryTransformTypeEPNS_18UnaryTransformTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryTransformType(UnaryTransformType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnaryTransformType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getBaseType())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseType(T.getUnderlyingType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnaryTransformType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseRecordType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1002,
   FQN="clang::RecursiveASTVisitor::TraverseRecordType", NM="_ZN5clang19RecursiveASTVisitor18TraverseRecordTypeEPNS_10RecordTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseRecordTypeEPNS_10RecordTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseRecordType(RecordType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromRecordType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromRecordType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseEnumType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1003,
   FQN="clang::RecursiveASTVisitor::TraverseEnumType", NM="_ZN5clang19RecursiveASTVisitor16TraverseEnumTypeEPNS_8EnumTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseEnumTypeEPNS_8EnumTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseEnumType(EnumType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromEnumType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromEnumType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseElaboratedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1020,
   FQN="clang::RecursiveASTVisitor::TraverseElaboratedType", NM="_ZN5clang19RecursiveASTVisitor22TraverseElaboratedTypeEPNS_14ElaboratedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseElaboratedTypeEPNS_14ElaboratedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseElaboratedType(ElaboratedType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromElaboratedType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if ((T.getQualifier() != null)) {
          do {
            if (!getDerived().TraverseNestedNameSpecifier(T.getQualifier())) {
              return false;
            }
          } while (false);
        }
        do {
          if (!getDerived().TraverseType(T.getNamedType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromElaboratedType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAttributedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1015,
   FQN="clang::RecursiveASTVisitor::TraverseAttributedType", NM="_ZN5clang19RecursiveASTVisitor22TraverseAttributedTypeEPNS_14AttributedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseAttributedTypeEPNS_14AttributedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAttributedType(AttributedType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAttributedType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getModifiedType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAttributedType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateTypeParmType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1004,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateTypeParmType", NM="_ZN5clang19RecursiveASTVisitor28TraverseTemplateTypeParmTypeEPNS_20TemplateTypeParmTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseTemplateTypeParmTypeEPNS_20TemplateTypeParmTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateTypeParmType(TemplateTypeParmType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTemplateTypeParmType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTemplateTypeParmType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSubstTemplateTypeParmType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1005,
   FQN="clang::RecursiveASTVisitor::TraverseSubstTemplateTypeParmType", NM="_ZN5clang19RecursiveASTVisitor33TraverseSubstTemplateTypeParmTypeEPNS_25SubstTemplateTypeParmTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33TraverseSubstTemplateTypeParmTypeEPNS_25SubstTemplateTypeParmTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSubstTemplateTypeParmType(SubstTemplateTypeParmType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSubstTemplateTypeParmType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSubstTemplateTypeParmType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSubstTemplateTypeParmPackType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1006,
   FQN="clang::RecursiveASTVisitor::TraverseSubstTemplateTypeParmPackType", NM="_ZN5clang19RecursiveASTVisitor37TraverseSubstTemplateTypeParmPackTypeEPNS_29SubstTemplateTypeParmPackTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37TraverseSubstTemplateTypeParmPackTypeEPNS_29SubstTemplateTypeParmPackTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSubstTemplateTypeParmPackType(SubstTemplateTypeParmPackType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSubstTemplateTypeParmPackType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromSubstTemplateTypeParmPackType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateSpecializationType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1008,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateSpecializationType", NM="_ZN5clang19RecursiveASTVisitor34TraverseTemplateSpecializationTypeEPNS_26TemplateSpecializationTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34TraverseTemplateSpecializationTypeEPNS_26TemplateSpecializationTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateSpecializationType(TemplateSpecializationType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTemplateSpecializationType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTemplateName(T.getTemplateName())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseTemplateArguments(T.getArgs(), T.getNumArgs())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTemplateSpecializationType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAutoType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1000,
   FQN="clang::RecursiveASTVisitor::TraverseAutoType", NM="_ZN5clang19RecursiveASTVisitor16TraverseAutoTypeEPNS_8AutoTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseAutoTypeEPNS_8AutoTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAutoType(AutoType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAutoType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getDeducedType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAutoType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseInjectedClassNameType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1013,
   FQN="clang::RecursiveASTVisitor::TraverseInjectedClassNameType", NM="_ZN5clang19RecursiveASTVisitor29TraverseInjectedClassNameTypeEPNS_21InjectedClassNameTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseInjectedClassNameTypeEPNS_21InjectedClassNameTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseInjectedClassNameType(InjectedClassNameType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromInjectedClassNameType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromInjectedClassNameType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDependentNameType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1027,
   FQN="clang::RecursiveASTVisitor::TraverseDependentNameType", NM="_ZN5clang19RecursiveASTVisitor25TraverseDependentNameTypeEPNS_17DependentNameTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseDependentNameTypeEPNS_17DependentNameTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDependentNameType(DependentNameType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentNameType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifier(T.getQualifier())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentNameType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDependentTemplateSpecializationType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1030,
   FQN="clang::RecursiveASTVisitor::TraverseDependentTemplateSpecializationType", NM="_ZN5clang19RecursiveASTVisitor43TraverseDependentTemplateSpecializationTypeEPNS_35DependentTemplateSpecializationTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor43TraverseDependentTemplateSpecializationTypeEPNS_35DependentTemplateSpecializationTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDependentTemplateSpecializationType(DependentTemplateSpecializationType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentTemplateSpecializationType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifier(T.getQualifier())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseTemplateArguments(T.getArgs(), T.getNumArgs())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromDependentTemplateSpecializationType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePackExpansionType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1035,
   FQN="clang::RecursiveASTVisitor::TraversePackExpansionType", NM="_ZN5clang19RecursiveASTVisitor25TraversePackExpansionTypeEPNS_17PackExpansionTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraversePackExpansionTypeEPNS_17PackExpansionTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePackExpansionType(PackExpansionType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPackExpansionType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getPattern())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPackExpansionType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCObjectType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1039,
   FQN="clang::RecursiveASTVisitor::TraverseObjCObjectType", NM="_ZN5clang19RecursiveASTVisitor22TraverseObjCObjectTypeEPNS_14ObjCObjectTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseObjCObjectTypeEPNS_14ObjCObjectTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCObjectType(ObjCObjectType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCObjectType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (T.getBaseType().getTypePtr() != T) {
          do {
            if (!getDerived().TraverseType(T.getBaseType())) {
              return false;
            }
          } while (false);
        }
        for (QualType typeArg : T.getTypeArgsAsWritten()) {
          do {
            if (!getDerived().TraverseType(typeArg)) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCObjectType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCInterfaceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1037,
   FQN="clang::RecursiveASTVisitor::TraverseObjCInterfaceType", NM="_ZN5clang19RecursiveASTVisitor25TraverseObjCInterfaceTypeEPNS_17ObjCInterfaceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseObjCInterfaceTypeEPNS_17ObjCInterfaceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCInterfaceType(ObjCInterfaceType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCInterfaceType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCInterfaceType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCObjectPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1049,
   FQN="clang::RecursiveASTVisitor::TraverseObjCObjectPointerType", NM="_ZN5clang19RecursiveASTVisitor29TraverseObjCObjectPointerTypeEPNS_21ObjCObjectPointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseObjCObjectPointerTypeEPNS_21ObjCObjectPointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCObjectPointerType(ObjCObjectPointerType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCObjectPointerType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getPointeeType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCObjectPointerType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePipeType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1054,
   FQN="clang::RecursiveASTVisitor::TraversePipeType", NM="_ZN5clang19RecursiveASTVisitor16TraversePipeTypeEPNS_8PipeTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraversePipeTypeEPNS_8PipeTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePipeType(PipeType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPipeType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPipeType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAtomicType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1052,
   FQN="clang::RecursiveASTVisitor::TraverseAtomicType", NM="_ZN5clang19RecursiveASTVisitor18TraverseAtomicTypeEPNS_10AtomicTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseAtomicTypeEPNS_10AtomicTypeE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAtomicType(AtomicType /*P*/ T) {
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAtomicType(T)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseType(T.getValueType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAtomicType(T)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  // The above header #undefs ABSTRACT_TYPE and TYPE upon exit.
  
  // Define WalkUpFrom*() and empty Visit*() for all Type classes.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 415,
   FQN="clang::RecursiveASTVisitor::WalkUpFromType", NM="_ZN5clang19RecursiveASTVisitor14WalkUpFromTypeEPNS_4TypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14WalkUpFromTypeEPNS_4TypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromType(Type /*P*/ T) {
    return getDerived().VisitType(T);
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 416,
   FQN="clang::RecursiveASTVisitor::VisitType", NM="_ZN5clang19RecursiveASTVisitor9VisitTypeEPNS_4TypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor9VisitTypeEPNS_4TypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitType(Type /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBuiltinType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 62,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBuiltinType", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromBuiltinTypeEPNS_11BuiltinTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromBuiltinTypeEPNS_11BuiltinTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBuiltinType(BuiltinType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBuiltinType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBuiltinType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 62,
   FQN="clang::RecursiveASTVisitor::VisitBuiltinType", NM="_ZN5clang19RecursiveASTVisitor16VisitBuiltinTypeEPNS_11BuiltinTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitBuiltinTypeEPNS_11BuiltinTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBuiltinType(BuiltinType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromComplexType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 63,
   FQN="clang::RecursiveASTVisitor::WalkUpFromComplexType", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromComplexTypeEPNS_11ComplexTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromComplexTypeEPNS_11ComplexTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromComplexType(ComplexType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitComplexType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitComplexType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 63,
   FQN="clang::RecursiveASTVisitor::VisitComplexType", NM="_ZN5clang19RecursiveASTVisitor16VisitComplexTypeEPNS_11ComplexTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitComplexTypeEPNS_11ComplexTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitComplexType(ComplexType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 64,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPointerType", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromPointerTypeEPNS_11PointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromPointerTypeEPNS_11PointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPointerType(PointerType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPointerType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 64,
   FQN="clang::RecursiveASTVisitor::VisitPointerType", NM="_ZN5clang19RecursiveASTVisitor16VisitPointerTypeEPNS_11PointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitPointerTypeEPNS_11PointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPointerType(PointerType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBlockPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 65,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBlockPointerType", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromBlockPointerTypeEPNS_16BlockPointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromBlockPointerTypeEPNS_16BlockPointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBlockPointerType(BlockPointerType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBlockPointerType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBlockPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 65,
   FQN="clang::RecursiveASTVisitor::VisitBlockPointerType", NM="_ZN5clang19RecursiveASTVisitor21VisitBlockPointerTypeEPNS_16BlockPointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitBlockPointerTypeEPNS_16BlockPointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBlockPointerType(BlockPointerType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromReferenceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 66,
   FQN="clang::RecursiveASTVisitor::WalkUpFromReferenceType", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromReferenceTypeEPNS_13ReferenceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromReferenceTypeEPNS_13ReferenceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromReferenceType(ReferenceType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitReferenceType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitReferenceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 66,
   FQN="clang::RecursiveASTVisitor::VisitReferenceType", NM="_ZN5clang19RecursiveASTVisitor18VisitReferenceTypeEPNS_13ReferenceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitReferenceTypeEPNS_13ReferenceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitReferenceType(ReferenceType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromLValueReferenceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 67,
   FQN="clang::RecursiveASTVisitor::WalkUpFromLValueReferenceType", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromLValueReferenceTypeEPNS_19LValueReferenceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromLValueReferenceTypeEPNS_19LValueReferenceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromLValueReferenceType(LValueReferenceType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromReferenceType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitLValueReferenceType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLValueReferenceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 67,
   FQN="clang::RecursiveASTVisitor::VisitLValueReferenceType", NM="_ZN5clang19RecursiveASTVisitor24VisitLValueReferenceTypeEPNS_19LValueReferenceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitLValueReferenceTypeEPNS_19LValueReferenceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLValueReferenceType(LValueReferenceType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromRValueReferenceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 68,
   FQN="clang::RecursiveASTVisitor::WalkUpFromRValueReferenceType", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromRValueReferenceTypeEPNS_19RValueReferenceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromRValueReferenceTypeEPNS_19RValueReferenceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromRValueReferenceType(RValueReferenceType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromReferenceType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitRValueReferenceType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitRValueReferenceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 68,
   FQN="clang::RecursiveASTVisitor::VisitRValueReferenceType", NM="_ZN5clang19RecursiveASTVisitor24VisitRValueReferenceTypeEPNS_19RValueReferenceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitRValueReferenceTypeEPNS_19RValueReferenceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitRValueReferenceType(RValueReferenceType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromMemberPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 69,
   FQN="clang::RecursiveASTVisitor::WalkUpFromMemberPointerType", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromMemberPointerTypeEPNS_17MemberPointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromMemberPointerTypeEPNS_17MemberPointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromMemberPointerType(MemberPointerType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitMemberPointerType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMemberPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 69,
   FQN="clang::RecursiveASTVisitor::VisitMemberPointerType", NM="_ZN5clang19RecursiveASTVisitor22VisitMemberPointerTypeEPNS_17MemberPointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitMemberPointerTypeEPNS_17MemberPointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMemberPointerType(MemberPointerType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 70,
   FQN="clang::RecursiveASTVisitor::WalkUpFromArrayType", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromArrayTypeEPNS_9ArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromArrayTypeEPNS_9ArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromArrayType(ArrayType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitArrayType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 70,
   FQN="clang::RecursiveASTVisitor::VisitArrayType", NM="_ZN5clang19RecursiveASTVisitor14VisitArrayTypeEPNS_9ArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitArrayTypeEPNS_9ArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitArrayType(ArrayType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromConstantArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 71,
   FQN="clang::RecursiveASTVisitor::WalkUpFromConstantArrayType", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromConstantArrayTypeEPNS_17ConstantArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromConstantArrayTypeEPNS_17ConstantArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromConstantArrayType(ConstantArrayType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromArrayType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitConstantArrayType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConstantArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 71,
   FQN="clang::RecursiveASTVisitor::VisitConstantArrayType", NM="_ZN5clang19RecursiveASTVisitor22VisitConstantArrayTypeEPNS_17ConstantArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitConstantArrayTypeEPNS_17ConstantArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConstantArrayType(ConstantArrayType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromIncompleteArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 72,
   FQN="clang::RecursiveASTVisitor::WalkUpFromIncompleteArrayType", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromIncompleteArrayTypeEPNS_19IncompleteArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromIncompleteArrayTypeEPNS_19IncompleteArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromIncompleteArrayType(IncompleteArrayType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromArrayType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitIncompleteArrayType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIncompleteArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 72,
   FQN="clang::RecursiveASTVisitor::VisitIncompleteArrayType", NM="_ZN5clang19RecursiveASTVisitor24VisitIncompleteArrayTypeEPNS_19IncompleteArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitIncompleteArrayTypeEPNS_19IncompleteArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIncompleteArrayType(IncompleteArrayType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromVariableArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 73,
   FQN="clang::RecursiveASTVisitor::WalkUpFromVariableArrayType", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromVariableArrayTypeEPNS_17VariableArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromVariableArrayTypeEPNS_17VariableArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromVariableArrayType(VariableArrayType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromArrayType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitVariableArrayType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVariableArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 73,
   FQN="clang::RecursiveASTVisitor::VisitVariableArrayType", NM="_ZN5clang19RecursiveASTVisitor22VisitVariableArrayTypeEPNS_17VariableArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitVariableArrayTypeEPNS_17VariableArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVariableArrayType(VariableArrayType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDependentSizedArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 74,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDependentSizedArrayType", NM="_ZN5clang19RecursiveASTVisitor33WalkUpFromDependentSizedArrayTypeEPNS_23DependentSizedArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33WalkUpFromDependentSizedArrayTypeEPNS_23DependentSizedArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDependentSizedArrayType(DependentSizedArrayType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromArrayType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDependentSizedArrayType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDependentSizedArrayType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 74,
   FQN="clang::RecursiveASTVisitor::VisitDependentSizedArrayType", NM="_ZN5clang19RecursiveASTVisitor28VisitDependentSizedArrayTypeEPNS_23DependentSizedArrayTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitDependentSizedArrayTypeEPNS_23DependentSizedArrayTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDependentSizedArrayType(DependentSizedArrayType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDependentSizedExtVectorType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 75,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDependentSizedExtVectorType", NM="_ZN5clang19RecursiveASTVisitor37WalkUpFromDependentSizedExtVectorTypeEPNS_27DependentSizedExtVectorTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37WalkUpFromDependentSizedExtVectorTypeEPNS_27DependentSizedExtVectorTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDependentSizedExtVectorType(DependentSizedExtVectorType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDependentSizedExtVectorType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDependentSizedExtVectorType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 75,
   FQN="clang::RecursiveASTVisitor::VisitDependentSizedExtVectorType", NM="_ZN5clang19RecursiveASTVisitor32VisitDependentSizedExtVectorTypeEPNS_27DependentSizedExtVectorTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32VisitDependentSizedExtVectorTypeEPNS_27DependentSizedExtVectorTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDependentSizedExtVectorType(DependentSizedExtVectorType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromVectorType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 76,
   FQN="clang::RecursiveASTVisitor::WalkUpFromVectorType", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromVectorTypeEPNS_10VectorTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromVectorTypeEPNS_10VectorTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromVectorType(VectorType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitVectorType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVectorType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 76,
   FQN="clang::RecursiveASTVisitor::VisitVectorType", NM="_ZN5clang19RecursiveASTVisitor15VisitVectorTypeEPNS_10VectorTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitVectorTypeEPNS_10VectorTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVectorType(VectorType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromExtVectorType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 77,
   FQN="clang::RecursiveASTVisitor::WalkUpFromExtVectorType", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromExtVectorTypeEPNS_13ExtVectorTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromExtVectorTypeEPNS_13ExtVectorTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromExtVectorType(ExtVectorType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromVectorType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitExtVectorType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitExtVectorType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 77,
   FQN="clang::RecursiveASTVisitor::VisitExtVectorType", NM="_ZN5clang19RecursiveASTVisitor18VisitExtVectorTypeEPNS_13ExtVectorTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitExtVectorTypeEPNS_13ExtVectorTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitExtVectorType(ExtVectorType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFunctionType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 78,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFunctionType", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromFunctionTypeEPNS_12FunctionTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromFunctionTypeEPNS_12FunctionTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFunctionType(FunctionType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFunctionType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFunctionType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 78,
   FQN="clang::RecursiveASTVisitor::VisitFunctionType", NM="_ZN5clang19RecursiveASTVisitor17VisitFunctionTypeEPNS_12FunctionTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitFunctionTypeEPNS_12FunctionTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFunctionType(FunctionType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFunctionProtoType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 79,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFunctionProtoType", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromFunctionProtoTypeEPNS_17FunctionProtoTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromFunctionProtoTypeEPNS_17FunctionProtoTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFunctionProtoType(FunctionProtoType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromFunctionType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFunctionProtoType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFunctionProtoType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 79,
   FQN="clang::RecursiveASTVisitor::VisitFunctionProtoType", NM="_ZN5clang19RecursiveASTVisitor22VisitFunctionProtoTypeEPNS_17FunctionProtoTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitFunctionProtoTypeEPNS_17FunctionProtoTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFunctionProtoType(FunctionProtoType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFunctionNoProtoType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 80,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFunctionNoProtoType", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromFunctionNoProtoTypeEPNS_19FunctionNoProtoTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromFunctionNoProtoTypeEPNS_19FunctionNoProtoTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFunctionNoProtoType(FunctionNoProtoType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromFunctionType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFunctionNoProtoType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFunctionNoProtoType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 80,
   FQN="clang::RecursiveASTVisitor::VisitFunctionNoProtoType", NM="_ZN5clang19RecursiveASTVisitor24VisitFunctionNoProtoTypeEPNS_19FunctionNoProtoTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitFunctionNoProtoTypeEPNS_19FunctionNoProtoTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFunctionNoProtoType(FunctionNoProtoType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnresolvedUsingType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 81,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnresolvedUsingType", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromUnresolvedUsingTypeEPNS_19UnresolvedUsingTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromUnresolvedUsingTypeEPNS_19UnresolvedUsingTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnresolvedUsingType(UnresolvedUsingType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnresolvedUsingType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnresolvedUsingType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 81,
   FQN="clang::RecursiveASTVisitor::VisitUnresolvedUsingType", NM="_ZN5clang19RecursiveASTVisitor24VisitUnresolvedUsingTypeEPNS_19UnresolvedUsingTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitUnresolvedUsingTypeEPNS_19UnresolvedUsingTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnresolvedUsingType(UnresolvedUsingType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromParenType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 82,
   FQN="clang::RecursiveASTVisitor::WalkUpFromParenType", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromParenTypeEPNS_9ParenTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromParenTypeEPNS_9ParenTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromParenType(ParenType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitParenType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitParenType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 82,
   FQN="clang::RecursiveASTVisitor::VisitParenType", NM="_ZN5clang19RecursiveASTVisitor14VisitParenTypeEPNS_9ParenTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitParenTypeEPNS_9ParenTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitParenType(ParenType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypedefType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 83,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypedefType", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromTypedefTypeEPNS_11TypedefTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromTypedefTypeEPNS_11TypedefTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypedefType(TypedefType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypedefType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypedefType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 83,
   FQN="clang::RecursiveASTVisitor::VisitTypedefType", NM="_ZN5clang19RecursiveASTVisitor16VisitTypedefTypeEPNS_11TypedefTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitTypedefTypeEPNS_11TypedefTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypedefType(TypedefType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAdjustedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 84,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAdjustedType", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromAdjustedTypeEPNS_12AdjustedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromAdjustedTypeEPNS_12AdjustedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAdjustedType(AdjustedType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAdjustedType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAdjustedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 84,
   FQN="clang::RecursiveASTVisitor::VisitAdjustedType", NM="_ZN5clang19RecursiveASTVisitor17VisitAdjustedTypeEPNS_12AdjustedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitAdjustedTypeEPNS_12AdjustedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAdjustedType(AdjustedType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDecayedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 85,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDecayedType", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromDecayedTypeEPNS_11DecayedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromDecayedTypeEPNS_11DecayedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDecayedType(DecayedType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromAdjustedType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDecayedType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDecayedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 85,
   FQN="clang::RecursiveASTVisitor::VisitDecayedType", NM="_ZN5clang19RecursiveASTVisitor16VisitDecayedTypeEPNS_11DecayedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitDecayedTypeEPNS_11DecayedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDecayedType(DecayedType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypeOfExprType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 86,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypeOfExprType", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromTypeOfExprTypeEPNS_14TypeOfExprTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromTypeOfExprTypeEPNS_14TypeOfExprTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypeOfExprType(TypeOfExprType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypeOfExprType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeOfExprType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 86,
   FQN="clang::RecursiveASTVisitor::VisitTypeOfExprType", NM="_ZN5clang19RecursiveASTVisitor19VisitTypeOfExprTypeEPNS_14TypeOfExprTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitTypeOfExprTypeEPNS_14TypeOfExprTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeOfExprType(TypeOfExprType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypeOfType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 87,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypeOfType", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromTypeOfTypeEPNS_10TypeOfTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromTypeOfTypeEPNS_10TypeOfTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypeOfType(TypeOfType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypeOfType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeOfType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 87,
   FQN="clang::RecursiveASTVisitor::VisitTypeOfType", NM="_ZN5clang19RecursiveASTVisitor15VisitTypeOfTypeEPNS_10TypeOfTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitTypeOfTypeEPNS_10TypeOfTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeOfType(TypeOfType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDecltypeType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 88,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDecltypeType", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromDecltypeTypeEPNS_12DecltypeTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromDecltypeTypeEPNS_12DecltypeTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDecltypeType(DecltypeType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDecltypeType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDecltypeType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 88,
   FQN="clang::RecursiveASTVisitor::VisitDecltypeType", NM="_ZN5clang19RecursiveASTVisitor17VisitDecltypeTypeEPNS_12DecltypeTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitDecltypeTypeEPNS_12DecltypeTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDecltypeType(DecltypeType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryTransformType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 89,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryTransformType", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromUnaryTransformTypeEPNS_18UnaryTransformTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromUnaryTransformTypeEPNS_18UnaryTransformTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryTransformType(UnaryTransformType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryTransformType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryTransformType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 89,
   FQN="clang::RecursiveASTVisitor::VisitUnaryTransformType", NM="_ZN5clang19RecursiveASTVisitor23VisitUnaryTransformTypeEPNS_18UnaryTransformTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitUnaryTransformTypeEPNS_18UnaryTransformTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryTransformType(UnaryTransformType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTagType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 90,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTagType", NM="_ZN5clang19RecursiveASTVisitor17WalkUpFromTagTypeEPNS_7TagTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17WalkUpFromTagTypeEPNS_7TagTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTagType(TagType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTagType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTagType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 90,
   FQN="clang::RecursiveASTVisitor::VisitTagType", NM="_ZN5clang19RecursiveASTVisitor12VisitTagTypeEPNS_7TagTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12VisitTagTypeEPNS_7TagTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTagType(TagType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromRecordType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 91,
   FQN="clang::RecursiveASTVisitor::WalkUpFromRecordType", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromRecordTypeEPNS_10RecordTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromRecordTypeEPNS_10RecordTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromRecordType(RecordType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromTagType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitRecordType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitRecordType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 91,
   FQN="clang::RecursiveASTVisitor::VisitRecordType", NM="_ZN5clang19RecursiveASTVisitor15VisitRecordTypeEPNS_10RecordTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitRecordTypeEPNS_10RecordTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitRecordType(RecordType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromEnumType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 92,
   FQN="clang::RecursiveASTVisitor::WalkUpFromEnumType", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromEnumTypeEPNS_8EnumTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromEnumTypeEPNS_8EnumTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromEnumType(EnumType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromTagType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitEnumType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitEnumType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 92,
   FQN="clang::RecursiveASTVisitor::VisitEnumType", NM="_ZN5clang19RecursiveASTVisitor13VisitEnumTypeEPNS_8EnumTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitEnumTypeEPNS_8EnumTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitEnumType(EnumType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromElaboratedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 93,
   FQN="clang::RecursiveASTVisitor::WalkUpFromElaboratedType", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromElaboratedTypeEPNS_14ElaboratedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromElaboratedTypeEPNS_14ElaboratedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromElaboratedType(ElaboratedType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitElaboratedType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitElaboratedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 93,
   FQN="clang::RecursiveASTVisitor::VisitElaboratedType", NM="_ZN5clang19RecursiveASTVisitor19VisitElaboratedTypeEPNS_14ElaboratedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitElaboratedTypeEPNS_14ElaboratedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitElaboratedType(ElaboratedType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAttributedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 94,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAttributedType", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromAttributedTypeEPNS_14AttributedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromAttributedTypeEPNS_14AttributedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAttributedType(AttributedType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAttributedType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAttributedType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 94,
   FQN="clang::RecursiveASTVisitor::VisitAttributedType", NM="_ZN5clang19RecursiveASTVisitor19VisitAttributedTypeEPNS_14AttributedTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitAttributedTypeEPNS_14AttributedTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAttributedType(AttributedType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTemplateTypeParmType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 95,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTemplateTypeParmType", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromTemplateTypeParmTypeEPNS_20TemplateTypeParmTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromTemplateTypeParmTypeEPNS_20TemplateTypeParmTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTemplateTypeParmType(TemplateTypeParmType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTemplateTypeParmType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTemplateTypeParmType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 95,
   FQN="clang::RecursiveASTVisitor::VisitTemplateTypeParmType", NM="_ZN5clang19RecursiveASTVisitor25VisitTemplateTypeParmTypeEPNS_20TemplateTypeParmTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitTemplateTypeParmTypeEPNS_20TemplateTypeParmTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTemplateTypeParmType(TemplateTypeParmType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSubstTemplateTypeParmType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 96,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSubstTemplateTypeParmType", NM="_ZN5clang19RecursiveASTVisitor35WalkUpFromSubstTemplateTypeParmTypeEPNS_25SubstTemplateTypeParmTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35WalkUpFromSubstTemplateTypeParmTypeEPNS_25SubstTemplateTypeParmTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSubstTemplateTypeParmType(SubstTemplateTypeParmType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSubstTemplateTypeParmType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSubstTemplateTypeParmType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 96,
   FQN="clang::RecursiveASTVisitor::VisitSubstTemplateTypeParmType", NM="_ZN5clang19RecursiveASTVisitor30VisitSubstTemplateTypeParmTypeEPNS_25SubstTemplateTypeParmTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30VisitSubstTemplateTypeParmTypeEPNS_25SubstTemplateTypeParmTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSubstTemplateTypeParmType(SubstTemplateTypeParmType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSubstTemplateTypeParmPackType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 97,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSubstTemplateTypeParmPackType", NM="_ZN5clang19RecursiveASTVisitor39WalkUpFromSubstTemplateTypeParmPackTypeEPNS_29SubstTemplateTypeParmPackTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor39WalkUpFromSubstTemplateTypeParmPackTypeEPNS_29SubstTemplateTypeParmPackTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSubstTemplateTypeParmPackType(SubstTemplateTypeParmPackType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSubstTemplateTypeParmPackType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSubstTemplateTypeParmPackType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 97,
   FQN="clang::RecursiveASTVisitor::VisitSubstTemplateTypeParmPackType", NM="_ZN5clang19RecursiveASTVisitor34VisitSubstTemplateTypeParmPackTypeEPNS_29SubstTemplateTypeParmPackTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34VisitSubstTemplateTypeParmPackTypeEPNS_29SubstTemplateTypeParmPackTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSubstTemplateTypeParmPackType(SubstTemplateTypeParmPackType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTemplateSpecializationType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 98,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTemplateSpecializationType", NM="_ZN5clang19RecursiveASTVisitor36WalkUpFromTemplateSpecializationTypeEPNS_26TemplateSpecializationTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36WalkUpFromTemplateSpecializationTypeEPNS_26TemplateSpecializationTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTemplateSpecializationType(TemplateSpecializationType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTemplateSpecializationType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTemplateSpecializationType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 98,
   FQN="clang::RecursiveASTVisitor::VisitTemplateSpecializationType", NM="_ZN5clang19RecursiveASTVisitor31VisitTemplateSpecializationTypeEPNS_26TemplateSpecializationTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31VisitTemplateSpecializationTypeEPNS_26TemplateSpecializationTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTemplateSpecializationType(TemplateSpecializationType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAutoType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 99,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAutoType", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromAutoTypeEPNS_8AutoTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromAutoTypeEPNS_8AutoTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAutoType(AutoType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAutoType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAutoType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 99,
   FQN="clang::RecursiveASTVisitor::VisitAutoType", NM="_ZN5clang19RecursiveASTVisitor13VisitAutoTypeEPNS_8AutoTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitAutoTypeEPNS_8AutoTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAutoType(AutoType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromInjectedClassNameType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 100,
   FQN="clang::RecursiveASTVisitor::WalkUpFromInjectedClassNameType", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromInjectedClassNameTypeEPNS_21InjectedClassNameTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromInjectedClassNameTypeEPNS_21InjectedClassNameTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromInjectedClassNameType(InjectedClassNameType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitInjectedClassNameType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitInjectedClassNameType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 100,
   FQN="clang::RecursiveASTVisitor::VisitInjectedClassNameType", NM="_ZN5clang19RecursiveASTVisitor26VisitInjectedClassNameTypeEPNS_21InjectedClassNameTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitInjectedClassNameTypeEPNS_21InjectedClassNameTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitInjectedClassNameType(InjectedClassNameType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDependentNameType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 101,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDependentNameType", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromDependentNameTypeEPNS_17DependentNameTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromDependentNameTypeEPNS_17DependentNameTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDependentNameType(DependentNameType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDependentNameType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDependentNameType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 101,
   FQN="clang::RecursiveASTVisitor::VisitDependentNameType", NM="_ZN5clang19RecursiveASTVisitor22VisitDependentNameTypeEPNS_17DependentNameTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitDependentNameTypeEPNS_17DependentNameTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDependentNameType(DependentNameType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDependentTemplateSpecializationType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 102,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDependentTemplateSpecializationType", NM="_ZN5clang19RecursiveASTVisitor45WalkUpFromDependentTemplateSpecializationTypeEPNS_35DependentTemplateSpecializationTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor45WalkUpFromDependentTemplateSpecializationTypeEPNS_35DependentTemplateSpecializationTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDependentTemplateSpecializationType(DependentTemplateSpecializationType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDependentTemplateSpecializationType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDependentTemplateSpecializationType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 102,
   FQN="clang::RecursiveASTVisitor::VisitDependentTemplateSpecializationType", NM="_ZN5clang19RecursiveASTVisitor40VisitDependentTemplateSpecializationTypeEPNS_35DependentTemplateSpecializationTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor40VisitDependentTemplateSpecializationTypeEPNS_35DependentTemplateSpecializationTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDependentTemplateSpecializationType(DependentTemplateSpecializationType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPackExpansionType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 103,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPackExpansionType", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromPackExpansionTypeEPNS_17PackExpansionTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromPackExpansionTypeEPNS_17PackExpansionTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPackExpansionType(PackExpansionType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPackExpansionType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPackExpansionType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 103,
   FQN="clang::RecursiveASTVisitor::VisitPackExpansionType", NM="_ZN5clang19RecursiveASTVisitor22VisitPackExpansionTypeEPNS_17PackExpansionTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitPackExpansionTypeEPNS_17PackExpansionTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPackExpansionType(PackExpansionType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCObjectType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 104,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCObjectType", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromObjCObjectTypeEPNS_14ObjCObjectTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromObjCObjectTypeEPNS_14ObjCObjectTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCObjectType(ObjCObjectType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCObjectType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCObjectType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 104,
   FQN="clang::RecursiveASTVisitor::VisitObjCObjectType", NM="_ZN5clang19RecursiveASTVisitor19VisitObjCObjectTypeEPNS_14ObjCObjectTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitObjCObjectTypeEPNS_14ObjCObjectTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCObjectType(ObjCObjectType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCInterfaceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 105,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCInterfaceType", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCInterfaceTypeEPNS_17ObjCInterfaceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCInterfaceTypeEPNS_17ObjCInterfaceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCInterfaceType(ObjCInterfaceType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromObjCObjectType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCInterfaceType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCInterfaceType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 105,
   FQN="clang::RecursiveASTVisitor::VisitObjCInterfaceType", NM="_ZN5clang19RecursiveASTVisitor22VisitObjCInterfaceTypeEPNS_17ObjCInterfaceTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitObjCInterfaceTypeEPNS_17ObjCInterfaceTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCInterfaceType(ObjCInterfaceType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCObjectPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 106,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCObjectPointerType", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromObjCObjectPointerTypeEPNS_21ObjCObjectPointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromObjCObjectPointerTypeEPNS_21ObjCObjectPointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCObjectPointerType(ObjCObjectPointerType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCObjectPointerType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCObjectPointerType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 106,
   FQN="clang::RecursiveASTVisitor::VisitObjCObjectPointerType", NM="_ZN5clang19RecursiveASTVisitor26VisitObjCObjectPointerTypeEPNS_21ObjCObjectPointerTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitObjCObjectPointerTypeEPNS_21ObjCObjectPointerTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCObjectPointerType(ObjCObjectPointerType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPipeType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 107,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPipeType", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromPipeTypeEPNS_8PipeTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromPipeTypeEPNS_8PipeTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPipeType(PipeType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPipeType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPipeType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 107,
   FQN="clang::RecursiveASTVisitor::VisitPipeType", NM="_ZN5clang19RecursiveASTVisitor13VisitPipeTypeEPNS_8PipeTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitPipeTypeEPNS_8PipeTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPipeType(PipeType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAtomicType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 108,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAtomicType", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromAtomicTypeEPNS_10AtomicTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromAtomicTypeEPNS_10AtomicTypeE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAtomicType(AtomicType /*P*/ T) {
    do {
      if (!getDerived().WalkUpFromType(T)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAtomicType(T)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAtomicType">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 108,
   FQN="clang::RecursiveASTVisitor::VisitAtomicType", NM="_ZN5clang19RecursiveASTVisitor15VisitAtomicTypeEPNS_10AtomicTypeE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitAtomicTypeEPNS_10AtomicTypeE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAtomicType(AtomicType /*P*/ T) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseQualifiedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1075,
   FQN="clang::RecursiveASTVisitor::TraverseQualifiedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor24TraverseQualifiedTypeLocENS_16QualifiedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseQualifiedTypeLocENS_16QualifiedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseQualifiedTypeLoc(QualifiedTypeLoc TL) {
    // Move this over to the 'main' typeloc tree.  Note that this is a
    // move -- we pretend that we were really looking at the unqualified
    // typeloc all along -- rather than a recursion, so we don't follow
    // the normal CRTP plan of going through
    // getDerived().TraverseTypeLoc.  If we did, we'd be traversing
    // twice for the same type (once as a QualifiedTypeLoc version of
    // the type, once as an UnqualifiedTypeLoc version of the type),
    // which in effect means we'd call VisitTypeLoc twice with the
    // 'same' type.  This solves that problem, at the cost of never
    // seeing the qualified version of the type (unless the client
    // subclasses TraverseQualifiedTypeLoc themselves).  It's not a
    // perfect solution.  A perfect solution probably requires making
    // QualifiedTypeLoc a wrapper around TypeLoc -- like QualType is a
    // wrapper around Type* -- rather than being its own class in the
    // type hierarchy.
    return TraverseTypeLoc(TL.getUnqualifiedLoc());
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBuiltinTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1096,
   FQN="clang::RecursiveASTVisitor::TraverseBuiltinTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22TraverseBuiltinTypeLocENS_14BuiltinTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseBuiltinTypeLocENS_14BuiltinTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBuiltinTypeLoc(BuiltinTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromBuiltinType(((/*const_cast*/BuiltinType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromBuiltinTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  
  // FIXME: ComplexTypeLoc is unfinished
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseComplexTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1099,
   FQN="clang::RecursiveASTVisitor::TraverseComplexTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22TraverseComplexTypeLocENS_14ComplexTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseComplexTypeLocENS_14ComplexTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseComplexTypeLoc(ComplexTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromComplexType(((/*const_cast*/ComplexType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromComplexTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseType(TL.getTypePtr().getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1103,
   FQN="clang::RecursiveASTVisitor::TraversePointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22TraversePointerTypeLocENS_14PointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraversePointerTypeLocENS_14PointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePointerTypeLoc(PointerTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromPointerType(((/*const_cast*/PointerType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromPointerTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getPointeeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBlockPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1106,
   FQN="clang::RecursiveASTVisitor::TraverseBlockPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27TraverseBlockPointerTypeLocENS_19BlockPointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseBlockPointerTypeLocENS_19BlockPointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBlockPointerTypeLoc(BlockPointerTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromBlockPointerType(((/*const_cast*/BlockPointerType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromBlockPointerTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getPointeeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLValueReferenceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1109,
   FQN="clang::RecursiveASTVisitor::TraverseLValueReferenceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30TraverseLValueReferenceTypeLocENS_22LValueReferenceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseLValueReferenceTypeLocENS_22LValueReferenceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLValueReferenceTypeLoc(LValueReferenceTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromLValueReferenceType(((/*const_cast*/LValueReferenceType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromLValueReferenceTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getPointeeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseRValueReferenceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1112,
   FQN="clang::RecursiveASTVisitor::TraverseRValueReferenceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30TraverseRValueReferenceTypeLocENS_22RValueReferenceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseRValueReferenceTypeLocENS_22RValueReferenceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseRValueReferenceTypeLoc(RValueReferenceTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromRValueReferenceType(((/*const_cast*/RValueReferenceType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromRValueReferenceTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getPointeeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  
  // FIXME: location of base class?
  // We traverse this in the type case as well, but how is it not reached through
  // the pointee type?
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMemberPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1118,
   FQN="clang::RecursiveASTVisitor::TraverseMemberPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor28TraverseMemberPointerTypeLocENS_20MemberPointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseMemberPointerTypeLocENS_20MemberPointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMemberPointerTypeLoc(MemberPointerTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromMemberPointerType(((/*const_cast*/MemberPointerType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromMemberPointerTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseType(new QualType(TL.getTypePtr().__getClass(), 0))) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseTypeLoc(TL.getPointeeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConstantArrayTypeLoc">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION/*unreachable*/,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1136,
   FQN="clang::RecursiveASTVisitor::TraverseConstantArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor28TraverseConstantArrayTypeLocENS_20ConstantArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseConstantArrayTypeLocENS_20ConstantArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConstantArrayTypeLoc(ConstantArrayTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromConstantArrayType(((/*const_cast*/ConstantArrayType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromConstantArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getElementLoc())) {
            return false;
          }
        } while (false);
        return TraverseArrayTypeLocHelper(TL);
      }
//      ;
    }
    // MANUAL_COMPILATION/*unreachable*/
//    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIncompleteArrayTypeLoc">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION/*unreachable*/,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1141,
   FQN="clang::RecursiveASTVisitor::TraverseIncompleteArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30TraverseIncompleteArrayTypeLocENS_22IncompleteArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseIncompleteArrayTypeLocENS_22IncompleteArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIncompleteArrayTypeLoc(IncompleteArrayTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromIncompleteArrayType(((/*const_cast*/IncompleteArrayType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromIncompleteArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getElementLoc())) {
            return false;
          }
        } while (false);
        return TraverseArrayTypeLocHelper(TL);
      }
//      ;
    }
    // MANUAL_COMPILATION/*unreachable*/
//    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVariableArrayTypeLoc">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION/*unreachable*/,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1146,
   FQN="clang::RecursiveASTVisitor::TraverseVariableArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor28TraverseVariableArrayTypeLocENS_20VariableArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseVariableArrayTypeLocENS_20VariableArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVariableArrayTypeLoc(VariableArrayTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromVariableArrayType(((/*const_cast*/VariableArrayType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromVariableArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getElementLoc())) {
            return false;
          }
        } while (false);
        return TraverseArrayTypeLocHelper(TL);
      }
//      ;
    }
    // MANUAL_COMPILATION/*unreachable*/
//    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDependentSizedArrayTypeLoc">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION/*unreachable*/,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1151,
   FQN="clang::RecursiveASTVisitor::TraverseDependentSizedArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor34TraverseDependentSizedArrayTypeLocENS_26DependentSizedArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34TraverseDependentSizedArrayTypeLocENS_26DependentSizedArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDependentSizedArrayTypeLoc(DependentSizedArrayTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromDependentSizedArrayType(((/*const_cast*/DependentSizedArrayType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromDependentSizedArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getElementLoc())) {
            return false;
          }
        } while (false);
        return TraverseArrayTypeLocHelper(TL);
      }
//      ;
    }
    // MANUAL_COMPILATION/*unreachable*/
//    return true;
  }

  
  // FIXME: order? why not size expr first?
  // FIXME: base VectorTypeLoc is unfinished
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDependentSizedExtVectorTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1158,
   FQN="clang::RecursiveASTVisitor::TraverseDependentSizedExtVectorTypeLoc", NM="_ZN5clang19RecursiveASTVisitor38TraverseDependentSizedExtVectorTypeLocENS_30DependentSizedExtVectorTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor38TraverseDependentSizedExtVectorTypeLocENS_30DependentSizedExtVectorTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDependentSizedExtVectorTypeLoc(DependentSizedExtVectorTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromDependentSizedExtVectorType(((/*const_cast*/DependentSizedExtVectorType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromDependentSizedExtVectorTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        if ((TL.getTypePtr().getSizeExpr() != null)) {
          do {
            if (!getDerived().TraverseStmt(TL.getTypePtr().getSizeExpr())) {
              return false;
            }
          } while (false);
        }
        do {
          if (!getDerived().TraverseType(TL.getTypePtr().getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  
  // FIXME: VectorTypeLoc is unfinished
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVectorTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1165,
   FQN="clang::RecursiveASTVisitor::TraverseVectorTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21TraverseVectorTypeLocENS_13VectorTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseVectorTypeLocENS_13VectorTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVectorTypeLoc(VectorTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromVectorType(((/*const_cast*/VectorType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromVectorTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseType(TL.getTypePtr().getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  
  // FIXME: size and attributes
  // FIXME: base VectorTypeLoc is unfinished
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseExtVectorTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1171,
   FQN="clang::RecursiveASTVisitor::TraverseExtVectorTypeLoc", NM="_ZN5clang19RecursiveASTVisitor24TraverseExtVectorTypeLocENS_16ExtVectorTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseExtVectorTypeLocENS_16ExtVectorTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseExtVectorTypeLoc(ExtVectorTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromExtVectorType(((/*const_cast*/ExtVectorType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromExtVectorTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseType(TL.getTypePtr().getElementType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  
  // FIXME: location of exception specifications (attributes?)
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFunctionProtoTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1179,
   FQN="clang::RecursiveASTVisitor::TraverseFunctionProtoTypeLoc", NM="_ZN5clang19RecursiveASTVisitor28TraverseFunctionProtoTypeLocENS_20FunctionProtoTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseFunctionProtoTypeLocENS_20FunctionProtoTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFunctionProtoTypeLoc(FunctionProtoTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromFunctionProtoType(((/*const_cast*/FunctionProtoType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromFunctionProtoTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getReturnLoc())) {
            return false;
          }
        } while (false);
        /*const*/ FunctionProtoType /*P*/ T = TL.getTypePtr();
        for (/*uint*/int I = 0, E = TL.getNumParams(); I != E; ++I) {
          if ((TL.getParam(I) != null)) {
            do {
              if (!getDerived().TraverseDecl(TL.getParam(I))) {
                return false;
              }
            } while (false);
          } else if ($less_uint(I, T.getNumParams())) {
            do {
              if (!getDerived().TraverseType(T.getParamType(I))) {
                return false;
              }
            } while (false);
          }
        }
        for (final /*const*/ QualType /*&*/ E : T.exceptions()) {
          do {
            if (!getDerived().TraverseType(E)) {
              return false;
            }
          } while (false);
        }
        {
          Expr /*P*/ NE = T.getNoexceptExpr();
          if ((NE != null)) {
            do {
              if (!getDerived().TraverseStmt(NE)) {
                return false;
              }
            } while (false);
          }
        }
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFunctionNoProtoTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1175,
   FQN="clang::RecursiveASTVisitor::TraverseFunctionNoProtoTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30TraverseFunctionNoProtoTypeLocENS_22FunctionNoProtoTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseFunctionNoProtoTypeLocENS_22FunctionNoProtoTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFunctionNoProtoTypeLoc(FunctionNoProtoTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromFunctionNoProtoType(((/*const_cast*/FunctionNoProtoType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromFunctionNoProtoTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getReturnLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnresolvedUsingTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1200,
   FQN="clang::RecursiveASTVisitor::TraverseUnresolvedUsingTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30TraverseUnresolvedUsingTypeLocENS_22UnresolvedUsingTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseUnresolvedUsingTypeLocENS_22UnresolvedUsingTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnresolvedUsingTypeLoc(UnresolvedUsingTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedUsingType(((/*const_cast*/UnresolvedUsingType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromUnresolvedUsingTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseParenTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1239,
   FQN="clang::RecursiveASTVisitor::TraverseParenTypeLoc", NM="_ZN5clang19RecursiveASTVisitor20TraverseParenTypeLocENS_12ParenTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseParenTypeLocENS_12ParenTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseParenTypeLoc(ParenTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromParenType(((/*const_cast*/ParenType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromParenTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getInnerLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypedefTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1201,
   FQN="clang::RecursiveASTVisitor::TraverseTypedefTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22TraverseTypedefTypeLocENS_14TypedefTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseTypedefTypeLocENS_14TypedefTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypedefTypeLoc(TypedefTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromTypedefType(((/*const_cast*/TypedefType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromTypedefTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAdjustedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1123,
   FQN="clang::RecursiveASTVisitor::TraverseAdjustedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor23TraverseAdjustedTypeLocENS_15AdjustedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseAdjustedTypeLocENS_15AdjustedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAdjustedTypeLoc(AdjustedTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromAdjustedType(((/*const_cast*/AdjustedType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromAdjustedTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getOriginalLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDecayedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1126,
   FQN="clang::RecursiveASTVisitor::TraverseDecayedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22TraverseDecayedTypeLocENS_14DecayedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseDecayedTypeLocENS_14DecayedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDecayedTypeLoc(DecayedTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromDecayedType(((/*const_cast*/DecayedType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromDecayedTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getOriginalLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeOfExprTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1203,
   FQN="clang::RecursiveASTVisitor::TraverseTypeOfExprTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25TraverseTypeOfExprTypeLocENS_17TypeOfExprTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseTypeOfExprTypeLocENS_17TypeOfExprTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeOfExprTypeLoc(TypeOfExprTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromTypeOfExprType(((/*const_cast*/TypeOfExprType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromTypeOfExprTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseStmt(TL.getUnderlyingExpr())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeOfTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1206,
   FQN="clang::RecursiveASTVisitor::TraverseTypeOfTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21TraverseTypeOfTypeLocENS_13TypeOfTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseTypeOfTypeLocENS_13TypeOfTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeOfTypeLoc(TypeOfTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromTypeOfType(((/*const_cast*/TypeOfType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromTypeOfTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getUnderlyingTInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  
  // FIXME: location of underlying expr
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDecltypeTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1211,
   FQN="clang::RecursiveASTVisitor::TraverseDecltypeTypeLoc", NM="_ZN5clang19RecursiveASTVisitor23TraverseDecltypeTypeLocENS_15DecltypeTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseDecltypeTypeLocENS_15DecltypeTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDecltypeTypeLoc(DecltypeTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromDecltypeType(((/*const_cast*/DecltypeType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromDecltypeTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseStmt(TL.getTypePtr().getUnderlyingExpr())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnaryTransformTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1215,
   FQN="clang::RecursiveASTVisitor::TraverseUnaryTransformTypeLoc", NM="_ZN5clang19RecursiveASTVisitor29TraverseUnaryTransformTypeLocENS_21UnaryTransformTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseUnaryTransformTypeLocENS_21UnaryTransformTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnaryTransformTypeLoc(UnaryTransformTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromUnaryTransformType(((/*const_cast*/UnaryTransformType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromUnaryTransformTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getUnderlyingTInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseRecordTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1223,
   FQN="clang::RecursiveASTVisitor::TraverseRecordTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21TraverseRecordTypeLocENS_13RecordTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseRecordTypeLocENS_13RecordTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseRecordTypeLoc(RecordTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromRecordType(((/*const_cast*/RecordType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromRecordTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseEnumTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1224,
   FQN="clang::RecursiveASTVisitor::TraverseEnumTypeLoc", NM="_ZN5clang19RecursiveASTVisitor19TraverseEnumTypeLocENS_11EnumTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseEnumTypeLocENS_11EnumTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseEnumTypeLoc(EnumTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromEnumType(((/*const_cast*/EnumType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromEnumTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseElaboratedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1244,
   FQN="clang::RecursiveASTVisitor::TraverseElaboratedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25TraverseElaboratedTypeLocENS_17ElaboratedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseElaboratedTypeLocENS_17ElaboratedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseElaboratedTypeLoc(ElaboratedTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromElaboratedType(((/*const_cast*/ElaboratedType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromElaboratedTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        if (TL.getQualifierLoc().$bool()) {
          do {
            if (!getDerived().TraverseNestedNameSpecifierLoc(TL.getQualifierLoc())) {
              return false;
            }
          } while (false);
        }
        do {
          if (!getDerived().TraverseTypeLoc(TL.getNamedTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAttributedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1241,
   FQN="clang::RecursiveASTVisitor::TraverseAttributedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25TraverseAttributedTypeLocENS_17AttributedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseAttributedTypeLocENS_17AttributedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAttributedTypeLoc(AttributedTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromAttributedType(((/*const_cast*/AttributedType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromAttributedTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getModifiedLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateTypeParmTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1225,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateTypeParmTypeLoc", NM="_ZN5clang19RecursiveASTVisitor31TraverseTemplateTypeParmTypeLocENS_23TemplateTypeParmTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseTemplateTypeParmTypeLocENS_23TemplateTypeParmTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateTypeParmTypeLoc(TemplateTypeParmTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromTemplateTypeParmType(((/*const_cast*/TemplateTypeParmType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromTemplateTypeParmTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSubstTemplateTypeParmTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1226,
   FQN="clang::RecursiveASTVisitor::TraverseSubstTemplateTypeParmTypeLoc", NM="_ZN5clang19RecursiveASTVisitor36TraverseSubstTemplateTypeParmTypeLocENS_28SubstTemplateTypeParmTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36TraverseSubstTemplateTypeParmTypeLocENS_28SubstTemplateTypeParmTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSubstTemplateTypeParmTypeLoc(SubstTemplateTypeParmTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromSubstTemplateTypeParmType(((/*const_cast*/SubstTemplateTypeParmType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromSubstTemplateTypeParmTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseSubstTemplateTypeParmPackTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1227,
   FQN="clang::RecursiveASTVisitor::TraverseSubstTemplateTypeParmPackTypeLoc", NM="_ZN5clang19RecursiveASTVisitor40TraverseSubstTemplateTypeParmPackTypeLocENS_32SubstTemplateTypeParmPackTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor40TraverseSubstTemplateTypeParmPackTypeLocENS_32SubstTemplateTypeParmPackTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseSubstTemplateTypeParmPackTypeLoc(SubstTemplateTypeParmPackTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromSubstTemplateTypeParmPackType(((/*const_cast*/SubstTemplateTypeParmPackType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromSubstTemplateTypeParmPackTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  
  // FIXME: use the loc for the template name?
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateSpecializationTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1230,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateSpecializationTypeLoc", NM="_ZN5clang19RecursiveASTVisitor37TraverseTemplateSpecializationTypeLocENS_29TemplateSpecializationTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37TraverseTemplateSpecializationTypeLocENS_29TemplateSpecializationTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateSpecializationTypeLoc(TemplateSpecializationTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromTemplateSpecializationType(((/*const_cast*/TemplateSpecializationType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromTemplateSpecializationTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTemplateName(TL.getTypePtr().getTemplateName())) {
            return false;
          }
        } while (false);
        for (/*uint*/int I = 0, E = TL.getNumArgs(); I != E; ++I) {
          do {
            if (!getDerived().TraverseTemplateArgumentLoc(TL.getArgLoc(I))) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAutoTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1219,
   FQN="clang::RecursiveASTVisitor::TraverseAutoTypeLoc", NM="_ZN5clang19RecursiveASTVisitor19TraverseAutoTypeLocENS_11AutoTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseAutoTypeLocENS_11AutoTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAutoTypeLoc(AutoTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromAutoType(((/*const_cast*/AutoType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromAutoTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseType(TL.getTypePtr().getDeducedType())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseInjectedClassNameTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1237,
   FQN="clang::RecursiveASTVisitor::TraverseInjectedClassNameTypeLoc", NM="_ZN5clang19RecursiveASTVisitor32TraverseInjectedClassNameTypeLocENS_24InjectedClassNameTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseInjectedClassNameTypeLocENS_24InjectedClassNameTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseInjectedClassNameTypeLoc(InjectedClassNameTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromInjectedClassNameType(((/*const_cast*/InjectedClassNameType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromInjectedClassNameTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDependentNameTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1251,
   FQN="clang::RecursiveASTVisitor::TraverseDependentNameTypeLoc", NM="_ZN5clang19RecursiveASTVisitor28TraverseDependentNameTypeLocENS_20DependentNameTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseDependentNameTypeLocENS_20DependentNameTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDependentNameTypeLoc(DependentNameTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromDependentNameType(((/*const_cast*/DependentNameType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromDependentNameTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(TL.getQualifierLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDependentTemplateSpecializationTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1255,
   FQN="clang::RecursiveASTVisitor::TraverseDependentTemplateSpecializationTypeLoc", NM="_ZN5clang19RecursiveASTVisitor46TraverseDependentTemplateSpecializationTypeLocENS_38DependentTemplateSpecializationTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor46TraverseDependentTemplateSpecializationTypeLocENS_38DependentTemplateSpecializationTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseDependentTemplateSpecializationTypeLoc(DependentTemplateSpecializationTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromDependentTemplateSpecializationType(((/*const_cast*/DependentTemplateSpecializationType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromDependentTemplateSpecializationTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        if (TL.getQualifierLoc().$bool()) {
          do {
            if (!getDerived().TraverseNestedNameSpecifierLoc(TL.getQualifierLoc())) {
              return false;
            }
          } while (false);
        }
        for (/*uint*/int I = 0, E = TL.getNumArgs(); I != E; ++I) {
          do {
            if (!getDerived().TraverseTemplateArgumentLoc(TL.getArgLoc(I))) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePackExpansionTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1265,
   FQN="clang::RecursiveASTVisitor::TraversePackExpansionTypeLoc", NM="_ZN5clang19RecursiveASTVisitor28TraversePackExpansionTypeLocENS_20PackExpansionTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraversePackExpansionTypeLocENS_20PackExpansionTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePackExpansionTypeLoc(PackExpansionTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromPackExpansionType(((/*const_cast*/PackExpansionType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromPackExpansionTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getPatternLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCObjectTypeLoc">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1270,
   FQN="clang::RecursiveASTVisitor::TraverseObjCObjectTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25TraverseObjCObjectTypeLocENS_17ObjCObjectTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseObjCObjectTypeLocENS_17ObjCObjectTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCObjectTypeLoc(ObjCObjectTypeLoc<?> TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromObjCObjectType(((/*const_cast*/ObjCObjectType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromObjCObjectTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        if (TL.getTypePtr().getBaseType().getTypePtr() != TL.getTypePtr()) {
          do {
            if (!getDerived().TraverseTypeLoc(TL.getBaseLoc())) {
              return false;
            }
          } while (false);
        }
        for (/*uint*/int i = 0, n = TL.getNumTypeArgs(); i != n; ++i)  {
          do {
            if (!getDerived().TraverseTypeLoc(TL.getTypeArgTInfo(i).getTypeLoc())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCInterfaceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1268,
   FQN="clang::RecursiveASTVisitor::TraverseObjCInterfaceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor28TraverseObjCInterfaceTypeLocENS_20ObjCInterfaceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseObjCInterfaceTypeLocENS_20ObjCInterfaceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCInterfaceTypeLoc(ObjCInterfaceTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromObjCInterfaceType(((/*const_cast*/ObjCInterfaceType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromObjCInterfaceTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCObjectPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1279,
   FQN="clang::RecursiveASTVisitor::TraverseObjCObjectPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor32TraverseObjCObjectPointerTypeLocENS_24ObjCObjectPointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseObjCObjectPointerTypeLocENS_24ObjCObjectPointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCObjectPointerTypeLoc(ObjCObjectPointerTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromObjCObjectPointerType(((/*const_cast*/ObjCObjectPointerType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromObjCObjectPointerTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getPointeeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePipeTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1284,
   FQN="clang::RecursiveASTVisitor::TraversePipeTypeLoc", NM="_ZN5clang19RecursiveASTVisitor19TraversePipeTypeLocENS_11PipeTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraversePipeTypeLocENS_11PipeTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePipeTypeLoc(PipeTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromPipeType(((/*const_cast*/PipeType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromPipeTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getValueLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAtomicTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1282,
   FQN="clang::RecursiveASTVisitor::TraverseAtomicTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21TraverseAtomicTypeLocENS_13AtomicTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseAtomicTypeLocENS_13AtomicTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAtomicTypeLoc(AtomicTypeLoc TL) {
    if (getDerived().shouldWalkTypesOfTypeLocs()) {
      do {
        if (!getDerived().WalkUpFromAtomicType(((/*const_cast*/AtomicType /*P*/ )(TL.getTypePtr())))) {
          return false;
        }
      } while (false);
    }
    do {
      if (!getDerived().WalkUpFromAtomicTypeLoc(TL)) {
        return false;
      }
    } while (false);
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(TL.getValueLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    return true;
  }

  // The above header #undefs ABSTRACT_TYPELOC and TYPELOC upon exit.
  
  // Define WalkUpFrom*() and empty Visit*() for all TypeLoc classes.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 436,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypeLoc", NM="_ZN5clang19RecursiveASTVisitor17WalkUpFromTypeLocENS_7TypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17WalkUpFromTypeLocENS_7TypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypeLoc(TypeLoc TL) {
    return getDerived().VisitTypeLoc(TL);
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 437,
   FQN="clang::RecursiveASTVisitor::VisitTypeLoc", NM="_ZN5clang19RecursiveASTVisitor12VisitTypeLocENS_7TypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12VisitTypeLocENS_7TypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeLoc(TypeLoc TL) {
    return true;
  }

  
  // QualifiedTypeLoc and UnqualTypeLoc are not declared in
  // TypeNodes.def and thus need to be handled specially.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromQualifiedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 441,
   FQN="clang::RecursiveASTVisitor::WalkUpFromQualifiedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromQualifiedTypeLocENS_16QualifiedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromQualifiedTypeLocENS_16QualifiedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromQualifiedTypeLoc(QualifiedTypeLoc TL) {
    return getDerived().VisitUnqualTypeLoc(TL.getUnqualifiedLoc());
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitQualifiedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 444,
   FQN="clang::RecursiveASTVisitor::VisitQualifiedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21VisitQualifiedTypeLocENS_16QualifiedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitQualifiedTypeLocENS_16QualifiedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitQualifiedTypeLoc(QualifiedTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnqualTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 445,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnqualTypeLoc", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromUnqualTypeLocENS_13UnqualTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromUnqualTypeLocENS_13UnqualTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnqualTypeLoc(UnqualTypeLoc TL) {
    return getDerived().VisitUnqualTypeLoc(TL.getUnqualifiedLoc());
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnqualTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 448,
   FQN="clang::RecursiveASTVisitor::VisitUnqualTypeLoc", NM="_ZN5clang19RecursiveASTVisitor18VisitUnqualTypeLocENS_13UnqualTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitUnqualTypeLocENS_13UnqualTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnqualTypeLoc(UnqualTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBuiltinTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 62,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBuiltinTypeLoc", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromBuiltinTypeLocENS_14BuiltinTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromBuiltinTypeLocENS_14BuiltinTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBuiltinTypeLoc(BuiltinTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBuiltinTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBuiltinTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 62,
   FQN="clang::RecursiveASTVisitor::VisitBuiltinTypeLoc", NM="_ZN5clang19RecursiveASTVisitor19VisitBuiltinTypeLocENS_14BuiltinTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitBuiltinTypeLocENS_14BuiltinTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBuiltinTypeLoc(BuiltinTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromComplexTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 63,
   FQN="clang::RecursiveASTVisitor::WalkUpFromComplexTypeLoc", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromComplexTypeLocENS_14ComplexTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromComplexTypeLocENS_14ComplexTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromComplexTypeLoc(ComplexTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitComplexTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitComplexTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 63,
   FQN="clang::RecursiveASTVisitor::VisitComplexTypeLoc", NM="_ZN5clang19RecursiveASTVisitor19VisitComplexTypeLocENS_14ComplexTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitComplexTypeLocENS_14ComplexTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitComplexTypeLoc(ComplexTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 64,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromPointerTypeLocENS_14PointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromPointerTypeLocENS_14PointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPointerTypeLoc(PointerTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPointerTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 64,
   FQN="clang::RecursiveASTVisitor::VisitPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor19VisitPointerTypeLocENS_14PointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitPointerTypeLocENS_14PointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPointerTypeLoc(PointerTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBlockPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 65,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBlockPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromBlockPointerTypeLocENS_19BlockPointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromBlockPointerTypeLocENS_19BlockPointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBlockPointerTypeLoc(BlockPointerTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBlockPointerTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBlockPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 65,
   FQN="clang::RecursiveASTVisitor::VisitBlockPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor24VisitBlockPointerTypeLocENS_19BlockPointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitBlockPointerTypeLocENS_19BlockPointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBlockPointerTypeLoc(BlockPointerTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromReferenceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 66,
   FQN="clang::RecursiveASTVisitor::WalkUpFromReferenceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromReferenceTypeLocENS_16ReferenceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromReferenceTypeLocENS_16ReferenceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromReferenceTypeLoc(ReferenceTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitReferenceTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitReferenceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 66,
   FQN="clang::RecursiveASTVisitor::VisitReferenceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21VisitReferenceTypeLocENS_16ReferenceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitReferenceTypeLocENS_16ReferenceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitReferenceTypeLoc(ReferenceTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromLValueReferenceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 67,
   FQN="clang::RecursiveASTVisitor::WalkUpFromLValueReferenceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromLValueReferenceTypeLocENS_22LValueReferenceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromLValueReferenceTypeLocENS_22LValueReferenceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromLValueReferenceTypeLoc(LValueReferenceTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromReferenceTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitLValueReferenceTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLValueReferenceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 67,
   FQN="clang::RecursiveASTVisitor::VisitLValueReferenceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27VisitLValueReferenceTypeLocENS_22LValueReferenceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitLValueReferenceTypeLocENS_22LValueReferenceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLValueReferenceTypeLoc(LValueReferenceTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromRValueReferenceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 68,
   FQN="clang::RecursiveASTVisitor::WalkUpFromRValueReferenceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromRValueReferenceTypeLocENS_22RValueReferenceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromRValueReferenceTypeLocENS_22RValueReferenceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromRValueReferenceTypeLoc(RValueReferenceTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromReferenceTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitRValueReferenceTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitRValueReferenceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 68,
   FQN="clang::RecursiveASTVisitor::VisitRValueReferenceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27VisitRValueReferenceTypeLocENS_22RValueReferenceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitRValueReferenceTypeLocENS_22RValueReferenceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitRValueReferenceTypeLoc(RValueReferenceTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromMemberPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 69,
   FQN="clang::RecursiveASTVisitor::WalkUpFromMemberPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromMemberPointerTypeLocENS_20MemberPointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromMemberPointerTypeLocENS_20MemberPointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromMemberPointerTypeLoc(MemberPointerTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitMemberPointerTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMemberPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 69,
   FQN="clang::RecursiveASTVisitor::VisitMemberPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25VisitMemberPointerTypeLocENS_20MemberPointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitMemberPointerTypeLocENS_20MemberPointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMemberPointerTypeLoc(MemberPointerTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 70,
   FQN="clang::RecursiveASTVisitor::WalkUpFromArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromArrayTypeLocENS_12ArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromArrayTypeLocENS_12ArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromArrayTypeLoc(ArrayTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 70,
   FQN="clang::RecursiveASTVisitor::VisitArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor17VisitArrayTypeLocENS_12ArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitArrayTypeLocENS_12ArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitArrayTypeLoc(ArrayTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromConstantArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 71,
   FQN="clang::RecursiveASTVisitor::WalkUpFromConstantArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromConstantArrayTypeLocENS_20ConstantArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromConstantArrayTypeLocENS_20ConstantArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromConstantArrayTypeLoc(ConstantArrayTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitConstantArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConstantArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 71,
   FQN="clang::RecursiveASTVisitor::VisitConstantArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25VisitConstantArrayTypeLocENS_20ConstantArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitConstantArrayTypeLocENS_20ConstantArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConstantArrayTypeLoc(ConstantArrayTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromIncompleteArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 72,
   FQN="clang::RecursiveASTVisitor::WalkUpFromIncompleteArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromIncompleteArrayTypeLocENS_22IncompleteArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromIncompleteArrayTypeLocENS_22IncompleteArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromIncompleteArrayTypeLoc(IncompleteArrayTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitIncompleteArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIncompleteArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 72,
   FQN="clang::RecursiveASTVisitor::VisitIncompleteArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27VisitIncompleteArrayTypeLocENS_22IncompleteArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitIncompleteArrayTypeLocENS_22IncompleteArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIncompleteArrayTypeLoc(IncompleteArrayTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromVariableArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 73,
   FQN="clang::RecursiveASTVisitor::WalkUpFromVariableArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromVariableArrayTypeLocENS_20VariableArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromVariableArrayTypeLocENS_20VariableArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromVariableArrayTypeLoc(VariableArrayTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitVariableArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVariableArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 73,
   FQN="clang::RecursiveASTVisitor::VisitVariableArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25VisitVariableArrayTypeLocENS_20VariableArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitVariableArrayTypeLocENS_20VariableArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVariableArrayTypeLoc(VariableArrayTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDependentSizedArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 74,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDependentSizedArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor36WalkUpFromDependentSizedArrayTypeLocENS_26DependentSizedArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36WalkUpFromDependentSizedArrayTypeLocENS_26DependentSizedArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDependentSizedArrayTypeLoc(DependentSizedArrayTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDependentSizedArrayTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDependentSizedArrayTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 74,
   FQN="clang::RecursiveASTVisitor::VisitDependentSizedArrayTypeLoc", NM="_ZN5clang19RecursiveASTVisitor31VisitDependentSizedArrayTypeLocENS_26DependentSizedArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31VisitDependentSizedArrayTypeLocENS_26DependentSizedArrayTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDependentSizedArrayTypeLoc(DependentSizedArrayTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDependentSizedExtVectorTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 75,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDependentSizedExtVectorTypeLoc", NM="_ZN5clang19RecursiveASTVisitor40WalkUpFromDependentSizedExtVectorTypeLocENS_30DependentSizedExtVectorTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor40WalkUpFromDependentSizedExtVectorTypeLocENS_30DependentSizedExtVectorTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDependentSizedExtVectorTypeLoc(DependentSizedExtVectorTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDependentSizedExtVectorTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDependentSizedExtVectorTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 75,
   FQN="clang::RecursiveASTVisitor::VisitDependentSizedExtVectorTypeLoc", NM="_ZN5clang19RecursiveASTVisitor35VisitDependentSizedExtVectorTypeLocENS_30DependentSizedExtVectorTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35VisitDependentSizedExtVectorTypeLocENS_30DependentSizedExtVectorTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDependentSizedExtVectorTypeLoc(DependentSizedExtVectorTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromVectorTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 76,
   FQN="clang::RecursiveASTVisitor::WalkUpFromVectorTypeLoc", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromVectorTypeLocENS_13VectorTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromVectorTypeLocENS_13VectorTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromVectorTypeLoc(VectorTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitVectorTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVectorTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 76,
   FQN="clang::RecursiveASTVisitor::VisitVectorTypeLoc", NM="_ZN5clang19RecursiveASTVisitor18VisitVectorTypeLocENS_13VectorTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitVectorTypeLocENS_13VectorTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVectorTypeLoc(VectorTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromExtVectorTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 77,
   FQN="clang::RecursiveASTVisitor::WalkUpFromExtVectorTypeLoc", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromExtVectorTypeLocENS_16ExtVectorTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromExtVectorTypeLocENS_16ExtVectorTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromExtVectorTypeLoc(ExtVectorTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromVectorTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitExtVectorTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitExtVectorTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 77,
   FQN="clang::RecursiveASTVisitor::VisitExtVectorTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21VisitExtVectorTypeLocENS_16ExtVectorTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitExtVectorTypeLocENS_16ExtVectorTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitExtVectorTypeLoc(ExtVectorTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFunctionTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 78,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFunctionTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromFunctionTypeLocENS_15FunctionTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromFunctionTypeLocENS_15FunctionTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFunctionTypeLoc(FunctionTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFunctionTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFunctionTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 78,
   FQN="clang::RecursiveASTVisitor::VisitFunctionTypeLoc", NM="_ZN5clang19RecursiveASTVisitor20VisitFunctionTypeLocENS_15FunctionTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitFunctionTypeLocENS_15FunctionTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFunctionTypeLoc(FunctionTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFunctionProtoTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 79,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFunctionProtoTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromFunctionProtoTypeLocENS_20FunctionProtoTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromFunctionProtoTypeLocENS_20FunctionProtoTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFunctionProtoTypeLoc(FunctionProtoTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromFunctionTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFunctionProtoTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFunctionProtoTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 79,
   FQN="clang::RecursiveASTVisitor::VisitFunctionProtoTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25VisitFunctionProtoTypeLocENS_20FunctionProtoTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitFunctionProtoTypeLocENS_20FunctionProtoTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFunctionProtoTypeLoc(FunctionProtoTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFunctionNoProtoTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 80,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFunctionNoProtoTypeLoc", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromFunctionNoProtoTypeLocENS_22FunctionNoProtoTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromFunctionNoProtoTypeLocENS_22FunctionNoProtoTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFunctionNoProtoTypeLoc(FunctionNoProtoTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromFunctionTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFunctionNoProtoTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFunctionNoProtoTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 80,
   FQN="clang::RecursiveASTVisitor::VisitFunctionNoProtoTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27VisitFunctionNoProtoTypeLocENS_22FunctionNoProtoTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitFunctionNoProtoTypeLocENS_22FunctionNoProtoTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFunctionNoProtoTypeLoc(FunctionNoProtoTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnresolvedUsingTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 81,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnresolvedUsingTypeLoc", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromUnresolvedUsingTypeLocENS_22UnresolvedUsingTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromUnresolvedUsingTypeLocENS_22UnresolvedUsingTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnresolvedUsingTypeLoc(UnresolvedUsingTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnresolvedUsingTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnresolvedUsingTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 81,
   FQN="clang::RecursiveASTVisitor::VisitUnresolvedUsingTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27VisitUnresolvedUsingTypeLocENS_22UnresolvedUsingTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitUnresolvedUsingTypeLocENS_22UnresolvedUsingTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnresolvedUsingTypeLoc(UnresolvedUsingTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromParenTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 82,
   FQN="clang::RecursiveASTVisitor::WalkUpFromParenTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromParenTypeLocENS_12ParenTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromParenTypeLocENS_12ParenTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromParenTypeLoc(ParenTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitParenTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitParenTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 82,
   FQN="clang::RecursiveASTVisitor::VisitParenTypeLoc", NM="_ZN5clang19RecursiveASTVisitor17VisitParenTypeLocENS_12ParenTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitParenTypeLocENS_12ParenTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitParenTypeLoc(ParenTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypedefTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 83,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypedefTypeLoc", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromTypedefTypeLocENS_14TypedefTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromTypedefTypeLocENS_14TypedefTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypedefTypeLoc(TypedefTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypedefTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypedefTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 83,
   FQN="clang::RecursiveASTVisitor::VisitTypedefTypeLoc", NM="_ZN5clang19RecursiveASTVisitor19VisitTypedefTypeLocENS_14TypedefTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitTypedefTypeLocENS_14TypedefTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypedefTypeLoc(TypedefTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAdjustedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 84,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAdjustedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromAdjustedTypeLocENS_15AdjustedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromAdjustedTypeLocENS_15AdjustedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAdjustedTypeLoc(AdjustedTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAdjustedTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAdjustedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 84,
   FQN="clang::RecursiveASTVisitor::VisitAdjustedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor20VisitAdjustedTypeLocENS_15AdjustedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitAdjustedTypeLocENS_15AdjustedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAdjustedTypeLoc(AdjustedTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDecayedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 85,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDecayedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromDecayedTypeLocENS_14DecayedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromDecayedTypeLocENS_14DecayedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDecayedTypeLoc(DecayedTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromAdjustedTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDecayedTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDecayedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 85,
   FQN="clang::RecursiveASTVisitor::VisitDecayedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor19VisitDecayedTypeLocENS_14DecayedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitDecayedTypeLocENS_14DecayedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDecayedTypeLoc(DecayedTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypeOfExprTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 86,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypeOfExprTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromTypeOfExprTypeLocENS_17TypeOfExprTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromTypeOfExprTypeLocENS_17TypeOfExprTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypeOfExprTypeLoc(TypeOfExprTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypeOfExprTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeOfExprTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 86,
   FQN="clang::RecursiveASTVisitor::VisitTypeOfExprTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22VisitTypeOfExprTypeLocENS_17TypeOfExprTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitTypeOfExprTypeLocENS_17TypeOfExprTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeOfExprTypeLoc(TypeOfExprTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypeOfTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 87,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypeOfTypeLoc", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromTypeOfTypeLocENS_13TypeOfTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromTypeOfTypeLocENS_13TypeOfTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypeOfTypeLoc(TypeOfTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypeOfTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeOfTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 87,
   FQN="clang::RecursiveASTVisitor::VisitTypeOfTypeLoc", NM="_ZN5clang19RecursiveASTVisitor18VisitTypeOfTypeLocENS_13TypeOfTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitTypeOfTypeLocENS_13TypeOfTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeOfTypeLoc(TypeOfTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDecltypeTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 88,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDecltypeTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromDecltypeTypeLocENS_15DecltypeTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromDecltypeTypeLocENS_15DecltypeTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDecltypeTypeLoc(DecltypeTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDecltypeTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDecltypeTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 88,
   FQN="clang::RecursiveASTVisitor::VisitDecltypeTypeLoc", NM="_ZN5clang19RecursiveASTVisitor20VisitDecltypeTypeLocENS_15DecltypeTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitDecltypeTypeLocENS_15DecltypeTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDecltypeTypeLoc(DecltypeTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnaryTransformTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 89,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnaryTransformTypeLoc", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromUnaryTransformTypeLocENS_21UnaryTransformTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromUnaryTransformTypeLocENS_21UnaryTransformTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnaryTransformTypeLoc(UnaryTransformTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnaryTransformTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnaryTransformTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 89,
   FQN="clang::RecursiveASTVisitor::VisitUnaryTransformTypeLoc", NM="_ZN5clang19RecursiveASTVisitor26VisitUnaryTransformTypeLocENS_21UnaryTransformTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitUnaryTransformTypeLocENS_21UnaryTransformTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnaryTransformTypeLoc(UnaryTransformTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTagTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 90,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTagTypeLoc", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromTagTypeLocENS_10TagTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromTagTypeLocENS_10TagTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTagTypeLoc(TagTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTagTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTagTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 90,
   FQN="clang::RecursiveASTVisitor::VisitTagTypeLoc", NM="_ZN5clang19RecursiveASTVisitor15VisitTagTypeLocENS_10TagTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitTagTypeLocENS_10TagTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTagTypeLoc(TagTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromRecordTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 91,
   FQN="clang::RecursiveASTVisitor::WalkUpFromRecordTypeLoc", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromRecordTypeLocENS_13RecordTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromRecordTypeLocENS_13RecordTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromRecordTypeLoc(RecordTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTagTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitRecordTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitRecordTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 91,
   FQN="clang::RecursiveASTVisitor::VisitRecordTypeLoc", NM="_ZN5clang19RecursiveASTVisitor18VisitRecordTypeLocENS_13RecordTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitRecordTypeLocENS_13RecordTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitRecordTypeLoc(RecordTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromEnumTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 92,
   FQN="clang::RecursiveASTVisitor::WalkUpFromEnumTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromEnumTypeLocENS_11EnumTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromEnumTypeLocENS_11EnumTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromEnumTypeLoc(EnumTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTagTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitEnumTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitEnumTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 92,
   FQN="clang::RecursiveASTVisitor::VisitEnumTypeLoc", NM="_ZN5clang19RecursiveASTVisitor16VisitEnumTypeLocENS_11EnumTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitEnumTypeLocENS_11EnumTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitEnumTypeLoc(EnumTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromElaboratedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 93,
   FQN="clang::RecursiveASTVisitor::WalkUpFromElaboratedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromElaboratedTypeLocENS_17ElaboratedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromElaboratedTypeLocENS_17ElaboratedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromElaboratedTypeLoc(ElaboratedTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitElaboratedTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitElaboratedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 93,
   FQN="clang::RecursiveASTVisitor::VisitElaboratedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22VisitElaboratedTypeLocENS_17ElaboratedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitElaboratedTypeLocENS_17ElaboratedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitElaboratedTypeLoc(ElaboratedTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAttributedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 94,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAttributedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromAttributedTypeLocENS_17AttributedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromAttributedTypeLocENS_17AttributedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAttributedTypeLoc(AttributedTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAttributedTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAttributedTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 94,
   FQN="clang::RecursiveASTVisitor::VisitAttributedTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22VisitAttributedTypeLocENS_17AttributedTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitAttributedTypeLocENS_17AttributedTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAttributedTypeLoc(AttributedTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTemplateTypeParmTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 95,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTemplateTypeParmTypeLoc", NM="_ZN5clang19RecursiveASTVisitor33WalkUpFromTemplateTypeParmTypeLocENS_23TemplateTypeParmTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33WalkUpFromTemplateTypeParmTypeLocENS_23TemplateTypeParmTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTemplateTypeParmTypeLoc(TemplateTypeParmTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTemplateTypeParmTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTemplateTypeParmTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 95,
   FQN="clang::RecursiveASTVisitor::VisitTemplateTypeParmTypeLoc", NM="_ZN5clang19RecursiveASTVisitor28VisitTemplateTypeParmTypeLocENS_23TemplateTypeParmTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitTemplateTypeParmTypeLocENS_23TemplateTypeParmTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTemplateTypeParmTypeLoc(TemplateTypeParmTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSubstTemplateTypeParmTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 96,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSubstTemplateTypeParmTypeLoc", NM="_ZN5clang19RecursiveASTVisitor38WalkUpFromSubstTemplateTypeParmTypeLocENS_28SubstTemplateTypeParmTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor38WalkUpFromSubstTemplateTypeParmTypeLocENS_28SubstTemplateTypeParmTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSubstTemplateTypeParmTypeLoc(SubstTemplateTypeParmTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSubstTemplateTypeParmTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSubstTemplateTypeParmTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 96,
   FQN="clang::RecursiveASTVisitor::VisitSubstTemplateTypeParmTypeLoc", NM="_ZN5clang19RecursiveASTVisitor33VisitSubstTemplateTypeParmTypeLocENS_28SubstTemplateTypeParmTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33VisitSubstTemplateTypeParmTypeLocENS_28SubstTemplateTypeParmTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSubstTemplateTypeParmTypeLoc(SubstTemplateTypeParmTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromSubstTemplateTypeParmPackTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 97,
   FQN="clang::RecursiveASTVisitor::WalkUpFromSubstTemplateTypeParmPackTypeLoc", NM="_ZN5clang19RecursiveASTVisitor42WalkUpFromSubstTemplateTypeParmPackTypeLocENS_32SubstTemplateTypeParmPackTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor42WalkUpFromSubstTemplateTypeParmPackTypeLocENS_32SubstTemplateTypeParmPackTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromSubstTemplateTypeParmPackTypeLoc(SubstTemplateTypeParmPackTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitSubstTemplateTypeParmPackTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitSubstTemplateTypeParmPackTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 97,
   FQN="clang::RecursiveASTVisitor::VisitSubstTemplateTypeParmPackTypeLoc", NM="_ZN5clang19RecursiveASTVisitor37VisitSubstTemplateTypeParmPackTypeLocENS_32SubstTemplateTypeParmPackTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37VisitSubstTemplateTypeParmPackTypeLocENS_32SubstTemplateTypeParmPackTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitSubstTemplateTypeParmPackTypeLoc(SubstTemplateTypeParmPackTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTemplateSpecializationTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 98,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTemplateSpecializationTypeLoc", NM="_ZN5clang19RecursiveASTVisitor39WalkUpFromTemplateSpecializationTypeLocENS_29TemplateSpecializationTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor39WalkUpFromTemplateSpecializationTypeLocENS_29TemplateSpecializationTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTemplateSpecializationTypeLoc(TemplateSpecializationTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTemplateSpecializationTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTemplateSpecializationTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 98,
   FQN="clang::RecursiveASTVisitor::VisitTemplateSpecializationTypeLoc", NM="_ZN5clang19RecursiveASTVisitor34VisitTemplateSpecializationTypeLocENS_29TemplateSpecializationTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34VisitTemplateSpecializationTypeLocENS_29TemplateSpecializationTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTemplateSpecializationTypeLoc(TemplateSpecializationTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAutoTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 99,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAutoTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromAutoTypeLocENS_11AutoTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromAutoTypeLocENS_11AutoTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAutoTypeLoc(AutoTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAutoTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAutoTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 99,
   FQN="clang::RecursiveASTVisitor::VisitAutoTypeLoc", NM="_ZN5clang19RecursiveASTVisitor16VisitAutoTypeLocENS_11AutoTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitAutoTypeLocENS_11AutoTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAutoTypeLoc(AutoTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromInjectedClassNameTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 100,
   FQN="clang::RecursiveASTVisitor::WalkUpFromInjectedClassNameTypeLoc", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromInjectedClassNameTypeLocENS_24InjectedClassNameTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromInjectedClassNameTypeLocENS_24InjectedClassNameTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromInjectedClassNameTypeLoc(InjectedClassNameTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitInjectedClassNameTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitInjectedClassNameTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 100,
   FQN="clang::RecursiveASTVisitor::VisitInjectedClassNameTypeLoc", NM="_ZN5clang19RecursiveASTVisitor29VisitInjectedClassNameTypeLocENS_24InjectedClassNameTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitInjectedClassNameTypeLocENS_24InjectedClassNameTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitInjectedClassNameTypeLoc(InjectedClassNameTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDependentNameTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 101,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDependentNameTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromDependentNameTypeLocENS_20DependentNameTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromDependentNameTypeLocENS_20DependentNameTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDependentNameTypeLoc(DependentNameTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDependentNameTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDependentNameTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 101,
   FQN="clang::RecursiveASTVisitor::VisitDependentNameTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25VisitDependentNameTypeLocENS_20DependentNameTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitDependentNameTypeLocENS_20DependentNameTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDependentNameTypeLoc(DependentNameTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDependentTemplateSpecializationTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 102,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDependentTemplateSpecializationTypeLoc", NM="_ZN5clang19RecursiveASTVisitor48WalkUpFromDependentTemplateSpecializationTypeLocENS_38DependentTemplateSpecializationTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor48WalkUpFromDependentTemplateSpecializationTypeLocENS_38DependentTemplateSpecializationTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDependentTemplateSpecializationTypeLoc(DependentTemplateSpecializationTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDependentTemplateSpecializationTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDependentTemplateSpecializationTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 102,
   FQN="clang::RecursiveASTVisitor::VisitDependentTemplateSpecializationTypeLoc", NM="_ZN5clang19RecursiveASTVisitor43VisitDependentTemplateSpecializationTypeLocENS_38DependentTemplateSpecializationTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor43VisitDependentTemplateSpecializationTypeLocENS_38DependentTemplateSpecializationTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDependentTemplateSpecializationTypeLoc(DependentTemplateSpecializationTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPackExpansionTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 103,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPackExpansionTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromPackExpansionTypeLocENS_20PackExpansionTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromPackExpansionTypeLocENS_20PackExpansionTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPackExpansionTypeLoc(PackExpansionTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPackExpansionTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPackExpansionTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 103,
   FQN="clang::RecursiveASTVisitor::VisitPackExpansionTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25VisitPackExpansionTypeLocENS_20PackExpansionTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitPackExpansionTypeLocENS_20PackExpansionTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPackExpansionTypeLoc(PackExpansionTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCObjectTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 104,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCObjectTypeLoc", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCObjectTypeLocENS_17ObjCObjectTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCObjectTypeLocENS_17ObjCObjectTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCObjectTypeLoc(ObjCObjectTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCObjectTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCObjectTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 104,
   FQN="clang::RecursiveASTVisitor::VisitObjCObjectTypeLoc", NM="_ZN5clang19RecursiveASTVisitor22VisitObjCObjectTypeLocENS_17ObjCObjectTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitObjCObjectTypeLocENS_17ObjCObjectTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCObjectTypeLoc(ObjCObjectTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCInterfaceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 105,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCInterfaceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromObjCInterfaceTypeLocENS_20ObjCInterfaceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromObjCInterfaceTypeLocENS_20ObjCInterfaceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCInterfaceTypeLoc(ObjCInterfaceTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromObjCObjectTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCInterfaceTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCInterfaceTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 105,
   FQN="clang::RecursiveASTVisitor::VisitObjCInterfaceTypeLoc", NM="_ZN5clang19RecursiveASTVisitor25VisitObjCInterfaceTypeLocENS_20ObjCInterfaceTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitObjCInterfaceTypeLocENS_20ObjCInterfaceTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCInterfaceTypeLoc(ObjCInterfaceTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCObjectPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 106,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCObjectPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromObjCObjectPointerTypeLocENS_24ObjCObjectPointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromObjCObjectPointerTypeLocENS_24ObjCObjectPointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCObjectPointerTypeLoc(ObjCObjectPointerTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCObjectPointerTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCObjectPointerTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 106,
   FQN="clang::RecursiveASTVisitor::VisitObjCObjectPointerTypeLoc", NM="_ZN5clang19RecursiveASTVisitor29VisitObjCObjectPointerTypeLocENS_24ObjCObjectPointerTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitObjCObjectPointerTypeLocENS_24ObjCObjectPointerTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCObjectPointerTypeLoc(ObjCObjectPointerTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPipeTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 107,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPipeTypeLoc", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromPipeTypeLocENS_11PipeTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromPipeTypeLocENS_11PipeTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPipeTypeLoc(PipeTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPipeTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPipeTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 107,
   FQN="clang::RecursiveASTVisitor::VisitPipeTypeLoc", NM="_ZN5clang19RecursiveASTVisitor16VisitPipeTypeLocENS_11PipeTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitPipeTypeLocENS_11PipeTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPipeTypeLoc(PipeTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAtomicTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 108,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAtomicTypeLoc", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromAtomicTypeLocENS_13AtomicTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromAtomicTypeLocENS_13AtomicTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAtomicTypeLoc(AtomicTypeLoc TL) {
    do {
      if (!getDerived().WalkUpFromTypeLoc(TL)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAtomicTypeLoc(TL)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAtomicTypeLoc">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/TypeNodes.def", line = 108,
   FQN="clang::RecursiveASTVisitor::VisitAtomicTypeLoc", NM="_ZN5clang19RecursiveASTVisitor18VisitAtomicTypeLocENS_13AtomicTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitAtomicTypeLocENS_13AtomicTypeLocE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAtomicTypeLoc(AtomicTypeLoc TL) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseAccessSpecDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1326,
   FQN="clang::RecursiveASTVisitor::TraverseAccessSpecDecl", NM="_ZN5clang19RecursiveASTVisitor22TraverseAccessSpecDeclEPNS_14AccessSpecDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseAccessSpecDeclEPNS_14AccessSpecDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseAccessSpecDecl(AccessSpecDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAccessSpecDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromAccessSpecDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBlockDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1328,
   FQN="clang::RecursiveASTVisitor::TraverseBlockDecl", NM="_ZN5clang19RecursiveASTVisitor17TraverseBlockDeclEPNS_9BlockDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseBlockDeclEPNS_9BlockDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBlockDecl(BlockDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBlockDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        {
          TypeSourceInfo /*P*/ TInfo = D.getSignatureAsWritten();
          if ((TInfo != null)) {
            do {
              if (!getDerived().TraverseTypeLoc(TInfo.getTypeLoc())) {
                return false;
              }
            } while (false);
          }
        }
        do {
          if (!getDerived().TraverseStmt(D.getBody())) {
            return false;
          }
        } while (false);
        for (final /*const*/ BlockDecl.Capture /*&*/ I : D.captures()) {
          if (I.hasCopyExpr()) {
            do {
              if (!getDerived().TraverseStmt(I.getCopyExpr())) {
                return false;
              }
            } while (false);
          }
        }
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBlockDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCapturedDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1340,
   FQN="clang::RecursiveASTVisitor::TraverseCapturedDecl", NM="_ZN5clang19RecursiveASTVisitor20TraverseCapturedDeclEPNS_12CapturedDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseCapturedDeclEPNS_12CapturedDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCapturedDecl(CapturedDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCapturedDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseStmt(D.getBody())) {
            return false;
          }
        } while (false);
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCapturedDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseClassScopeFunctionSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1374,
   FQN="clang::RecursiveASTVisitor::TraverseClassScopeFunctionSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor44TraverseClassScopeFunctionSpecializationDeclEPNS_36ClassScopeFunctionSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor44TraverseClassScopeFunctionSpecializationDeclEPNS_36ClassScopeFunctionSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseClassScopeFunctionSpecializationDecl(ClassScopeFunctionSpecializationDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromClassScopeFunctionSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDecl(D.getSpecialization())) {
            return false;
          }
        } while (false);
        if (D.hasExplicitTemplateArgs()) {
          final /*const*/ TemplateArgumentListInfo /*&*/ args = D.templateArgs();
          do {
            if (!getDerived().TraverseTemplateArgumentLocsHelper(args.getArgumentArray(), args.size())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromClassScopeFunctionSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseEmptyDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1345,
   FQN="clang::RecursiveASTVisitor::TraverseEmptyDecl", NM="_ZN5clang19RecursiveASTVisitor17TraverseEmptyDeclEPNS_9EmptyDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseEmptyDeclEPNS_9EmptyDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseEmptyDecl(EmptyDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromEmptyDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromEmptyDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseExternCContextDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1405,
   FQN="clang::RecursiveASTVisitor::TraverseExternCContextDecl", NM="_ZN5clang19RecursiveASTVisitor26TraverseExternCContextDeclEPNS_18ExternCContextDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseExternCContextDeclEPNS_18ExternCContextDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseExternCContextDecl(ExternCContextDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExternCContextDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromExternCContextDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFileScopeAsmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1347,
   FQN="clang::RecursiveASTVisitor::TraverseFileScopeAsmDecl", NM="_ZN5clang19RecursiveASTVisitor24TraverseFileScopeAsmDeclEPNS_16FileScopeAsmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseFileScopeAsmDeclEPNS_16FileScopeAsmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFileScopeAsmDecl(FileScopeAsmDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFileScopeAsmDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseStmt(D.getAsmString())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFileScopeAsmDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFriendDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1352,
   FQN="clang::RecursiveASTVisitor::TraverseFriendDecl", NM="_ZN5clang19RecursiveASTVisitor18TraverseFriendDeclEPNS_10FriendDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseFriendDeclEPNS_10FriendDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFriendDecl(FriendDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFriendDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if ((D.getFriendType() != null)) {
          do {
            if (!getDerived().TraverseTypeLoc(D.getFriendType().getTypeLoc())) {
              return false;
            }
          } while (false);
        } else {
          do {
            if (!getDerived().TraverseDecl(D.getFriendDecl())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFriendDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFriendTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1360,
   FQN="clang::RecursiveASTVisitor::TraverseFriendTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor26TraverseFriendTemplateDeclEPNS_18FriendTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseFriendTemplateDeclEPNS_18FriendTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFriendTemplateDecl(FriendTemplateDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFriendTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if ((D.getFriendType() != null)) {
          do {
            if (!getDerived().TraverseTypeLoc(D.getFriendType().getTypeLoc())) {
              return false;
            }
          } while (false);
        } else {
          do {
            if (!getDerived().TraverseDecl(D.getFriendDecl())) {
              return false;
            }
          } while (false);
        }
        for (/*uint*/int I = 0, E = D.getNumTemplateParameters(); $less_uint(I, E); ++I) {
          TemplateParameterList /*P*/ TPL = D.getTemplateParameterList(I);
          for (type$ptr<NamedDecl /*P*/ /*P*/ > ITPL = $tryClone(TPL.begin()), /*P*/ /*P*/ ETPL = $tryClone(TPL.end()); $noteq_ptr(ITPL, ETPL); ITPL.$preInc()) {
            do {
              if (!getDerived().TraverseDecl(ITPL.$star())) {
                return false;
              }
            } while (false);
          }
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFriendTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseImportDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1350,
   FQN="clang::RecursiveASTVisitor::TraverseImportDecl", NM="_ZN5clang19RecursiveASTVisitor18TraverseImportDeclEPNS_10ImportDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseImportDeclEPNS_10ImportDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseImportDecl(ImportDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImportDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImportDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLinkageSpecDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1384,
   FQN="clang::RecursiveASTVisitor::TraverseLinkageSpecDecl", NM="_ZN5clang19RecursiveASTVisitor23TraverseLinkageSpecDeclEPNS_15LinkageSpecDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseLinkageSpecDeclEPNS_15LinkageSpecDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLinkageSpecDecl(LinkageSpecDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLinkageSpecDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLinkageSpecDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseLabelDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1415,
   FQN="clang::RecursiveASTVisitor::TraverseLabelDecl", NM="_ZN5clang19RecursiveASTVisitor17TraverseLabelDeclEPNS_9LabelDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseLabelDeclEPNS_9LabelDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseLabelDecl(LabelDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLabelDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromLabelDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNamespaceDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1418,
   FQN="clang::RecursiveASTVisitor::TraverseNamespaceDecl", NM="_ZN5clang19RecursiveASTVisitor21TraverseNamespaceDeclEPNS_13NamespaceDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseNamespaceDeclEPNS_13NamespaceDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNamespaceDecl(NamespaceDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNamespaceDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNamespaceDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNamespaceAliasDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1407,
   FQN="clang::RecursiveASTVisitor::TraverseNamespaceAliasDecl", NM="_ZN5clang19RecursiveASTVisitor26TraverseNamespaceAliasDeclEPNS_18NamespaceAliasDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseNamespaceAliasDeclEPNS_18NamespaceAliasDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNamespaceAliasDecl(NamespaceAliasDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNamespaceAliasDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(D.getQualifierLoc())) {
            return false;
          }
        } while (false);
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNamespaceAliasDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCCompatibleAliasDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1425,
   FQN="clang::RecursiveASTVisitor::TraverseObjCCompatibleAliasDecl", NM="_ZN5clang19RecursiveASTVisitor31TraverseObjCCompatibleAliasDeclEPNS_23ObjCCompatibleAliasDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseObjCCompatibleAliasDeclEPNS_23ObjCCompatibleAliasDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCCompatibleAliasDecl(ObjCCompatibleAliasDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCCompatibleAliasDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCCompatibleAliasDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCCategoryDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1428,
   FQN="clang::RecursiveASTVisitor::TraverseObjCCategoryDecl", NM="_ZN5clang19RecursiveASTVisitor24TraverseObjCCategoryDeclEPNS_16ObjCCategoryDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseObjCCategoryDeclEPNS_16ObjCCategoryDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCCategoryDecl(ObjCCategoryDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCCategoryDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        {
          ObjCTypeParamList /*P*/ typeParamList = D.getTypeParamList();
          if ((typeParamList != null)) {
            for (ObjCTypeParamDecl /*P*/ typeParam : $Deref(typeParamList)) {
              do {
                if (!getDerived().TraverseObjCTypeParamDecl(typeParam)) {
                  return false;
                }
              } while (false);
            }
          }
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCCategoryDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCCategoryImplDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1436,
   FQN="clang::RecursiveASTVisitor::TraverseObjCCategoryImplDecl", NM="_ZN5clang19RecursiveASTVisitor28TraverseObjCCategoryImplDeclEPNS_20ObjCCategoryImplDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseObjCCategoryImplDeclEPNS_20ObjCCategoryImplDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCCategoryImplDecl(ObjCCategoryImplDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCCategoryImplDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCCategoryImplDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCImplementationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1439,
   FQN="clang::RecursiveASTVisitor::TraverseObjCImplementationDecl", NM="_ZN5clang19RecursiveASTVisitor30TraverseObjCImplementationDeclEPNS_22ObjCImplementationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseObjCImplementationDeclEPNS_22ObjCImplementationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCImplementationDecl(ObjCImplementationDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCImplementationDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCImplementationDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCInterfaceDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1442,
   FQN="clang::RecursiveASTVisitor::TraverseObjCInterfaceDecl", NM="_ZN5clang19RecursiveASTVisitor25TraverseObjCInterfaceDeclEPNS_17ObjCInterfaceDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseObjCInterfaceDeclEPNS_17ObjCInterfaceDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCInterfaceDecl(ObjCInterfaceDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCInterfaceDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        {
          ObjCTypeParamList /*P*/ typeParamList = D.getTypeParamListAsWritten();
          if ((typeParamList != null)) {
            for (ObjCTypeParamDecl /*P*/ typeParam : $Deref(typeParamList)) {
              do {
                if (!getDerived().TraverseObjCTypeParamDecl(typeParam)) {
                  return false;
                }
              } while (false);
            }
          }
        }
        {
          TypeSourceInfo /*P*/ superTInfo = D.getSuperClassTInfo();
          if ((superTInfo != null)) {
            do {
              if (!getDerived().TraverseTypeLoc(superTInfo.getTypeLoc())) {
                return false;
              }
            } while (false);
          }
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCInterfaceDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCProtocolDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1454,
   FQN="clang::RecursiveASTVisitor::TraverseObjCProtocolDecl", NM="_ZN5clang19RecursiveASTVisitor24TraverseObjCProtocolDeclEPNS_16ObjCProtocolDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseObjCProtocolDeclEPNS_16ObjCProtocolDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCProtocolDecl(ObjCProtocolDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCProtocolDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCProtocolDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCMethodDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1457,
   FQN="clang::RecursiveASTVisitor::TraverseObjCMethodDecl", NM="_ZN5clang19RecursiveASTVisitor22TraverseObjCMethodDeclEPNS_14ObjCMethodDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseObjCMethodDeclEPNS_14ObjCMethodDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCMethodDecl(ObjCMethodDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCMethodDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if ((D.getReturnTypeSourceInfo() != null)) {
          do {
            if (!getDerived().TraverseTypeLoc(D.getReturnTypeSourceInfo().getTypeLoc())) {
              return false;
            }
          } while (false);
        }
        for (ParmVarDecl /*P*/ Parameter : D.parameters()) {
          do {
            if (!getDerived().TraverseDecl(Parameter)) {
              return false;
            }
          } while (false);
        }
        if (D.isThisDeclarationADefinition()) {
          do {
            if (!getDerived().TraverseStmt(D.getBody())) {
              return false;
            }
          } while (false);
        }
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCMethodDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCPropertyDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1479,
   FQN="clang::RecursiveASTVisitor::TraverseObjCPropertyDecl", NM="_ZN5clang19RecursiveASTVisitor24TraverseObjCPropertyDeclEPNS_16ObjCPropertyDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseObjCPropertyDeclEPNS_16ObjCPropertyDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCPropertyDecl(ObjCPropertyDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCPropertyDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if ((D.getTypeSourceInfo() != null)) {
          do {
            if (!getDerived().TraverseTypeLoc(D.getTypeSourceInfo().getTypeLoc())) {
              return false;
            }
          } while (false);
        } else {
          do {
            if (!getDerived().TraverseType(D.getType())) {
              return false;
            }
          } while (false);
        }
        ShouldVisitChildren = false;
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCPropertyDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseBuiltinTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1649,
   FQN="clang::RecursiveASTVisitor::TraverseBuiltinTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor27TraverseBuiltinTemplateDeclEPNS_19BuiltinTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseBuiltinTemplateDeclEPNS_19BuiltinTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseBuiltinTemplateDecl(BuiltinTemplateDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBuiltinTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTemplateParameterListHelper(D.getTemplateParameters())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromBuiltinTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseClassTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1635,
   FQN="clang::RecursiveASTVisitor::TraverseClassTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor25TraverseClassTemplateDeclEPNS_17ClassTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseClassTemplateDeclEPNS_17ClassTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseClassTemplateDecl(ClassTemplateDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromClassTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDecl(D.getTemplatedDecl())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseTemplateParameterListHelper(D.getTemplateParameters())) {
            return false;
          }
        } while (false);
        if (getDerived().shouldVisitTemplateInstantiations() && D == D.getCanonicalDecl()) {
          do {
            if (!getDerived().TraverseTemplateInstantiations(D)) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromClassTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFunctionTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1637,
   FQN="clang::RecursiveASTVisitor::TraverseFunctionTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor28TraverseFunctionTemplateDeclEPNS_20FunctionTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseFunctionTemplateDeclEPNS_20FunctionTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFunctionTemplateDecl(FunctionTemplateDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDecl(D.getTemplatedDecl())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseTemplateParameterListHelper(D.getTemplateParameters())) {
            return false;
          }
        } while (false);
        if (getDerived().shouldVisitTemplateInstantiations() && D == D.getCanonicalDecl()) {
          do {
            if (!getDerived().TraverseTemplateInstantiations(D)) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeAliasTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1675,
   FQN="clang::RecursiveASTVisitor::TraverseTypeAliasTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor29TraverseTypeAliasTemplateDeclEPNS_21TypeAliasTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29TraverseTypeAliasTemplateDeclEPNS_21TypeAliasTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeAliasTemplateDecl(TypeAliasTemplateDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeAliasTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDecl(D.getTemplatedDecl())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseTemplateParameterListHelper(D.getTemplateParameters())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeAliasTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVarTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1636,
   FQN="clang::RecursiveASTVisitor::TraverseVarTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor23TraverseVarTemplateDeclEPNS_15VarTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseVarTemplateDeclEPNS_15VarTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVarTemplateDecl(VarTemplateDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVarTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDecl(D.getTemplatedDecl())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseTemplateParameterListHelper(D.getTemplateParameters())) {
            return false;
          }
        } while (false);
        if (getDerived().shouldVisitTemplateInstantiations() && D == D.getCanonicalDecl()) {
          do {
            if (!getDerived().TraverseTemplateInstantiations(D)) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVarTemplateDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateTemplateParmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1639,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateTemplateParmDecl", NM="_ZN5clang19RecursiveASTVisitor32TraverseTemplateTemplateParmDeclEPNS_24TemplateTemplateParmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseTemplateTemplateParmDeclEPNS_24TemplateTemplateParmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateTemplateParmDecl(TemplateTemplateParmDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTemplateTemplateParmDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDecl(D.getTemplatedDecl())) {
            return false;
          }
        } while (false);
        if (D.hasDefaultArgument() && !D.defaultArgumentWasInherited()) {
          do {
            if (!getDerived().TraverseTemplateArgumentLoc(D.getDefaultArgument())) {
              return false;
            }
          } while (false);
        }
        do {
          if (!getDerived().TraverseTemplateParameterListHelper(D.getTemplateParameters())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTemplateTemplateParmDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseEnumDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1689,
   FQN="clang::RecursiveASTVisitor::TraverseEnumDecl", NM="_ZN5clang19RecursiveASTVisitor16TraverseEnumDeclEPNS_8EnumDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16TraverseEnumDeclEPNS_8EnumDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseEnumDecl(EnumDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromEnumDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if ((D.getTypeForDecl() != null)) {
          do {
            if (!getDerived().TraverseType(new QualType(D.getTypeForDecl(), 0))) {
              return false;
            }
          } while (false);
        }
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(D.getQualifierLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromEnumDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseRecordDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1722,
   FQN="clang::RecursiveASTVisitor::TraverseRecordDecl", NM="_ZN5clang19RecursiveASTVisitor18TraverseRecordDeclEPNS_10RecordDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18TraverseRecordDeclEPNS_10RecordDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseRecordDecl(RecordDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromRecordDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseRecordHelper(D)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromRecordDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXRecordDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1724,
   FQN="clang::RecursiveASTVisitor::TraverseCXXRecordDecl", NM="_ZN5clang19RecursiveASTVisitor21TraverseCXXRecordDeclEPNS_13CXXRecordDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseCXXRecordDeclEPNS_13CXXRecordDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXRecordDecl(CXXRecordDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXRecordDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseCXXRecordHelper(D)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXRecordDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseClassTemplateSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1748,
   FQN="clang::RecursiveASTVisitor::TraverseClassTemplateSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor39TraverseClassTemplateSpecializationDeclEPNS_31ClassTemplateSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor39TraverseClassTemplateSpecializationDeclEPNS_31ClassTemplateSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseClassTemplateSpecializationDecl(ClassTemplateSpecializationDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromClassTemplateSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        {
          TypeSourceInfo /*P*/ TSI = D.getTypeAsWritten();
          if ((TSI != null)) {
            do {
              if (!getDerived().TraverseTypeLoc(TSI.getTypeLoc())) {
                return false;
              }
            } while (false);
          }
        }
        if (!getDerived().shouldVisitTemplateInstantiations() && D.getTemplateSpecializationKind() != TemplateSpecializationKind.TSK_ExplicitSpecialization) {
          return true;
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromClassTemplateSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseClassTemplatePartialSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1782,
   FQN="clang::RecursiveASTVisitor::TraverseClassTemplatePartialSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor46TraverseClassTemplatePartialSpecializationDeclEPNS_38ClassTemplatePartialSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor46TraverseClassTemplatePartialSpecializationDeclEPNS_38ClassTemplatePartialSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseClassTemplatePartialSpecializationDecl(ClassTemplatePartialSpecializationDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromClassTemplatePartialSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        {
          TemplateParameterList /*P*/ TPL = D.getTemplateParameters();
          if ((TPL != null)) {
            for (type$ptr<NamedDecl /*P*/ /*P*/ > I = $tryClone(TPL.begin()), /*P*/ /*P*/ E = $tryClone(TPL.end()); $noteq_ptr(I, E); I.$preInc()) {
              do {
                if (!getDerived().TraverseDecl(I.$star())) {
                  return false;
                }
              } while (false);
            }
          }
        }
        do {
          if (!getDerived().TraverseTemplateArgumentLocsHelper(D.getTemplateArgsAsWritten().getTemplateArgs(), D.getTemplateArgsAsWritten().NumTemplateArgs)) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseCXXRecordHelper(D)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromClassTemplatePartialSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateTypeParmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1653,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateTypeParmDecl", NM="_ZN5clang19RecursiveASTVisitor28TraverseTemplateTypeParmDeclEPNS_20TemplateTypeParmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseTemplateTypeParmDeclEPNS_20TemplateTypeParmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTemplateTypeParmDecl(TemplateTypeParmDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTemplateTypeParmDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if ((D.getTypeForDecl() != null)) {
          do {
            if (!getDerived().TraverseType(new QualType(D.getTypeForDecl(), 0))) {
              return false;
            }
          } while (false);
        }
        if (D.hasDefaultArgument() && !D.defaultArgumentWasInherited()) {
          do {
            if (!getDerived().TraverseTypeLoc(D.getDefaultArgumentInfo().getTypeLoc())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTemplateTypeParmDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCTypeParamDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1470,
   FQN="clang::RecursiveASTVisitor::TraverseObjCTypeParamDecl", NM="_ZN5clang19RecursiveASTVisitor25TraverseObjCTypeParamDeclEPNS_17ObjCTypeParamDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseObjCTypeParamDeclEPNS_17ObjCTypeParamDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCTypeParamDecl(ObjCTypeParamDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCTypeParamDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        if (D.hasExplicitBound()) {
          do {
            if (!getDerived().TraverseTypeLoc(D.getTypeSourceInfo().getTypeLoc())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCTypeParamDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypeAliasDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1668,
   FQN="clang::RecursiveASTVisitor::TraverseTypeAliasDecl", NM="_ZN5clang19RecursiveASTVisitor21TraverseTypeAliasDeclEPNS_13TypeAliasDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseTypeAliasDeclEPNS_13TypeAliasDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypeAliasDecl(TypeAliasDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeAliasDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(D.getTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypeAliasDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTypedefDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1661,
   FQN="clang::RecursiveASTVisitor::TraverseTypedefDecl", NM="_ZN5clang19RecursiveASTVisitor19TraverseTypedefDeclEPNS_11TypedefDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseTypedefDeclEPNS_11TypedefDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTypedefDecl(TypedefDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypedefDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseTypeLoc(D.getTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTypedefDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnresolvedUsingTypenameDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1680,
   FQN="clang::RecursiveASTVisitor::TraverseUnresolvedUsingTypenameDecl", NM="_ZN5clang19RecursiveASTVisitor35TraverseUnresolvedUsingTypenameDeclEPNS_27UnresolvedUsingTypenameDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35TraverseUnresolvedUsingTypenameDeclEPNS_27UnresolvedUsingTypenameDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnresolvedUsingTypenameDecl(UnresolvedUsingTypenameDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedUsingTypenameDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(D.getQualifierLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedUsingTypenameDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUsingDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1487,
   FQN="clang::RecursiveASTVisitor::TraverseUsingDecl", NM="_ZN5clang19RecursiveASTVisitor17TraverseUsingDeclEPNS_9UsingDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseUsingDeclEPNS_9UsingDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUsingDecl(UsingDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUsingDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(D.getQualifierLoc())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseDeclarationNameInfo(D.getNameInfo())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUsingDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUsingDirectiveDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1492,
   FQN="clang::RecursiveASTVisitor::TraverseUsingDirectiveDecl", NM="_ZN5clang19RecursiveASTVisitor26TraverseUsingDirectiveDeclEPNS_18UsingDirectiveDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseUsingDirectiveDeclEPNS_18UsingDirectiveDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUsingDirectiveDecl(UsingDirectiveDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUsingDirectiveDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(D.getQualifierLoc())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUsingDirectiveDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUsingShadowDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1496,
   FQN="clang::RecursiveASTVisitor::TraverseUsingShadowDecl", NM="_ZN5clang19RecursiveASTVisitor23TraverseUsingShadowDeclEPNS_15UsingShadowDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseUsingShadowDeclEPNS_15UsingShadowDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUsingShadowDecl(UsingShadowDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUsingShadowDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUsingShadowDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseConstructorUsingShadowDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1498,
   FQN="clang::RecursiveASTVisitor::TraverseConstructorUsingShadowDecl", NM="_ZN5clang19RecursiveASTVisitor34TraverseConstructorUsingShadowDeclEPNS_26ConstructorUsingShadowDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34TraverseConstructorUsingShadowDeclEPNS_26ConstructorUsingShadowDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseConstructorUsingShadowDecl(ConstructorUsingShadowDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromConstructorUsingShadowDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromConstructorUsingShadowDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFieldDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1808,
   FQN="clang::RecursiveASTVisitor::TraverseFieldDecl", NM="_ZN5clang19RecursiveASTVisitor17TraverseFieldDeclEPNS_9FieldDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseFieldDeclEPNS_9FieldDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFieldDecl(FieldDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFieldDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDeclaratorHelper(D)) {
            return false;
          }
        } while (false);
        if (D.isBitField()) {
          do {
            if (!getDerived().TraverseStmt(D.getBitWidth())) {
              return false;
            }
          } while (false);
        } else if (D.hasInClassInitializer()) {
          do {
            if (!getDerived().TraverseStmt(D.getInClassInitializer())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFieldDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCAtDefsFieldDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1816,
   FQN="clang::RecursiveASTVisitor::TraverseObjCAtDefsFieldDecl", NM="_ZN5clang19RecursiveASTVisitor27TraverseObjCAtDefsFieldDeclEPNS_19ObjCAtDefsFieldDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseObjCAtDefsFieldDeclEPNS_19ObjCAtDefsFieldDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCAtDefsFieldDecl(ObjCAtDefsFieldDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtDefsFieldDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDeclaratorHelper(D)) {
            return false;
          }
        } while (false);
        if (D.isBitField()) {
          do {
            if (!getDerived().TraverseStmt(D.getBitWidth())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCAtDefsFieldDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCIvarDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1823,
   FQN="clang::RecursiveASTVisitor::TraverseObjCIvarDecl", NM="_ZN5clang19RecursiveASTVisitor20TraverseObjCIvarDeclEPNS_12ObjCIvarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseObjCIvarDeclEPNS_12ObjCIvarDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCIvarDecl(ObjCIvarDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCIvarDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDeclaratorHelper(D)) {
            return false;
          }
        } while (false);
        if (D.isBitField()) {
          do {
            if (!getDerived().TraverseStmt(D.getBitWidth())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCIvarDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFunctionDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1883,
   FQN="clang::RecursiveASTVisitor::TraverseFunctionDecl", NM="_ZN5clang19RecursiveASTVisitor20TraverseFunctionDeclEPNS_12FunctionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseFunctionDeclEPNS_12FunctionDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseFunctionDecl(FunctionDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        ShouldVisitChildren = false;
        ReturnValue = TraverseFunctionHelper(D);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromFunctionDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXMethodDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1890,
   FQN="clang::RecursiveASTVisitor::TraverseCXXMethodDecl", NM="_ZN5clang19RecursiveASTVisitor21TraverseCXXMethodDeclEPNS_13CXXMethodDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21TraverseCXXMethodDeclEPNS_13CXXMethodDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXMethodDecl(CXXMethodDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXMethodDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        ShouldVisitChildren = false;
        ReturnValue = TraverseFunctionHelper(D);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXMethodDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXConstructorDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1897,
   FQN="clang::RecursiveASTVisitor::TraverseCXXConstructorDecl", NM="_ZN5clang19RecursiveASTVisitor26TraverseCXXConstructorDeclEPNS_18CXXConstructorDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseCXXConstructorDeclEPNS_18CXXConstructorDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXConstructorDecl(CXXConstructorDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXConstructorDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        ShouldVisitChildren = false;
        ReturnValue = TraverseFunctionHelper(D);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXConstructorDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  
  // CXXConversionDecl is the declaration of a type conversion operator.
  // It's not a cast expression.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXConversionDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1906,
   FQN="clang::RecursiveASTVisitor::TraverseCXXConversionDecl", NM="_ZN5clang19RecursiveASTVisitor25TraverseCXXConversionDeclEPNS_17CXXConversionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseCXXConversionDeclEPNS_17CXXConversionDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXConversionDecl(CXXConversionDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXConversionDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        ShouldVisitChildren = false;
        ReturnValue = TraverseFunctionHelper(D);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXConversionDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXDestructorDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1913,
   FQN="clang::RecursiveASTVisitor::TraverseCXXDestructorDecl", NM="_ZN5clang19RecursiveASTVisitor25TraverseCXXDestructorDeclEPNS_17CXXDestructorDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseCXXDestructorDeclEPNS_17CXXDestructorDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseCXXDestructorDecl(CXXDestructorDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDestructorDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        ShouldVisitChildren = false;
        ReturnValue = TraverseFunctionHelper(D);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromCXXDestructorDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseMSPropertyDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1806,
   FQN="clang::RecursiveASTVisitor::TraverseMSPropertyDecl", NM="_ZN5clang19RecursiveASTVisitor22TraverseMSPropertyDeclEPNS_14MSPropertyDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseMSPropertyDeclEPNS_14MSPropertyDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseMSPropertyDecl(MSPropertyDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSPropertyDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDeclaratorHelper(D)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromMSPropertyDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseNonTypeTemplateParmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1934,
   FQN="clang::RecursiveASTVisitor::TraverseNonTypeTemplateParmDecl", NM="_ZN5clang19RecursiveASTVisitor31TraverseNonTypeTemplateParmDeclEPNS_23NonTypeTemplateParmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseNonTypeTemplateParmDeclEPNS_23NonTypeTemplateParmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseNonTypeTemplateParmDecl(NonTypeTemplateParmDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNonTypeTemplateParmDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseDeclaratorHelper(D)) {
            return false;
          }
        } while (false);
        if (D.hasDefaultArgument() && !D.defaultArgumentWasInherited()) {
          do {
            if (!getDerived().TraverseStmt(D.getDefaultArgument())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromNonTypeTemplateParmDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVarDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1930,
   FQN="clang::RecursiveASTVisitor::TraverseVarDecl", NM="_ZN5clang19RecursiveASTVisitor15TraverseVarDeclEPNS_7VarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15TraverseVarDeclEPNS_7VarDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVarDecl(VarDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVarDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseVarHelper(D)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVarDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseImplicitParamDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1932,
   FQN="clang::RecursiveASTVisitor::TraverseImplicitParamDecl", NM="_ZN5clang19RecursiveASTVisitor25TraverseImplicitParamDeclEPNS_17ImplicitParamDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseImplicitParamDeclEPNS_17ImplicitParamDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseImplicitParamDecl(ImplicitParamDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImplicitParamDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseVarHelper(D)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromImplicitParamDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPCapturedExprDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1514,
   FQN="clang::RecursiveASTVisitor::TraverseOMPCapturedExprDecl", NM="_ZN5clang19RecursiveASTVisitor27TraverseOMPCapturedExprDeclEPNS_19OMPCapturedExprDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseOMPCapturedExprDeclEPNS_19OMPCapturedExprDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPCapturedExprDecl(OMPCapturedExprDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPCapturedExprDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseVarHelper(D)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPCapturedExprDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseParmVarDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1941,
   FQN="clang::RecursiveASTVisitor::TraverseParmVarDecl", NM="_ZN5clang19RecursiveASTVisitor19TraverseParmVarDeclEPNS_11ParmVarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19TraverseParmVarDeclEPNS_11ParmVarDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseParmVarDecl(ParmVarDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromParmVarDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseVarHelper(D)) {
            return false;
          }
        } while (false);
        if (D.hasDefaultArg() && D.hasUninstantiatedDefaultArg() && !D.hasUnparsedDefaultArg()) {
          do {
            if (!getDerived().TraverseStmt(D.getUninstantiatedDefaultArg())) {
              return false;
            }
          } while (false);
        }
        if (D.hasDefaultArg() && !D.hasUninstantiatedDefaultArg() && !D.hasUnparsedDefaultArg()) {
          do {
            if (!getDerived().TraverseStmt(D.getDefaultArg())) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromParmVarDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVarTemplateSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1749,
   FQN="clang::RecursiveASTVisitor::TraverseVarTemplateSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor37TraverseVarTemplateSpecializationDeclEPNS_29VarTemplateSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37TraverseVarTemplateSpecializationDeclEPNS_29VarTemplateSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVarTemplateSpecializationDecl(VarTemplateSpecializationDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVarTemplateSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        {
          TypeSourceInfo /*P*/ TSI = D.getTypeAsWritten();
          if ((TSI != null)) {
            do {
              if (!getDerived().TraverseTypeLoc(TSI.getTypeLoc())) {
                return false;
              }
            } while (false);
          }
        }
        if (!getDerived().shouldVisitTemplateInstantiations() && D.getTemplateSpecializationKind() != TemplateSpecializationKind.TSK_ExplicitSpecialization) {
          return true;
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVarTemplateSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVarTemplatePartialSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1783,
   FQN="clang::RecursiveASTVisitor::TraverseVarTemplatePartialSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor44TraverseVarTemplatePartialSpecializationDeclEPNS_36VarTemplatePartialSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor44TraverseVarTemplatePartialSpecializationDeclEPNS_36VarTemplatePartialSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseVarTemplatePartialSpecializationDecl(VarTemplatePartialSpecializationDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVarTemplatePartialSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        {
          TemplateParameterList /*P*/ TPL = D.getTemplateParameters();
          if ((TPL != null)) {
            for (type$ptr<NamedDecl /*P*/ /*P*/ > I = $tryClone(TPL.begin()), /*P*/ /*P*/ E = $tryClone(TPL.end()); $noteq_ptr(I, E); I.$preInc()) {
              do {
                if (!getDerived().TraverseDecl(I.$star())) {
                  return false;
                }
              } while (false);
            }
          }
        }
        do {
          if (!getDerived().TraverseTemplateArgumentLocsHelper(D.getTemplateArgsAsWritten().getTemplateArgs(), D.getTemplateArgsAsWritten().NumTemplateArgs)) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseVarHelper(D)) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromVarTemplatePartialSpecializationDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseEnumConstantDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1785,
   FQN="clang::RecursiveASTVisitor::TraverseEnumConstantDecl", NM="_ZN5clang19RecursiveASTVisitor24TraverseEnumConstantDeclEPNS_16EnumConstantDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseEnumConstantDeclEPNS_16EnumConstantDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseEnumConstantDecl(EnumConstantDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromEnumConstantDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseStmt(D.getInitExpr())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromEnumConstantDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseIndirectFieldDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1794,
   FQN="clang::RecursiveASTVisitor::TraverseIndirectFieldDecl", NM="_ZN5clang19RecursiveASTVisitor25TraverseIndirectFieldDeclEPNS_17IndirectFieldDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseIndirectFieldDeclEPNS_17IndirectFieldDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseIndirectFieldDecl(IndirectFieldDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIndirectFieldDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromIndirectFieldDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPDeclareReductionDecl">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION/*unreachable*/,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1506,
   FQN="clang::RecursiveASTVisitor::TraverseOMPDeclareReductionDecl", NM="_ZN5clang19RecursiveASTVisitor31TraverseOMPDeclareReductionDeclEPNS_23OMPDeclareReductionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31TraverseOMPDeclareReductionDeclEPNS_23OMPDeclareReductionDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPDeclareReductionDecl(OMPDeclareReductionDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPDeclareReductionDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseStmt(D.getCombiner())) {
            return false;
          }
        } while (false);
        {
          Expr /*P*/ Initializer = D.getInitializer();
          if ((Initializer != null)) {
            do {
              if (!getDerived().TraverseStmt(Initializer)) {
                return false;
              }
            } while (false);
          }
        }
        do {
          if (!getDerived().TraverseType(D.getType())) {
            return false;
          }
        } while (false);
        return true;
      }
//      ;
    }
    // MANUAL_COMPILATION/*unreachable*/
//    if (ReturnValue && ShouldVisitChildren) {
//      do {
//        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
//          return false;
//        }
//      } while (false);
//    }
//    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
//      do {
//        if (!getDerived().WalkUpFromOMPDeclareReductionDecl(D)) {
//          return false;
//        }
//      } while (false);
//    }
//    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseUnresolvedUsingValueDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1787,
   FQN="clang::RecursiveASTVisitor::TraverseUnresolvedUsingValueDecl", NM="_ZN5clang19RecursiveASTVisitor32TraverseUnresolvedUsingValueDeclEPNS_24UnresolvedUsingValueDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraverseUnresolvedUsingValueDeclEPNS_24UnresolvedUsingValueDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseUnresolvedUsingValueDecl(UnresolvedUsingValueDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedUsingValueDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseNestedNameSpecifierLoc(D.getQualifierLoc())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseDeclarationNameInfo(D.getNameInfo())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromUnresolvedUsingValueDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPThreadPrivateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1500,
   FQN="clang::RecursiveASTVisitor::TraverseOMPThreadPrivateDecl", NM="_ZN5clang19RecursiveASTVisitor28TraverseOMPThreadPrivateDeclEPNS_20OMPThreadPrivateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseOMPThreadPrivateDeclEPNS_20OMPThreadPrivateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseOMPThreadPrivateDecl(OMPThreadPrivateDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPThreadPrivateDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        for (Expr /*P*/ I : D.varlists()) {
          do {
            if (!getDerived().TraverseStmt(I)) {
              return false;
            }
          } while (false);
        }
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromOMPThreadPrivateDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseObjCPropertyImplDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1386,
   FQN="clang::RecursiveASTVisitor::TraverseObjCPropertyImplDecl", NM="_ZN5clang19RecursiveASTVisitor28TraverseObjCPropertyImplDeclEPNS_20ObjCPropertyImplDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28TraverseObjCPropertyImplDeclEPNS_20ObjCPropertyImplDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseObjCPropertyImplDecl(ObjCPropertyImplDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCPropertyImplDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromObjCPropertyImplDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePragmaCommentDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1401,
   FQN="clang::RecursiveASTVisitor::TraversePragmaCommentDecl", NM="_ZN5clang19RecursiveASTVisitor25TraversePragmaCommentDeclEPNS_17PragmaCommentDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraversePragmaCommentDeclEPNS_17PragmaCommentDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePragmaCommentDecl(PragmaCommentDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPragmaCommentDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPragmaCommentDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraversePragmaDetectMismatchDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1403,
   FQN="clang::RecursiveASTVisitor::TraversePragmaDetectMismatchDecl", NM="_ZN5clang19RecursiveASTVisitor32TraversePragmaDetectMismatchDeclEPNS_24PragmaDetectMismatchDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32TraversePragmaDetectMismatchDeclEPNS_24PragmaDetectMismatchDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraversePragmaDetectMismatchDecl(PragmaDetectMismatchDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPragmaDetectMismatchDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromPragmaDetectMismatchDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseStaticAssertDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1389,
   FQN="clang::RecursiveASTVisitor::TraverseStaticAssertDecl", NM="_ZN5clang19RecursiveASTVisitor24TraverseStaticAssertDeclEPNS_16StaticAssertDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseStaticAssertDeclEPNS_16StaticAssertDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseStaticAssertDecl(StaticAssertDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromStaticAssertDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
        do {
          if (!getDerived().TraverseStmt(D.getAssertExpr())) {
            return false;
          }
        } while (false);
        do {
          if (!getDerived().TraverseStmt(D.getMessage())) {
            return false;
          }
        } while (false);
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromStaticAssertDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTranslationUnitDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1394,
   FQN="clang::RecursiveASTVisitor::TraverseTranslationUnitDecl", NM="_ZN5clang19RecursiveASTVisitor27TraverseTranslationUnitDeclEPNS_19TranslationUnitDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27TraverseTranslationUnitDeclEPNS_19TranslationUnitDeclE")
  //</editor-fold>
  public default/*interface*/ boolean TraverseTranslationUnitDecl(TranslationUnitDecl /*P*/ D) {
    boolean ShouldVisitChildren = true;
    boolean ReturnValue = true;
    if (!getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTranslationUnitDecl(D)) {
          return false;
        }
      } while (false);
    }
    {
      {
      }
      ;
    }
    if (ReturnValue && ShouldVisitChildren) {
      do {
        if (!getDerived().TraverseDeclContextHelper(dyn_cast_DeclContext(D))) {
          return false;
        }
      } while (false);
    }
    if (ReturnValue && getDerived().shouldTraversePostOrder()) {
      do {
        if (!getDerived().WalkUpFromTranslationUnitDecl(D)) {
          return false;
        }
      } while (false);
    }
    return ReturnValue;
  }

  // The above header #undefs ABSTRACT_DECL and DECL upon exit.
  
  // Define WalkUpFrom*() and empty Visit*() for all Decl classes.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 469,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDecl", NM="_ZN5clang19RecursiveASTVisitor14WalkUpFromDeclEPNS_4DeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14WalkUpFromDeclEPNS_4DeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDecl(Decl /*P*/ D) {
    return getDerived().VisitDecl(D);
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 470,
   FQN="clang::RecursiveASTVisitor::VisitDecl", NM="_ZN5clang19RecursiveASTVisitor9VisitDeclEPNS_4DeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor9VisitDeclEPNS_4DeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDecl(Decl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromAccessSpecDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 23,
   FQN="clang::RecursiveASTVisitor::WalkUpFromAccessSpecDecl", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromAccessSpecDeclEPNS_14AccessSpecDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromAccessSpecDeclEPNS_14AccessSpecDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromAccessSpecDecl(AccessSpecDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitAccessSpecDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitAccessSpecDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 23,
   FQN="clang::RecursiveASTVisitor::VisitAccessSpecDecl", NM="_ZN5clang19RecursiveASTVisitor19VisitAccessSpecDeclEPNS_14AccessSpecDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitAccessSpecDeclEPNS_14AccessSpecDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitAccessSpecDecl(AccessSpecDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBlockDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 29,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBlockDecl", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromBlockDeclEPNS_9BlockDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromBlockDeclEPNS_9BlockDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBlockDecl(BlockDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBlockDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBlockDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 29,
   FQN="clang::RecursiveASTVisitor::VisitBlockDecl", NM="_ZN5clang19RecursiveASTVisitor14VisitBlockDeclEPNS_9BlockDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitBlockDeclEPNS_9BlockDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBlockDecl(BlockDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCapturedDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 35,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCapturedDecl", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromCapturedDeclEPNS_12CapturedDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromCapturedDeclEPNS_12CapturedDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCapturedDecl(CapturedDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCapturedDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCapturedDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 35,
   FQN="clang::RecursiveASTVisitor::VisitCapturedDecl", NM="_ZN5clang19RecursiveASTVisitor17VisitCapturedDeclEPNS_12CapturedDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitCapturedDeclEPNS_12CapturedDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCapturedDecl(CapturedDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromClassScopeFunctionSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 41,
   FQN="clang::RecursiveASTVisitor::WalkUpFromClassScopeFunctionSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor46WalkUpFromClassScopeFunctionSpecializationDeclEPNS_36ClassScopeFunctionSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor46WalkUpFromClassScopeFunctionSpecializationDeclEPNS_36ClassScopeFunctionSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromClassScopeFunctionSpecializationDecl(ClassScopeFunctionSpecializationDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitClassScopeFunctionSpecializationDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitClassScopeFunctionSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 41,
   FQN="clang::RecursiveASTVisitor::VisitClassScopeFunctionSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor41VisitClassScopeFunctionSpecializationDeclEPNS_36ClassScopeFunctionSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor41VisitClassScopeFunctionSpecializationDeclEPNS_36ClassScopeFunctionSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitClassScopeFunctionSpecializationDecl(ClassScopeFunctionSpecializationDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromEmptyDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 47,
   FQN="clang::RecursiveASTVisitor::WalkUpFromEmptyDecl", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromEmptyDeclEPNS_9EmptyDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromEmptyDeclEPNS_9EmptyDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromEmptyDecl(EmptyDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitEmptyDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitEmptyDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 47,
   FQN="clang::RecursiveASTVisitor::VisitEmptyDecl", NM="_ZN5clang19RecursiveASTVisitor14VisitEmptyDeclEPNS_9EmptyDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitEmptyDeclEPNS_9EmptyDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitEmptyDecl(EmptyDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromExternCContextDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 53,
   FQN="clang::RecursiveASTVisitor::WalkUpFromExternCContextDecl", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromExternCContextDeclEPNS_18ExternCContextDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromExternCContextDeclEPNS_18ExternCContextDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromExternCContextDecl(ExternCContextDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitExternCContextDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitExternCContextDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 53,
   FQN="clang::RecursiveASTVisitor::VisitExternCContextDecl", NM="_ZN5clang19RecursiveASTVisitor23VisitExternCContextDeclEPNS_18ExternCContextDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitExternCContextDeclEPNS_18ExternCContextDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitExternCContextDecl(ExternCContextDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFileScopeAsmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 59,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFileScopeAsmDecl", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromFileScopeAsmDeclEPNS_16FileScopeAsmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromFileScopeAsmDeclEPNS_16FileScopeAsmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFileScopeAsmDecl(FileScopeAsmDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFileScopeAsmDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFileScopeAsmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 59,
   FQN="clang::RecursiveASTVisitor::VisitFileScopeAsmDecl", NM="_ZN5clang19RecursiveASTVisitor21VisitFileScopeAsmDeclEPNS_16FileScopeAsmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitFileScopeAsmDeclEPNS_16FileScopeAsmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFileScopeAsmDecl(FileScopeAsmDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFriendDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 65,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFriendDecl", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromFriendDeclEPNS_10FriendDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromFriendDeclEPNS_10FriendDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFriendDecl(FriendDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFriendDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFriendDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 65,
   FQN="clang::RecursiveASTVisitor::VisitFriendDecl", NM="_ZN5clang19RecursiveASTVisitor15VisitFriendDeclEPNS_10FriendDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitFriendDeclEPNS_10FriendDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFriendDecl(FriendDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFriendTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 71,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFriendTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromFriendTemplateDeclEPNS_18FriendTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromFriendTemplateDeclEPNS_18FriendTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFriendTemplateDecl(FriendTemplateDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFriendTemplateDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFriendTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 71,
   FQN="clang::RecursiveASTVisitor::VisitFriendTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor23VisitFriendTemplateDeclEPNS_18FriendTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitFriendTemplateDeclEPNS_18FriendTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFriendTemplateDecl(FriendTemplateDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromImportDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 77,
   FQN="clang::RecursiveASTVisitor::WalkUpFromImportDecl", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromImportDeclEPNS_10ImportDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromImportDeclEPNS_10ImportDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromImportDecl(ImportDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitImportDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitImportDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 77,
   FQN="clang::RecursiveASTVisitor::VisitImportDecl", NM="_ZN5clang19RecursiveASTVisitor15VisitImportDeclEPNS_10ImportDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitImportDeclEPNS_10ImportDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitImportDecl(ImportDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromLinkageSpecDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 83,
   FQN="clang::RecursiveASTVisitor::WalkUpFromLinkageSpecDecl", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromLinkageSpecDeclEPNS_15LinkageSpecDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromLinkageSpecDeclEPNS_15LinkageSpecDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromLinkageSpecDecl(LinkageSpecDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitLinkageSpecDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLinkageSpecDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 83,
   FQN="clang::RecursiveASTVisitor::VisitLinkageSpecDecl", NM="_ZN5clang19RecursiveASTVisitor20VisitLinkageSpecDeclEPNS_15LinkageSpecDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitLinkageSpecDeclEPNS_15LinkageSpecDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLinkageSpecDecl(LinkageSpecDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromNamedDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 89,
   FQN="clang::RecursiveASTVisitor::WalkUpFromNamedDecl", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromNamedDeclEPNS_9NamedDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromNamedDeclEPNS_9NamedDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromNamedDecl(NamedDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitNamedDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNamedDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 89,
   FQN="clang::RecursiveASTVisitor::VisitNamedDecl", NM="_ZN5clang19RecursiveASTVisitor14VisitNamedDeclEPNS_9NamedDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitNamedDeclEPNS_9NamedDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNamedDecl(NamedDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromLabelDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 93,
   FQN="clang::RecursiveASTVisitor::WalkUpFromLabelDecl", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromLabelDeclEPNS_9LabelDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromLabelDeclEPNS_9LabelDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromLabelDecl(LabelDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitLabelDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitLabelDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 93,
   FQN="clang::RecursiveASTVisitor::VisitLabelDecl", NM="_ZN5clang19RecursiveASTVisitor14VisitLabelDeclEPNS_9LabelDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitLabelDeclEPNS_9LabelDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitLabelDecl(LabelDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromNamespaceDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 99,
   FQN="clang::RecursiveASTVisitor::WalkUpFromNamespaceDecl", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromNamespaceDeclEPNS_13NamespaceDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromNamespaceDeclEPNS_13NamespaceDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromNamespaceDecl(NamespaceDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitNamespaceDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNamespaceDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 99,
   FQN="clang::RecursiveASTVisitor::VisitNamespaceDecl", NM="_ZN5clang19RecursiveASTVisitor18VisitNamespaceDeclEPNS_13NamespaceDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitNamespaceDeclEPNS_13NamespaceDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNamespaceDecl(NamespaceDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromNamespaceAliasDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 105,
   FQN="clang::RecursiveASTVisitor::WalkUpFromNamespaceAliasDecl", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromNamespaceAliasDeclEPNS_18NamespaceAliasDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromNamespaceAliasDeclEPNS_18NamespaceAliasDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromNamespaceAliasDecl(NamespaceAliasDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitNamespaceAliasDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNamespaceAliasDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 105,
   FQN="clang::RecursiveASTVisitor::VisitNamespaceAliasDecl", NM="_ZN5clang19RecursiveASTVisitor23VisitNamespaceAliasDeclEPNS_18NamespaceAliasDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitNamespaceAliasDeclEPNS_18NamespaceAliasDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNamespaceAliasDecl(NamespaceAliasDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCCompatibleAliasDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 111,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCCompatibleAliasDecl", NM="_ZN5clang19RecursiveASTVisitor33WalkUpFromObjCCompatibleAliasDeclEPNS_23ObjCCompatibleAliasDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33WalkUpFromObjCCompatibleAliasDeclEPNS_23ObjCCompatibleAliasDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCCompatibleAliasDecl(ObjCCompatibleAliasDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCCompatibleAliasDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCCompatibleAliasDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 111,
   FQN="clang::RecursiveASTVisitor::VisitObjCCompatibleAliasDecl", NM="_ZN5clang19RecursiveASTVisitor28VisitObjCCompatibleAliasDeclEPNS_23ObjCCompatibleAliasDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitObjCCompatibleAliasDeclEPNS_23ObjCCompatibleAliasDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCCompatibleAliasDecl(ObjCCompatibleAliasDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCContainerDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 117,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCContainerDecl", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCContainerDeclEPNS_17ObjCContainerDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCContainerDeclEPNS_17ObjCContainerDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCContainerDecl(ObjCContainerDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCContainerDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCContainerDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 117,
   FQN="clang::RecursiveASTVisitor::VisitObjCContainerDecl", NM="_ZN5clang19RecursiveASTVisitor22VisitObjCContainerDeclEPNS_17ObjCContainerDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitObjCContainerDeclEPNS_17ObjCContainerDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCContainerDecl(ObjCContainerDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCCategoryDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 121,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCCategoryDecl", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCCategoryDeclEPNS_16ObjCCategoryDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCCategoryDeclEPNS_16ObjCCategoryDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCCategoryDecl(ObjCCategoryDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromObjCContainerDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCCategoryDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCCategoryDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 121,
   FQN="clang::RecursiveASTVisitor::VisitObjCCategoryDecl", NM="_ZN5clang19RecursiveASTVisitor21VisitObjCCategoryDeclEPNS_16ObjCCategoryDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitObjCCategoryDeclEPNS_16ObjCCategoryDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCCategoryDecl(ObjCCategoryDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCImplDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 127,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCImplDecl", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromObjCImplDeclEPNS_12ObjCImplDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromObjCImplDeclEPNS_12ObjCImplDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCImplDecl(ObjCImplDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromObjCContainerDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCImplDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCImplDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 127,
   FQN="clang::RecursiveASTVisitor::VisitObjCImplDecl", NM="_ZN5clang19RecursiveASTVisitor17VisitObjCImplDeclEPNS_12ObjCImplDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitObjCImplDeclEPNS_12ObjCImplDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCImplDecl(ObjCImplDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCCategoryImplDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 131,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCCategoryImplDecl", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromObjCCategoryImplDeclEPNS_20ObjCCategoryImplDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromObjCCategoryImplDeclEPNS_20ObjCCategoryImplDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCCategoryImplDecl(ObjCCategoryImplDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromObjCImplDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCCategoryImplDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCCategoryImplDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 131,
   FQN="clang::RecursiveASTVisitor::VisitObjCCategoryImplDecl", NM="_ZN5clang19RecursiveASTVisitor25VisitObjCCategoryImplDeclEPNS_20ObjCCategoryImplDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitObjCCategoryImplDeclEPNS_20ObjCCategoryImplDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCCategoryImplDecl(ObjCCategoryImplDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCImplementationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 137,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCImplementationDecl", NM="_ZN5clang19RecursiveASTVisitor32WalkUpFromObjCImplementationDeclEPNS_22ObjCImplementationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32WalkUpFromObjCImplementationDeclEPNS_22ObjCImplementationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCImplementationDecl(ObjCImplementationDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromObjCImplDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCImplementationDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCImplementationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 137,
   FQN="clang::RecursiveASTVisitor::VisitObjCImplementationDecl", NM="_ZN5clang19RecursiveASTVisitor27VisitObjCImplementationDeclEPNS_22ObjCImplementationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27VisitObjCImplementationDeclEPNS_22ObjCImplementationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCImplementationDecl(ObjCImplementationDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCInterfaceDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 147,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCInterfaceDecl", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCInterfaceDeclEPNS_17ObjCInterfaceDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCInterfaceDeclEPNS_17ObjCInterfaceDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCInterfaceDecl(ObjCInterfaceDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromObjCContainerDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCInterfaceDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCInterfaceDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 147,
   FQN="clang::RecursiveASTVisitor::VisitObjCInterfaceDecl", NM="_ZN5clang19RecursiveASTVisitor22VisitObjCInterfaceDeclEPNS_17ObjCInterfaceDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitObjCInterfaceDeclEPNS_17ObjCInterfaceDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCInterfaceDecl(ObjCInterfaceDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCProtocolDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 153,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCProtocolDecl", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCProtocolDeclEPNS_16ObjCProtocolDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCProtocolDeclEPNS_16ObjCProtocolDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCProtocolDecl(ObjCProtocolDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromObjCContainerDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCProtocolDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCProtocolDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 153,
   FQN="clang::RecursiveASTVisitor::VisitObjCProtocolDecl", NM="_ZN5clang19RecursiveASTVisitor21VisitObjCProtocolDeclEPNS_16ObjCProtocolDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitObjCProtocolDeclEPNS_16ObjCProtocolDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCProtocolDecl(ObjCProtocolDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCMethodDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 163,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCMethodDecl", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromObjCMethodDeclEPNS_14ObjCMethodDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromObjCMethodDeclEPNS_14ObjCMethodDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCMethodDecl(ObjCMethodDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCMethodDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCMethodDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 163,
   FQN="clang::RecursiveASTVisitor::VisitObjCMethodDecl", NM="_ZN5clang19RecursiveASTVisitor19VisitObjCMethodDeclEPNS_14ObjCMethodDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitObjCMethodDeclEPNS_14ObjCMethodDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCMethodDecl(ObjCMethodDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCPropertyDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 169,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCPropertyDecl", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCPropertyDeclEPNS_16ObjCPropertyDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromObjCPropertyDeclEPNS_16ObjCPropertyDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCPropertyDecl(ObjCPropertyDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCPropertyDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCPropertyDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 169,
   FQN="clang::RecursiveASTVisitor::VisitObjCPropertyDecl", NM="_ZN5clang19RecursiveASTVisitor21VisitObjCPropertyDeclEPNS_16ObjCPropertyDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitObjCPropertyDeclEPNS_16ObjCPropertyDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCPropertyDecl(ObjCPropertyDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 175,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromTemplateDeclEPNS_12TemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromTemplateDeclEPNS_12TemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTemplateDecl(TemplateDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTemplateDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 175,
   FQN="clang::RecursiveASTVisitor::VisitTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor17VisitTemplateDeclEPNS_12TemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitTemplateDeclEPNS_12TemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTemplateDecl(TemplateDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromBuiltinTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 179,
   FQN="clang::RecursiveASTVisitor::WalkUpFromBuiltinTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromBuiltinTemplateDeclEPNS_19BuiltinTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromBuiltinTemplateDeclEPNS_19BuiltinTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromBuiltinTemplateDecl(BuiltinTemplateDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTemplateDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitBuiltinTemplateDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitBuiltinTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 179,
   FQN="clang::RecursiveASTVisitor::VisitBuiltinTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor24VisitBuiltinTemplateDeclEPNS_19BuiltinTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitBuiltinTemplateDeclEPNS_19BuiltinTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitBuiltinTemplateDecl(BuiltinTemplateDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromRedeclarableTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 185,
   FQN="clang::RecursiveASTVisitor::WalkUpFromRedeclarableTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromRedeclarableTemplateDeclEPNS_24RedeclarableTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromRedeclarableTemplateDeclEPNS_24RedeclarableTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromRedeclarableTemplateDecl(RedeclarableTemplateDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTemplateDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitRedeclarableTemplateDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitRedeclarableTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 185,
   FQN="clang::RecursiveASTVisitor::VisitRedeclarableTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor29VisitRedeclarableTemplateDeclEPNS_24RedeclarableTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitRedeclarableTemplateDeclEPNS_24RedeclarableTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitRedeclarableTemplateDecl(RedeclarableTemplateDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromClassTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 189,
   FQN="clang::RecursiveASTVisitor::WalkUpFromClassTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromClassTemplateDeclEPNS_17ClassTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromClassTemplateDeclEPNS_17ClassTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromClassTemplateDecl(ClassTemplateDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromRedeclarableTemplateDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitClassTemplateDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitClassTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 189,
   FQN="clang::RecursiveASTVisitor::VisitClassTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor22VisitClassTemplateDeclEPNS_17ClassTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitClassTemplateDeclEPNS_17ClassTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitClassTemplateDecl(ClassTemplateDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFunctionTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 195,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFunctionTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromFunctionTemplateDeclEPNS_20FunctionTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromFunctionTemplateDeclEPNS_20FunctionTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFunctionTemplateDecl(FunctionTemplateDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromRedeclarableTemplateDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFunctionTemplateDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFunctionTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 195,
   FQN="clang::RecursiveASTVisitor::VisitFunctionTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor25VisitFunctionTemplateDeclEPNS_20FunctionTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitFunctionTemplateDeclEPNS_20FunctionTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFunctionTemplateDecl(FunctionTemplateDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypeAliasTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 201,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypeAliasTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor31WalkUpFromTypeAliasTemplateDeclEPNS_21TypeAliasTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31WalkUpFromTypeAliasTemplateDeclEPNS_21TypeAliasTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypeAliasTemplateDecl(TypeAliasTemplateDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromRedeclarableTemplateDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypeAliasTemplateDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeAliasTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 201,
   FQN="clang::RecursiveASTVisitor::VisitTypeAliasTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor26VisitTypeAliasTemplateDeclEPNS_21TypeAliasTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitTypeAliasTemplateDeclEPNS_21TypeAliasTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeAliasTemplateDecl(TypeAliasTemplateDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromVarTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 207,
   FQN="clang::RecursiveASTVisitor::WalkUpFromVarTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromVarTemplateDeclEPNS_15VarTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromVarTemplateDeclEPNS_15VarTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromVarTemplateDecl(VarTemplateDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromRedeclarableTemplateDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitVarTemplateDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVarTemplateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 207,
   FQN="clang::RecursiveASTVisitor::VisitVarTemplateDecl", NM="_ZN5clang19RecursiveASTVisitor20VisitVarTemplateDeclEPNS_15VarTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitVarTemplateDeclEPNS_15VarTemplateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVarTemplateDecl(VarTemplateDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTemplateTemplateParmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 217,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTemplateTemplateParmDecl", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromTemplateTemplateParmDeclEPNS_24TemplateTemplateParmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromTemplateTemplateParmDeclEPNS_24TemplateTemplateParmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTemplateTemplateParmDecl(TemplateTemplateParmDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTemplateDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTemplateTemplateParmDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTemplateTemplateParmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 217,
   FQN="clang::RecursiveASTVisitor::VisitTemplateTemplateParmDecl", NM="_ZN5clang19RecursiveASTVisitor29VisitTemplateTemplateParmDeclEPNS_24TemplateTemplateParmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitTemplateTemplateParmDeclEPNS_24TemplateTemplateParmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTemplateTemplateParmDecl(TemplateTemplateParmDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypeDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 227,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypeDecl", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromTypeDeclEPNS_8TypeDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromTypeDeclEPNS_8TypeDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypeDecl(TypeDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypeDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 227,
   FQN="clang::RecursiveASTVisitor::VisitTypeDecl", NM="_ZN5clang19RecursiveASTVisitor13VisitTypeDeclEPNS_8TypeDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitTypeDeclEPNS_8TypeDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeDecl(TypeDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTagDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 231,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTagDecl", NM="_ZN5clang19RecursiveASTVisitor17WalkUpFromTagDeclEPNS_7TagDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17WalkUpFromTagDeclEPNS_7TagDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTagDecl(TagDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTypeDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTagDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTagDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 231,
   FQN="clang::RecursiveASTVisitor::VisitTagDecl", NM="_ZN5clang19RecursiveASTVisitor12VisitTagDeclEPNS_7TagDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12VisitTagDeclEPNS_7TagDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTagDecl(TagDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromEnumDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 235,
   FQN="clang::RecursiveASTVisitor::WalkUpFromEnumDecl", NM="_ZN5clang19RecursiveASTVisitor18WalkUpFromEnumDeclEPNS_8EnumDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18WalkUpFromEnumDeclEPNS_8EnumDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromEnumDecl(EnumDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTagDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitEnumDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitEnumDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 235,
   FQN="clang::RecursiveASTVisitor::VisitEnumDecl", NM="_ZN5clang19RecursiveASTVisitor13VisitEnumDeclEPNS_8EnumDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13VisitEnumDeclEPNS_8EnumDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitEnumDecl(EnumDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromRecordDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 241,
   FQN="clang::RecursiveASTVisitor::WalkUpFromRecordDecl", NM="_ZN5clang19RecursiveASTVisitor20WalkUpFromRecordDeclEPNS_10RecordDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20WalkUpFromRecordDeclEPNS_10RecordDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromRecordDecl(RecordDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTagDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitRecordDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitRecordDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 241,
   FQN="clang::RecursiveASTVisitor::VisitRecordDecl", NM="_ZN5clang19RecursiveASTVisitor15VisitRecordDeclEPNS_10RecordDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor15VisitRecordDeclEPNS_10RecordDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitRecordDecl(RecordDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXRecordDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 245,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXRecordDecl", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXRecordDeclEPNS_13CXXRecordDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXRecordDeclEPNS_13CXXRecordDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXRecordDecl(CXXRecordDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromRecordDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXRecordDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXRecordDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 245,
   FQN="clang::RecursiveASTVisitor::VisitCXXRecordDecl", NM="_ZN5clang19RecursiveASTVisitor18VisitCXXRecordDeclEPNS_13CXXRecordDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitCXXRecordDeclEPNS_13CXXRecordDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXRecordDecl(CXXRecordDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromClassTemplateSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 249,
   FQN="clang::RecursiveASTVisitor::WalkUpFromClassTemplateSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor41WalkUpFromClassTemplateSpecializationDeclEPNS_31ClassTemplateSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor41WalkUpFromClassTemplateSpecializationDeclEPNS_31ClassTemplateSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromClassTemplateSpecializationDecl(ClassTemplateSpecializationDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromCXXRecordDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitClassTemplateSpecializationDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitClassTemplateSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 249,
   FQN="clang::RecursiveASTVisitor::VisitClassTemplateSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor36VisitClassTemplateSpecializationDeclEPNS_31ClassTemplateSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36VisitClassTemplateSpecializationDeclEPNS_31ClassTemplateSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitClassTemplateSpecializationDecl(ClassTemplateSpecializationDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromClassTemplatePartialSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 253,
   FQN="clang::RecursiveASTVisitor::WalkUpFromClassTemplatePartialSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor48WalkUpFromClassTemplatePartialSpecializationDeclEPNS_38ClassTemplatePartialSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor48WalkUpFromClassTemplatePartialSpecializationDeclEPNS_38ClassTemplatePartialSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromClassTemplatePartialSpecializationDecl(ClassTemplatePartialSpecializationDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromClassTemplateSpecializationDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitClassTemplatePartialSpecializationDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitClassTemplatePartialSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 253,
   FQN="clang::RecursiveASTVisitor::VisitClassTemplatePartialSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor43VisitClassTemplatePartialSpecializationDeclEPNS_38ClassTemplatePartialSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor43VisitClassTemplatePartialSpecializationDeclEPNS_38ClassTemplatePartialSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitClassTemplatePartialSpecializationDecl(ClassTemplatePartialSpecializationDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTemplateTypeParmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 275,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTemplateTypeParmDecl", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromTemplateTypeParmDeclEPNS_20TemplateTypeParmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromTemplateTypeParmDeclEPNS_20TemplateTypeParmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTemplateTypeParmDecl(TemplateTypeParmDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTypeDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTemplateTypeParmDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTemplateTypeParmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 275,
   FQN="clang::RecursiveASTVisitor::VisitTemplateTypeParmDecl", NM="_ZN5clang19RecursiveASTVisitor25VisitTemplateTypeParmDeclEPNS_20TemplateTypeParmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitTemplateTypeParmDeclEPNS_20TemplateTypeParmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTemplateTypeParmDecl(TemplateTypeParmDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypedefNameDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 281,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypedefNameDecl", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromTypedefNameDeclEPNS_15TypedefNameDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromTypedefNameDeclEPNS_15TypedefNameDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypedefNameDecl(TypedefNameDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTypeDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypedefNameDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypedefNameDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 281,
   FQN="clang::RecursiveASTVisitor::VisitTypedefNameDecl", NM="_ZN5clang19RecursiveASTVisitor20VisitTypedefNameDeclEPNS_15TypedefNameDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitTypedefNameDeclEPNS_15TypedefNameDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypedefNameDecl(TypedefNameDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCTypeParamDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 285,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCTypeParamDecl", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCTypeParamDeclEPNS_17ObjCTypeParamDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromObjCTypeParamDeclEPNS_17ObjCTypeParamDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCTypeParamDecl(ObjCTypeParamDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTypedefNameDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCTypeParamDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCTypeParamDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 285,
   FQN="clang::RecursiveASTVisitor::VisitObjCTypeParamDecl", NM="_ZN5clang19RecursiveASTVisitor22VisitObjCTypeParamDeclEPNS_17ObjCTypeParamDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitObjCTypeParamDeclEPNS_17ObjCTypeParamDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCTypeParamDecl(ObjCTypeParamDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypeAliasDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 291,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypeAliasDecl", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromTypeAliasDeclEPNS_13TypeAliasDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromTypeAliasDeclEPNS_13TypeAliasDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypeAliasDecl(TypeAliasDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTypedefNameDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypeAliasDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypeAliasDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 291,
   FQN="clang::RecursiveASTVisitor::VisitTypeAliasDecl", NM="_ZN5clang19RecursiveASTVisitor18VisitTypeAliasDeclEPNS_13TypeAliasDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitTypeAliasDeclEPNS_13TypeAliasDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypeAliasDecl(TypeAliasDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTypedefDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 297,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTypedefDecl", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromTypedefDeclEPNS_11TypedefDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromTypedefDeclEPNS_11TypedefDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTypedefDecl(TypedefDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTypedefNameDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTypedefDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTypedefDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 297,
   FQN="clang::RecursiveASTVisitor::VisitTypedefDecl", NM="_ZN5clang19RecursiveASTVisitor16VisitTypedefDeclEPNS_11TypedefDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitTypedefDeclEPNS_11TypedefDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTypedefDecl(TypedefDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnresolvedUsingTypenameDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 307,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnresolvedUsingTypenameDecl", NM="_ZN5clang19RecursiveASTVisitor37WalkUpFromUnresolvedUsingTypenameDeclEPNS_27UnresolvedUsingTypenameDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor37WalkUpFromUnresolvedUsingTypenameDeclEPNS_27UnresolvedUsingTypenameDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnresolvedUsingTypenameDecl(UnresolvedUsingTypenameDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromTypeDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnresolvedUsingTypenameDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnresolvedUsingTypenameDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 307,
   FQN="clang::RecursiveASTVisitor::VisitUnresolvedUsingTypenameDecl", NM="_ZN5clang19RecursiveASTVisitor32VisitUnresolvedUsingTypenameDeclEPNS_27UnresolvedUsingTypenameDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor32VisitUnresolvedUsingTypenameDeclEPNS_27UnresolvedUsingTypenameDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnresolvedUsingTypenameDecl(UnresolvedUsingTypenameDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUsingDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 317,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUsingDecl", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromUsingDeclEPNS_9UsingDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromUsingDeclEPNS_9UsingDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUsingDecl(UsingDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUsingDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUsingDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 317,
   FQN="clang::RecursiveASTVisitor::VisitUsingDecl", NM="_ZN5clang19RecursiveASTVisitor14VisitUsingDeclEPNS_9UsingDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitUsingDeclEPNS_9UsingDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUsingDecl(UsingDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUsingDirectiveDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 323,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUsingDirectiveDecl", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromUsingDirectiveDeclEPNS_18UsingDirectiveDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromUsingDirectiveDeclEPNS_18UsingDirectiveDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUsingDirectiveDecl(UsingDirectiveDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUsingDirectiveDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUsingDirectiveDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 323,
   FQN="clang::RecursiveASTVisitor::VisitUsingDirectiveDecl", NM="_ZN5clang19RecursiveASTVisitor23VisitUsingDirectiveDeclEPNS_18UsingDirectiveDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitUsingDirectiveDeclEPNS_18UsingDirectiveDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUsingDirectiveDecl(UsingDirectiveDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUsingShadowDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 329,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUsingShadowDecl", NM="_ZN5clang19RecursiveASTVisitor25WalkUpFromUsingShadowDeclEPNS_15UsingShadowDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25WalkUpFromUsingShadowDeclEPNS_15UsingShadowDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUsingShadowDecl(UsingShadowDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUsingShadowDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUsingShadowDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 329,
   FQN="clang::RecursiveASTVisitor::VisitUsingShadowDecl", NM="_ZN5clang19RecursiveASTVisitor20VisitUsingShadowDeclEPNS_15UsingShadowDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitUsingShadowDeclEPNS_15UsingShadowDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUsingShadowDecl(UsingShadowDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromConstructorUsingShadowDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 333,
   FQN="clang::RecursiveASTVisitor::WalkUpFromConstructorUsingShadowDecl", NM="_ZN5clang19RecursiveASTVisitor36WalkUpFromConstructorUsingShadowDeclEPNS_26ConstructorUsingShadowDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor36WalkUpFromConstructorUsingShadowDeclEPNS_26ConstructorUsingShadowDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromConstructorUsingShadowDecl(ConstructorUsingShadowDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromUsingShadowDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitConstructorUsingShadowDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitConstructorUsingShadowDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 333,
   FQN="clang::RecursiveASTVisitor::VisitConstructorUsingShadowDecl", NM="_ZN5clang19RecursiveASTVisitor31VisitConstructorUsingShadowDeclEPNS_26ConstructorUsingShadowDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor31VisitConstructorUsingShadowDeclEPNS_26ConstructorUsingShadowDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitConstructorUsingShadowDecl(ConstructorUsingShadowDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromValueDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 343,
   FQN="clang::RecursiveASTVisitor::WalkUpFromValueDecl", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromValueDeclEPNS_9ValueDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromValueDeclEPNS_9ValueDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromValueDecl(ValueDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromNamedDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitValueDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitValueDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 343,
   FQN="clang::RecursiveASTVisitor::VisitValueDecl", NM="_ZN5clang19RecursiveASTVisitor14VisitValueDeclEPNS_9ValueDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitValueDeclEPNS_9ValueDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitValueDecl(ValueDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromDeclaratorDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 347,
   FQN="clang::RecursiveASTVisitor::WalkUpFromDeclaratorDecl", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromDeclaratorDeclEPNS_14DeclaratorDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromDeclaratorDeclEPNS_14DeclaratorDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromDeclaratorDecl(DeclaratorDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromValueDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitDeclaratorDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitDeclaratorDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 347,
   FQN="clang::RecursiveASTVisitor::VisitDeclaratorDecl", NM="_ZN5clang19RecursiveASTVisitor19VisitDeclaratorDeclEPNS_14DeclaratorDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitDeclaratorDeclEPNS_14DeclaratorDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitDeclaratorDecl(DeclaratorDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFieldDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 351,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFieldDecl", NM="_ZN5clang19RecursiveASTVisitor19WalkUpFromFieldDeclEPNS_9FieldDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19WalkUpFromFieldDeclEPNS_9FieldDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFieldDecl(FieldDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDeclaratorDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFieldDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFieldDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 351,
   FQN="clang::RecursiveASTVisitor::VisitFieldDecl", NM="_ZN5clang19RecursiveASTVisitor14VisitFieldDeclEPNS_9FieldDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor14VisitFieldDeclEPNS_9FieldDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFieldDecl(FieldDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCAtDefsFieldDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 355,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCAtDefsFieldDecl", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromObjCAtDefsFieldDeclEPNS_19ObjCAtDefsFieldDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromObjCAtDefsFieldDeclEPNS_19ObjCAtDefsFieldDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCAtDefsFieldDecl(ObjCAtDefsFieldDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromFieldDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCAtDefsFieldDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCAtDefsFieldDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 355,
   FQN="clang::RecursiveASTVisitor::VisitObjCAtDefsFieldDecl", NM="_ZN5clang19RecursiveASTVisitor24VisitObjCAtDefsFieldDeclEPNS_19ObjCAtDefsFieldDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitObjCAtDefsFieldDeclEPNS_19ObjCAtDefsFieldDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCAtDefsFieldDecl(ObjCAtDefsFieldDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCIvarDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 361,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCIvarDecl", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromObjCIvarDeclEPNS_12ObjCIvarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromObjCIvarDeclEPNS_12ObjCIvarDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCIvarDecl(ObjCIvarDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromFieldDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCIvarDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCIvarDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 361,
   FQN="clang::RecursiveASTVisitor::VisitObjCIvarDecl", NM="_ZN5clang19RecursiveASTVisitor17VisitObjCIvarDeclEPNS_12ObjCIvarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitObjCIvarDeclEPNS_12ObjCIvarDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCIvarDecl(ObjCIvarDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromFunctionDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 371,
   FQN="clang::RecursiveASTVisitor::WalkUpFromFunctionDecl", NM="_ZN5clang19RecursiveASTVisitor22WalkUpFromFunctionDeclEPNS_12FunctionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22WalkUpFromFunctionDeclEPNS_12FunctionDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromFunctionDecl(FunctionDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDeclaratorDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitFunctionDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitFunctionDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 371,
   FQN="clang::RecursiveASTVisitor::VisitFunctionDecl", NM="_ZN5clang19RecursiveASTVisitor17VisitFunctionDeclEPNS_12FunctionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitFunctionDeclEPNS_12FunctionDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitFunctionDecl(FunctionDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXMethodDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 375,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXMethodDecl", NM="_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXMethodDeclEPNS_13CXXMethodDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23WalkUpFromCXXMethodDeclEPNS_13CXXMethodDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXMethodDecl(CXXMethodDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromFunctionDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXMethodDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXMethodDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 375,
   FQN="clang::RecursiveASTVisitor::VisitCXXMethodDecl", NM="_ZN5clang19RecursiveASTVisitor18VisitCXXMethodDeclEPNS_13CXXMethodDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitCXXMethodDeclEPNS_13CXXMethodDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXMethodDecl(CXXMethodDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXConstructorDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 379,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXConstructorDecl", NM="_ZN5clang19RecursiveASTVisitor28WalkUpFromCXXConstructorDeclEPNS_18CXXConstructorDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28WalkUpFromCXXConstructorDeclEPNS_18CXXConstructorDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXConstructorDecl(CXXConstructorDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromCXXMethodDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXConstructorDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXConstructorDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 379,
   FQN="clang::RecursiveASTVisitor::VisitCXXConstructorDecl", NM="_ZN5clang19RecursiveASTVisitor23VisitCXXConstructorDeclEPNS_18CXXConstructorDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitCXXConstructorDeclEPNS_18CXXConstructorDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXConstructorDecl(CXXConstructorDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXConversionDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 385,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXConversionDecl", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXConversionDeclEPNS_17CXXConversionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXConversionDeclEPNS_17CXXConversionDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXConversionDecl(CXXConversionDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromCXXMethodDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXConversionDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXConversionDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 385,
   FQN="clang::RecursiveASTVisitor::VisitCXXConversionDecl", NM="_ZN5clang19RecursiveASTVisitor22VisitCXXConversionDeclEPNS_17CXXConversionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitCXXConversionDeclEPNS_17CXXConversionDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXConversionDecl(CXXConversionDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromCXXDestructorDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 391,
   FQN="clang::RecursiveASTVisitor::WalkUpFromCXXDestructorDecl", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXDestructorDeclEPNS_17CXXDestructorDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromCXXDestructorDeclEPNS_17CXXDestructorDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromCXXDestructorDecl(CXXDestructorDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromCXXMethodDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitCXXDestructorDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitCXXDestructorDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 391,
   FQN="clang::RecursiveASTVisitor::VisitCXXDestructorDecl", NM="_ZN5clang19RecursiveASTVisitor22VisitCXXDestructorDeclEPNS_17CXXDestructorDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitCXXDestructorDeclEPNS_17CXXDestructorDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitCXXDestructorDecl(CXXDestructorDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromMSPropertyDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 405,
   FQN="clang::RecursiveASTVisitor::WalkUpFromMSPropertyDecl", NM="_ZN5clang19RecursiveASTVisitor24WalkUpFromMSPropertyDeclEPNS_14MSPropertyDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24WalkUpFromMSPropertyDeclEPNS_14MSPropertyDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromMSPropertyDecl(MSPropertyDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDeclaratorDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitMSPropertyDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitMSPropertyDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 405,
   FQN="clang::RecursiveASTVisitor::VisitMSPropertyDecl", NM="_ZN5clang19RecursiveASTVisitor19VisitMSPropertyDeclEPNS_14MSPropertyDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitMSPropertyDeclEPNS_14MSPropertyDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitMSPropertyDecl(MSPropertyDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromNonTypeTemplateParmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 411,
   FQN="clang::RecursiveASTVisitor::WalkUpFromNonTypeTemplateParmDecl", NM="_ZN5clang19RecursiveASTVisitor33WalkUpFromNonTypeTemplateParmDeclEPNS_23NonTypeTemplateParmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33WalkUpFromNonTypeTemplateParmDeclEPNS_23NonTypeTemplateParmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromNonTypeTemplateParmDecl(NonTypeTemplateParmDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDeclaratorDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitNonTypeTemplateParmDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitNonTypeTemplateParmDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 411,
   FQN="clang::RecursiveASTVisitor::VisitNonTypeTemplateParmDecl", NM="_ZN5clang19RecursiveASTVisitor28VisitNonTypeTemplateParmDeclEPNS_23NonTypeTemplateParmDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitNonTypeTemplateParmDeclEPNS_23NonTypeTemplateParmDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitNonTypeTemplateParmDecl(NonTypeTemplateParmDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromVarDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 417,
   FQN="clang::RecursiveASTVisitor::WalkUpFromVarDecl", NM="_ZN5clang19RecursiveASTVisitor17WalkUpFromVarDeclEPNS_7VarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17WalkUpFromVarDeclEPNS_7VarDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromVarDecl(VarDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDeclaratorDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitVarDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVarDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 417,
   FQN="clang::RecursiveASTVisitor::VisitVarDecl", NM="_ZN5clang19RecursiveASTVisitor12VisitVarDeclEPNS_7VarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor12VisitVarDeclEPNS_7VarDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVarDecl(VarDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromImplicitParamDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 421,
   FQN="clang::RecursiveASTVisitor::WalkUpFromImplicitParamDecl", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromImplicitParamDeclEPNS_17ImplicitParamDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromImplicitParamDeclEPNS_17ImplicitParamDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromImplicitParamDecl(ImplicitParamDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromVarDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitImplicitParamDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitImplicitParamDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 421,
   FQN="clang::RecursiveASTVisitor::VisitImplicitParamDecl", NM="_ZN5clang19RecursiveASTVisitor22VisitImplicitParamDeclEPNS_17ImplicitParamDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitImplicitParamDeclEPNS_17ImplicitParamDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitImplicitParamDecl(ImplicitParamDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPCapturedExprDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 427,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPCapturedExprDecl", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPCapturedExprDeclEPNS_19OMPCapturedExprDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromOMPCapturedExprDeclEPNS_19OMPCapturedExprDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPCapturedExprDecl(OMPCapturedExprDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromVarDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPCapturedExprDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPCapturedExprDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 427,
   FQN="clang::RecursiveASTVisitor::VisitOMPCapturedExprDecl", NM="_ZN5clang19RecursiveASTVisitor24VisitOMPCapturedExprDeclEPNS_19OMPCapturedExprDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitOMPCapturedExprDeclEPNS_19OMPCapturedExprDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPCapturedExprDecl(OMPCapturedExprDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromParmVarDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 433,
   FQN="clang::RecursiveASTVisitor::WalkUpFromParmVarDecl", NM="_ZN5clang19RecursiveASTVisitor21WalkUpFromParmVarDeclEPNS_11ParmVarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21WalkUpFromParmVarDeclEPNS_11ParmVarDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromParmVarDecl(ParmVarDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromVarDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitParmVarDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitParmVarDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 433,
   FQN="clang::RecursiveASTVisitor::VisitParmVarDecl", NM="_ZN5clang19RecursiveASTVisitor16VisitParmVarDeclEPNS_11ParmVarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitParmVarDeclEPNS_11ParmVarDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitParmVarDecl(ParmVarDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromVarTemplateSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 439,
   FQN="clang::RecursiveASTVisitor::WalkUpFromVarTemplateSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor39WalkUpFromVarTemplateSpecializationDeclEPNS_29VarTemplateSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor39WalkUpFromVarTemplateSpecializationDeclEPNS_29VarTemplateSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromVarTemplateSpecializationDecl(VarTemplateSpecializationDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromVarDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitVarTemplateSpecializationDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVarTemplateSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 439,
   FQN="clang::RecursiveASTVisitor::VisitVarTemplateSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor34VisitVarTemplateSpecializationDeclEPNS_29VarTemplateSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34VisitVarTemplateSpecializationDeclEPNS_29VarTemplateSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVarTemplateSpecializationDecl(VarTemplateSpecializationDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromVarTemplatePartialSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 443,
   FQN="clang::RecursiveASTVisitor::WalkUpFromVarTemplatePartialSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor46WalkUpFromVarTemplatePartialSpecializationDeclEPNS_36VarTemplatePartialSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor46WalkUpFromVarTemplatePartialSpecializationDeclEPNS_36VarTemplatePartialSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromVarTemplatePartialSpecializationDecl(VarTemplatePartialSpecializationDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromVarTemplateSpecializationDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitVarTemplatePartialSpecializationDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitVarTemplatePartialSpecializationDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 443,
   FQN="clang::RecursiveASTVisitor::VisitVarTemplatePartialSpecializationDecl", NM="_ZN5clang19RecursiveASTVisitor41VisitVarTemplatePartialSpecializationDeclEPNS_36VarTemplatePartialSpecializationDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor41VisitVarTemplatePartialSpecializationDeclEPNS_36VarTemplatePartialSpecializationDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitVarTemplatePartialSpecializationDecl(VarTemplatePartialSpecializationDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromEnumConstantDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 461,
   FQN="clang::RecursiveASTVisitor::WalkUpFromEnumConstantDecl", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromEnumConstantDeclEPNS_16EnumConstantDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromEnumConstantDeclEPNS_16EnumConstantDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromEnumConstantDecl(EnumConstantDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromValueDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitEnumConstantDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitEnumConstantDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 461,
   FQN="clang::RecursiveASTVisitor::VisitEnumConstantDecl", NM="_ZN5clang19RecursiveASTVisitor21VisitEnumConstantDeclEPNS_16EnumConstantDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitEnumConstantDeclEPNS_16EnumConstantDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitEnumConstantDecl(EnumConstantDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromIndirectFieldDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 467,
   FQN="clang::RecursiveASTVisitor::WalkUpFromIndirectFieldDecl", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromIndirectFieldDeclEPNS_17IndirectFieldDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromIndirectFieldDeclEPNS_17IndirectFieldDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromIndirectFieldDecl(IndirectFieldDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromValueDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitIndirectFieldDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitIndirectFieldDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 467,
   FQN="clang::RecursiveASTVisitor::VisitIndirectFieldDecl", NM="_ZN5clang19RecursiveASTVisitor22VisitIndirectFieldDeclEPNS_17IndirectFieldDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitIndirectFieldDeclEPNS_17IndirectFieldDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitIndirectFieldDecl(IndirectFieldDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPDeclareReductionDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 473,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPDeclareReductionDecl", NM="_ZN5clang19RecursiveASTVisitor33WalkUpFromOMPDeclareReductionDeclEPNS_23OMPDeclareReductionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor33WalkUpFromOMPDeclareReductionDeclEPNS_23OMPDeclareReductionDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPDeclareReductionDecl(OMPDeclareReductionDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromValueDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPDeclareReductionDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDeclareReductionDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 473,
   FQN="clang::RecursiveASTVisitor::VisitOMPDeclareReductionDecl", NM="_ZN5clang19RecursiveASTVisitor28VisitOMPDeclareReductionDeclEPNS_23OMPDeclareReductionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitOMPDeclareReductionDeclEPNS_23OMPDeclareReductionDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPDeclareReductionDecl(OMPDeclareReductionDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromUnresolvedUsingValueDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 479,
   FQN="clang::RecursiveASTVisitor::WalkUpFromUnresolvedUsingValueDecl", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromUnresolvedUsingValueDeclEPNS_24UnresolvedUsingValueDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromUnresolvedUsingValueDeclEPNS_24UnresolvedUsingValueDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromUnresolvedUsingValueDecl(UnresolvedUsingValueDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromValueDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitUnresolvedUsingValueDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitUnresolvedUsingValueDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 479,
   FQN="clang::RecursiveASTVisitor::VisitUnresolvedUsingValueDecl", NM="_ZN5clang19RecursiveASTVisitor29VisitUnresolvedUsingValueDeclEPNS_24UnresolvedUsingValueDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitUnresolvedUsingValueDeclEPNS_24UnresolvedUsingValueDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitUnresolvedUsingValueDecl(UnresolvedUsingValueDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromOMPThreadPrivateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 493,
   FQN="clang::RecursiveASTVisitor::WalkUpFromOMPThreadPrivateDecl", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPThreadPrivateDeclEPNS_20OMPThreadPrivateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromOMPThreadPrivateDeclEPNS_20OMPThreadPrivateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromOMPThreadPrivateDecl(OMPThreadPrivateDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPThreadPrivateDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPThreadPrivateDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 493,
   FQN="clang::RecursiveASTVisitor::VisitOMPThreadPrivateDecl", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPThreadPrivateDeclEPNS_20OMPThreadPrivateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPThreadPrivateDeclEPNS_20OMPThreadPrivateDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitOMPThreadPrivateDecl(OMPThreadPrivateDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromObjCPropertyImplDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 499,
   FQN="clang::RecursiveASTVisitor::WalkUpFromObjCPropertyImplDecl", NM="_ZN5clang19RecursiveASTVisitor30WalkUpFromObjCPropertyImplDeclEPNS_20ObjCPropertyImplDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30WalkUpFromObjCPropertyImplDeclEPNS_20ObjCPropertyImplDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromObjCPropertyImplDecl(ObjCPropertyImplDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitObjCPropertyImplDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitObjCPropertyImplDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 499,
   FQN="clang::RecursiveASTVisitor::VisitObjCPropertyImplDecl", NM="_ZN5clang19RecursiveASTVisitor25VisitObjCPropertyImplDeclEPNS_20ObjCPropertyImplDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitObjCPropertyImplDeclEPNS_20ObjCPropertyImplDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitObjCPropertyImplDecl(ObjCPropertyImplDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPragmaCommentDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 505,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPragmaCommentDecl", NM="_ZN5clang19RecursiveASTVisitor27WalkUpFromPragmaCommentDeclEPNS_17PragmaCommentDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor27WalkUpFromPragmaCommentDeclEPNS_17PragmaCommentDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPragmaCommentDecl(PragmaCommentDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPragmaCommentDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPragmaCommentDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 505,
   FQN="clang::RecursiveASTVisitor::VisitPragmaCommentDecl", NM="_ZN5clang19RecursiveASTVisitor22VisitPragmaCommentDeclEPNS_17PragmaCommentDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitPragmaCommentDeclEPNS_17PragmaCommentDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPragmaCommentDecl(PragmaCommentDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromPragmaDetectMismatchDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 511,
   FQN="clang::RecursiveASTVisitor::WalkUpFromPragmaDetectMismatchDecl", NM="_ZN5clang19RecursiveASTVisitor34WalkUpFromPragmaDetectMismatchDeclEPNS_24PragmaDetectMismatchDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34WalkUpFromPragmaDetectMismatchDeclEPNS_24PragmaDetectMismatchDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromPragmaDetectMismatchDecl(PragmaDetectMismatchDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitPragmaDetectMismatchDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitPragmaDetectMismatchDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 511,
   FQN="clang::RecursiveASTVisitor::VisitPragmaDetectMismatchDecl", NM="_ZN5clang19RecursiveASTVisitor29VisitPragmaDetectMismatchDeclEPNS_24PragmaDetectMismatchDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29VisitPragmaDetectMismatchDeclEPNS_24PragmaDetectMismatchDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitPragmaDetectMismatchDecl(PragmaDetectMismatchDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromStaticAssertDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 517,
   FQN="clang::RecursiveASTVisitor::WalkUpFromStaticAssertDecl", NM="_ZN5clang19RecursiveASTVisitor26WalkUpFromStaticAssertDeclEPNS_16StaticAssertDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26WalkUpFromStaticAssertDeclEPNS_16StaticAssertDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromStaticAssertDecl(StaticAssertDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitStaticAssertDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitStaticAssertDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 517,
   FQN="clang::RecursiveASTVisitor::VisitStaticAssertDecl", NM="_ZN5clang19RecursiveASTVisitor21VisitStaticAssertDeclEPNS_16StaticAssertDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitStaticAssertDeclEPNS_16StaticAssertDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitStaticAssertDecl(StaticAssertDecl /*P*/ D) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::WalkUpFromTranslationUnitDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 523,
   FQN="clang::RecursiveASTVisitor::WalkUpFromTranslationUnitDecl", NM="_ZN5clang19RecursiveASTVisitor29WalkUpFromTranslationUnitDeclEPNS_19TranslationUnitDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor29WalkUpFromTranslationUnitDeclEPNS_19TranslationUnitDeclE")
  //</editor-fold>
  public default/*interface*/ boolean WalkUpFromTranslationUnitDecl(TranslationUnitDecl /*P*/ D) {
    do {
      if (!getDerived().WalkUpFromDecl(D)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitTranslationUnitDecl(D)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitTranslationUnitDecl">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/build/tools/clang/include/clang/AST/DeclNodes.inc", line = 523,
   FQN="clang::RecursiveASTVisitor::VisitTranslationUnitDecl", NM="_ZN5clang19RecursiveASTVisitor24VisitTranslationUnitDeclEPNS_19TranslationUnitDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitTranslationUnitDeclEPNS_19TranslationUnitDeclE")
  //</editor-fold>
  public default/*interface*/ boolean VisitTranslationUnitDecl(TranslationUnitDecl /*P*/ D) {
    return true;
  }

/*private:*/
  // These are helper methods used by more than one Traverse* method.
  
  // A helper method for TemplateDecl's children.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateParameterListHelper">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1517,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateParameterListHelper", NM="_ZN5clang19RecursiveASTVisitor35TraverseTemplateParameterListHelperEPNS_21TemplateParameterListE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor35TraverseTemplateParameterListHelperEPNS_21TemplateParameterListE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseTemplateParameterListHelper(TemplateParameterList /*P*/ TPL) {
    if ((TPL != null)) {
      for (type$ptr<NamedDecl /*P*/ /*P*/ > I = $tryClone(TPL.begin()), /*P*/ /*P*/ E = $tryClone(TPL.end());
           $noteq_ptr(I, E); I.$preInc()) {
        do {
          if (!getDerived().TraverseDecl(I.$star())) {
            return false;
          }
        } while (false);
      }
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateInstantiations">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1529,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateInstantiations", NM="_ZN5clang19RecursiveASTVisitor30TraverseTemplateInstantiationsEPNS_17ClassTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseTemplateInstantiationsEPNS_17ClassTemplateDeclE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseTemplateInstantiations(ClassTemplateDecl /*P*/ D) {
    for (ClassTemplateSpecializationDecl /*P*/ SD : D.specializations()) {
      for (TagDecl /*P*/ RD : SD.redeclarable_redecls()) {
        // We don't want to visit injected-class-names in this traversal.
        if (cast_CXXRecordDecl(RD).isInjectedClassName()) {
          continue;
        }
        switch (cast_ClassTemplateSpecializationDecl(RD).getSpecializationKind()) {
         case TSK_Undeclared:
         case TSK_ImplicitInstantiation:
          // Visit the implicit instantiations with the requested pattern.
          do {
            if (!getDerived().TraverseDecl(RD)) {
              return false;
            }
          } while (false);
          break;
         case TSK_ExplicitInstantiationDeclaration:
         case TSK_ExplicitInstantiationDefinition:
         case TSK_ExplicitSpecialization:
          
          // We don't need to do anything on an explicit instantiation
          // or explicit specialization because there will be an explicit
          // node for it elsewhere.
          break;
        }
      }
    }
    
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateInstantiations">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1560,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateInstantiations", NM="_ZN5clang19RecursiveASTVisitor30TraverseTemplateInstantiationsEPNS_15VarTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseTemplateInstantiationsEPNS_15VarTemplateDeclE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseTemplateInstantiations(VarTemplateDecl /*P*/ D) {
    for (VarTemplateSpecializationDecl /*P*/ SD : D.specializations()) {
      for (VarDecl /*P*/ RD : SD.redeclarable_redecls()) {
        switch (cast_VarTemplateSpecializationDecl(RD).getSpecializationKind()) {
         case TSK_Undeclared:
         case TSK_ImplicitInstantiation:
          do {
            if (!getDerived().TraverseDecl(RD)) {
              return false;
            }
          } while (false);
          break;
         case TSK_ExplicitInstantiationDeclaration:
         case TSK_ExplicitInstantiationDefinition:
         case TSK_ExplicitSpecialization:
          break;
        }
      }
    }
    
    return true;
  }

  
  // A helper method for traversing the instantiations of a
  // function while skipping its specializations.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateInstantiations">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1585,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateInstantiations", NM="_ZN5clang19RecursiveASTVisitor30TraverseTemplateInstantiationsEPNS_20FunctionTemplateDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseTemplateInstantiationsEPNS_20FunctionTemplateDeclE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseTemplateInstantiations(FunctionTemplateDecl /*P*/ D) {
    for (FunctionDecl /*P*/ FD : D.specializations()) {
      for (FunctionDecl /*P*/ RD : FD.redeclarable_redecls()) {
        switch (RD.getTemplateSpecializationKind()) {
         case TSK_Undeclared:
         case TSK_ImplicitInstantiation:
          // We don't know what kind of FunctionDecl this is.
          do {
            if (!getDerived().TraverseDecl(RD)) {
              return false;
            }
          } while (false);
          break;
         case TSK_ExplicitInstantiationDeclaration:
         case TSK_ExplicitInstantiationDefinition:
          
          // FIXME: For now traverse explicit instantiations here. Change that
          // once they are represented as dedicated nodes in the AST.
          do {
            if (!getDerived().TraverseDecl(RD)) {
              return false;
            }
          } while (false);
          break;
         case TSK_ExplicitSpecialization:
          break;
        }
      }
    }
    
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseTemplateArgumentLocsHelper">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1751,
   FQN="clang::RecursiveASTVisitor::TraverseTemplateArgumentLocsHelper", NM="_ZN5clang19RecursiveASTVisitor34TraverseTemplateArgumentLocsHelperEPKNS_19TemplateArgumentLocEj",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor34TraverseTemplateArgumentLocsHelperEPKNS_19TemplateArgumentLocEj")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseTemplateArgumentLocsHelper(/*const*/type$ptr<TemplateArgumentLoc/*P*/> TAL, /*uint*/int Count) {
    for (/*uint*/int I = 0; $less_uint(I, Count); ++I) {
      do {
        if (!getDerived().TraverseTemplateArgumentLoc(TAL.$at(I))) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseArrayTypeLocHelper">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1129,
   FQN="clang::RecursiveASTVisitor::TraverseArrayTypeLocHelper", NM="_ZN5clang19RecursiveASTVisitor26TraverseArrayTypeLocHelperENS_12ArrayTypeLocE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26TraverseArrayTypeLocHelperENS_12ArrayTypeLocE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseArrayTypeLocHelper(ArrayTypeLoc TL) {
    // This isn't available for ArrayType, but is for the ArrayTypeLoc.
    do {
      if (!getDerived().TraverseStmt(TL.getSizeExpr())) {
        return false;
      }
    } while (false);
    return true;
  }

  
  // Helper methods for RecordDecl and its children.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseRecordHelper">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1699,
   FQN="clang::RecursiveASTVisitor::TraverseRecordHelper", NM="_ZN5clang19RecursiveASTVisitor20TraverseRecordHelperEPNS_10RecordDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20TraverseRecordHelperEPNS_10RecordDeclE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseRecordHelper(RecordDecl /*P*/ D) {
    // We shouldn't traverse D->getTypeForDecl(); it's a result of
    // declaring the type, not something that was written in the source.
    do {
      if (!getDerived().TraverseNestedNameSpecifierLoc(D.getQualifierLoc())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseCXXRecordHelper">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1708,
   FQN="clang::RecursiveASTVisitor::TraverseCXXRecordHelper", NM="_ZN5clang19RecursiveASTVisitor23TraverseCXXRecordHelperEPNS_13CXXRecordDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23TraverseCXXRecordHelperEPNS_13CXXRecordDeclE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseCXXRecordHelper(CXXRecordDecl /*P*/ D) {
    if (!TraverseRecordHelper(D)) {
      return false;
    }
    if (D.isCompleteDefinition()) {
      for (final /*const*/ CXXBaseSpecifier /*&*/ I : D.bases()) {
        do {
          if (!getDerived().TraverseTypeLoc(I.getTypeSourceInfo().getTypeLoc())) {
            return false;
          }
        } while (false);
      }
      // We don't traverse the friends or the conversions, as they are
      // already in decls_begin()/decls_end().
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDeclaratorHelper">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1796,
   FQN="clang::RecursiveASTVisitor::TraverseDeclaratorHelper", NM="_ZN5clang19RecursiveASTVisitor24TraverseDeclaratorHelperEPNS_14DeclaratorDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseDeclaratorHelperEPNS_14DeclaratorDeclE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseDeclaratorHelper(DeclaratorDecl /*P*/ D) {
    do {
      if (!getDerived().TraverseNestedNameSpecifierLoc(D.getQualifierLoc())) {
        return false;
      }
    } while (false);
    if ((D.getTypeSourceInfo() != null)) {
      do {
        if (!getDerived().TraverseTypeLoc(D.getTypeSourceInfo().getTypeLoc())) {
          return false;
        }
      } while (false);
    } else {
      do {
        if (!getDerived().TraverseType(D.getType())) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  
  // ----------------- Decl traversal -----------------
  //
  // For a Decl, we automate (in the DEF_TRAVERSE_DECL macro) traversing
  // the children that come from the DeclContext associated with it.
  // Therefore each Traverse* only needs to worry about children other
  // than those.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseDeclContextHelper">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1295,
   FQN="clang::RecursiveASTVisitor::TraverseDeclContextHelper", NM="_ZN5clang19RecursiveASTVisitor25TraverseDeclContextHelperEPNS_11DeclContextE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25TraverseDeclContextHelperEPNS_11DeclContextE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseDeclContextHelper(DeclContext /*P*/ DC) {
    if (!(DC != null)) {
      return true;
    }
    
    for (Decl /*P*/ Child : DC.decls()) {
      // BlockDecls and CapturedDecls are traversed through BlockExprs and
      // CapturedStmts respectively.
      if (!isa_BlockDecl(Child) && !isa_CapturedDecl(Child)) {
        do {
          if (!getDerived().TraverseDecl(Child)) {
            return false;
          }
        } while (false);
      }
    }
    
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseFunctionHelper">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1830,
   FQN="clang::RecursiveASTVisitor::TraverseFunctionHelper", NM="_ZN5clang19RecursiveASTVisitor22TraverseFunctionHelperEPNS_12FunctionDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22TraverseFunctionHelperEPNS_12FunctionDeclE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseFunctionHelper(FunctionDecl /*P*/ D) {
    do {
      if (!getDerived().TraverseNestedNameSpecifierLoc(D.getQualifierLoc())) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().TraverseDeclarationNameInfo(D.getNameInfo())) {
        return false;
      }
    } while (false);
    {
      
      // If we're an explicit template specialization, iterate over the
      // template args that were explicitly specified.  If we were doing
      // this in typing order, we'd do it between the return type and
      // the function args, but both are handled by the FunctionTypeLoc
      // above, so we have to choose one side.  I've decided to do before.
      /*const*/ FunctionTemplateSpecializationInfo /*P*/ FTSI = D.getTemplateSpecializationInfo();
      if ((FTSI != null)) {
        if (FTSI.getTemplateSpecializationKind() != TemplateSpecializationKind.TSK_Undeclared
           && FTSI.getTemplateSpecializationKind() != TemplateSpecializationKind.TSK_ImplicitInstantiation) {
          {
            // A specialization might not have explicit template arguments if it has
            // a templated return type and concrete arguments.
            /*const*/ ASTTemplateArgumentListInfo /*P*/ TALI = FTSI.TemplateArgumentsAsWritten;
            if ((TALI != null)) {
              do {
                if (!getDerived().TraverseTemplateArgumentLocsHelper(TALI.getTemplateArgs(), TALI.NumTemplateArgs)) {
                  return false;
                }
              } while (false);
            }
          }
        }
      }
    }
    {
      
      // Visit the function type itself, which can be either
      // FunctionNoProtoType or FunctionProtoType, or a typedef.  This
      // also covers the return type and the function parameters,
      // including exception specifications.
      TypeSourceInfo /*P*/ TSI = D.getTypeSourceInfo();
      if ((TSI != null)) {
        do {
          if (!getDerived().TraverseTypeLoc(TSI.getTypeLoc())) {
            return false;
          }
        } while (false);
      } else if (getDerived().shouldVisitImplicitCode()) {
        // Visit parameter variable declarations of the implicit function
        // if the traverser is visiting implicit code. Parameter variable
        // declarations do not have valid TypeSourceInfo, so to visit them
        // we need to traverse the declarations explicitly.
        for (ParmVarDecl /*P*/ Parameter : D.parameters()) {
          do {
            if (!getDerived().TraverseDecl(Parameter)) {
              return false;
            }
          } while (false);
        }
      }
    }
    {
      
      CXXConstructorDecl /*P*/ Ctor = dyn_cast_CXXConstructorDecl(D);
      if ((Ctor != null)) {
        // Constructor initializers.
        for (CXXCtorInitializer /*P*/ I : Ctor.inits()) {
          do {
            if (!getDerived().TraverseConstructorInitializer(I)) {
              return false;
            }
          } while (false);
        }
      }
    }
    if (D.isThisDeclarationADefinition()) {
      do { // Function body.
        if (!getDerived().TraverseStmt(D.getBody())) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseVarHelper">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 1920,
   FQN="clang::RecursiveASTVisitor::TraverseVarHelper", NM="_ZN5clang19RecursiveASTVisitor17TraverseVarHelperEPNS_7VarDeclE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseVarHelperEPNS_7VarDeclE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseVarHelper(VarDecl /*P*/ D) {
    do {
      if (!getDerived().TraverseDeclaratorHelper(D)) {
        return false;
      }
    } while (false);
    // Default params are taken care of when we traverse the ParmVarDecl.
    if (!isa_ParmVarDecl(D)
       && (!D.isCXXForRangeDecl() || getDerived().shouldVisitImplicitCode())) {
      do {
        if (!getDerived().TraverseStmt(D.getInit())) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  
  // OpenMP directives.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPExecutableDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2449,
   FQN="clang::RecursiveASTVisitor::TraverseOMPExecutableDirective", NM="_ZN5clang19RecursiveASTVisitor30TraverseOMPExecutableDirectiveEPNS_22OMPExecutableDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor30TraverseOMPExecutableDirectiveEPNS_22OMPExecutableDirectiveE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseOMPExecutableDirective(OMPExecutableDirective /*P*/ S) {
    for (OMPClause /*P*/ C : S.clauses()) {
      do {
        if (!getDerived().TraverseOMPClause(C)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPLoopDirective">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2458,
   FQN="clang::RecursiveASTVisitor::TraverseOMPLoopDirective", NM="_ZN5clang19RecursiveASTVisitor24TraverseOMPLoopDirectiveEPNS_16OMPLoopDirectiveE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24TraverseOMPLoopDirectiveEPNS_16OMPLoopDirectiveE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseOMPLoopDirective(OMPLoopDirective /*P*/ S) {
    return TraverseOMPExecutableDirective(S);
  }

  
  // OpenMP clauses.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::TraverseOMPClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2578,
   FQN="clang::RecursiveASTVisitor::TraverseOMPClause", NM="_ZN5clang19RecursiveASTVisitor17TraverseOMPClauseEPNS_9OMPClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17TraverseOMPClauseEPNS_9OMPClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean TraverseOMPClause(OMPClause /*P*/ C) {
    if (!(C != null)) {
      return true;
    }
    switch (C.getClauseKind()) {
     case OMPC_if:
      
      // OpenMP clauses.
      do {
        if (!getDerived().VisitOMPIfClause(((/*static_cast*/OMPIfClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_final:
      do {
        if (!getDerived().VisitOMPFinalClause(((/*static_cast*/OMPFinalClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_num_threads:
      do {
        if (!getDerived().VisitOMPNumThreadsClause(((/*static_cast*/OMPNumThreadsClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_safelen:
      do {
        if (!getDerived().VisitOMPSafelenClause(((/*static_cast*/OMPSafelenClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_simdlen:
      do {
        if (!getDerived().VisitOMPSimdlenClause(((/*static_cast*/OMPSimdlenClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_collapse:
      do {
        if (!getDerived().VisitOMPCollapseClause(((/*static_cast*/OMPCollapseClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_default:
      do {
        if (!getDerived().VisitOMPDefaultClause(((/*static_cast*/OMPDefaultClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_private:
      do {
        if (!getDerived().VisitOMPPrivateClause(((/*static_cast*/OMPPrivateClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_firstprivate:
      do {
        if (!getDerived().VisitOMPFirstprivateClause(((/*static_cast*/OMPFirstprivateClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_lastprivate:
      do {
        if (!getDerived().VisitOMPLastprivateClause(((/*static_cast*/OMPLastprivateClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_shared:
      do {
        if (!getDerived().VisitOMPSharedClause(((/*static_cast*/OMPSharedClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_reduction:
      do {
        if (!getDerived().VisitOMPReductionClause(((/*static_cast*/OMPReductionClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_linear:
      do {
        if (!getDerived().VisitOMPLinearClause(((/*static_cast*/OMPLinearClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_aligned:
      do {
        if (!getDerived().VisitOMPAlignedClause(((/*static_cast*/OMPAlignedClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_copyin:
      do {
        if (!getDerived().VisitOMPCopyinClause(((/*static_cast*/OMPCopyinClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_copyprivate:
      do {
        if (!getDerived().VisitOMPCopyprivateClause(((/*static_cast*/OMPCopyprivateClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_proc_bind:
      do {
        if (!getDerived().VisitOMPProcBindClause(((/*static_cast*/OMPProcBindClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_schedule:
      do {
        if (!getDerived().VisitOMPScheduleClause(((/*static_cast*/OMPScheduleClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_ordered:
      do {
        if (!getDerived().VisitOMPOrderedClause(((/*static_cast*/OMPOrderedClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_nowait:
      do {
        if (!getDerived().VisitOMPNowaitClause(((/*static_cast*/OMPNowaitClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_untied:
      do {
        if (!getDerived().VisitOMPUntiedClause(((/*static_cast*/OMPUntiedClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_mergeable:
      do {
        if (!getDerived().VisitOMPMergeableClause(((/*static_cast*/OMPMergeableClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_flush:
      do {
        if (!getDerived().VisitOMPFlushClause(((/*static_cast*/OMPFlushClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_read:
      do {
        if (!getDerived().VisitOMPReadClause(((/*static_cast*/OMPReadClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_write:
      do {
        if (!getDerived().VisitOMPWriteClause(((/*static_cast*/OMPWriteClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_update:
      do {
        if (!getDerived().VisitOMPUpdateClause(((/*static_cast*/OMPUpdateClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_capture:
      do {
        if (!getDerived().VisitOMPCaptureClause(((/*static_cast*/OMPCaptureClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_seq_cst:
      do {
        if (!getDerived().VisitOMPSeqCstClause(((/*static_cast*/OMPSeqCstClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_depend:
      do {
        if (!getDerived().VisitOMPDependClause(((/*static_cast*/OMPDependClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_device:
      do {
        if (!getDerived().VisitOMPDeviceClause(((/*static_cast*/OMPDeviceClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_threads:
      do {
        if (!getDerived().VisitOMPThreadsClause(((/*static_cast*/OMPThreadsClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_simd:
      do {
        if (!getDerived().VisitOMPSIMDClause(((/*static_cast*/OMPSIMDClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_map:
      do {
        if (!getDerived().VisitOMPMapClause(((/*static_cast*/OMPMapClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_num_teams:
      do {
        if (!getDerived().VisitOMPNumTeamsClause(((/*static_cast*/OMPNumTeamsClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_thread_limit:
      do {
        if (!getDerived().VisitOMPThreadLimitClause(((/*static_cast*/OMPThreadLimitClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_priority:
      do {
        if (!getDerived().VisitOMPPriorityClause(((/*static_cast*/OMPPriorityClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_grainsize:
      do {
        if (!getDerived().VisitOMPGrainsizeClause(((/*static_cast*/OMPGrainsizeClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_nogroup:
      do {
        if (!getDerived().VisitOMPNogroupClause(((/*static_cast*/OMPNogroupClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_num_tasks:
      do {
        if (!getDerived().VisitOMPNumTasksClause(((/*static_cast*/OMPNumTasksClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_hint:
      do {
        if (!getDerived().VisitOMPHintClause(((/*static_cast*/OMPHintClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_dist_schedule:
      do {
        if (!getDerived().VisitOMPDistScheduleClause(((/*static_cast*/OMPDistScheduleClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_defaultmap:
      do {
        if (!getDerived().VisitOMPDefaultmapClause(((/*static_cast*/OMPDefaultmapClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_to:
      do {
        if (!getDerived().VisitOMPToClause(((/*static_cast*/OMPToClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_from:
      do {
        if (!getDerived().VisitOMPFromClause(((/*static_cast*/OMPFromClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_use_device_ptr:
      do {
        if (!getDerived().VisitOMPUseDevicePtrClause(((/*static_cast*/OMPUseDevicePtrClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_is_device_ptr:
      do {
        if (!getDerived().VisitOMPIsDevicePtrClause(((/*static_cast*/OMPIsDevicePtrClause /*P*/ )(C)))) {
          return false;
        }
      } while (false);
      break;
     case OMPC_threadprivate:
     case OMPC_uniform:
     case OMPC_unknown:
      break;
    }
    return true;
  }

  
  // OpenMP clauses.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPIfClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2611,
   FQN="clang::RecursiveASTVisitor::VisitOMPIfClause", NM="_ZN5clang19RecursiveASTVisitor16VisitOMPIfClauseEPNS_11OMPIfClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitOMPIfClauseEPNS_11OMPIfClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPIfClause(OMPIfClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getCondition())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPFinalClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2617,
   FQN="clang::RecursiveASTVisitor::VisitOMPFinalClause", NM="_ZN5clang19RecursiveASTVisitor19VisitOMPFinalClauseEPNS_14OMPFinalClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitOMPFinalClauseEPNS_14OMPFinalClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPFinalClause(OMPFinalClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getCondition())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPNumThreadsClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2623,
   FQN="clang::RecursiveASTVisitor::VisitOMPNumThreadsClause", NM="_ZN5clang19RecursiveASTVisitor24VisitOMPNumThreadsClauseEPNS_19OMPNumThreadsClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitOMPNumThreadsClauseEPNS_19OMPNumThreadsClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPNumThreadsClause(OMPNumThreadsClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getNumThreads())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPSafelenClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2630,
   FQN="clang::RecursiveASTVisitor::VisitOMPSafelenClause", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPSafelenClauseEPNS_16OMPSafelenClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPSafelenClauseEPNS_16OMPSafelenClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPSafelenClause(OMPSafelenClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getSafelen())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPSimdlenClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2636,
   FQN="clang::RecursiveASTVisitor::VisitOMPSimdlenClause", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPSimdlenClauseEPNS_16OMPSimdlenClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPSimdlenClauseEPNS_16OMPSimdlenClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPSimdlenClause(OMPSimdlenClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getSimdlen())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPCollapseClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2642,
   FQN="clang::RecursiveASTVisitor::VisitOMPCollapseClause", NM="_ZN5clang19RecursiveASTVisitor22VisitOMPCollapseClauseEPNS_17OMPCollapseClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitOMPCollapseClauseEPNS_17OMPCollapseClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPCollapseClause(OMPCollapseClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getNumForLoops())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDefaultClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2649,
   FQN="clang::RecursiveASTVisitor::VisitOMPDefaultClause", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPDefaultClauseEPNS_16OMPDefaultClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPDefaultClauseEPNS_16OMPDefaultClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPDefaultClause(OMPDefaultClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPPrivateClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2738,
   FQN="clang::RecursiveASTVisitor::VisitOMPPrivateClause", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPPrivateClauseEPNS_16OMPPrivateClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPPrivateClauseEPNS_16OMPPrivateClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPPrivateClause(OMPPrivateClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    for (Expr /*P*/ E : C.private_copies()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPFirstprivateClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2747,
   FQN="clang::RecursiveASTVisitor::VisitOMPFirstprivateClause", NM="_ZN5clang19RecursiveASTVisitor26VisitOMPFirstprivateClauseEPNS_21OMPFirstprivateClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitOMPFirstprivateClauseEPNS_21OMPFirstprivateClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPFirstprivateClause(OMPFirstprivateClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPClauseWithPreInit(C)) {
        return false;
      }
    } while (false);
    for (Expr /*P*/ E : C.private_copies()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.inits()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPLastprivateClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2761,
   FQN="clang::RecursiveASTVisitor::VisitOMPLastprivateClause", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPLastprivateClauseEPNS_20OMPLastprivateClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPLastprivateClauseEPNS_20OMPLastprivateClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPLastprivateClause(OMPLastprivateClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPClauseWithPostUpdate(C)) {
        return false;
      }
    } while (false);
    for (Expr /*P*/ E : C.private_copies()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.source_exprs()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.destination_exprs()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.assignment_ops()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPSharedClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2781,
   FQN="clang::RecursiveASTVisitor::VisitOMPSharedClause", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPSharedClauseEPNS_15OMPSharedClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPSharedClauseEPNS_15OMPSharedClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPSharedClause(OMPSharedClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPReductionClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2846,
   FQN="clang::RecursiveASTVisitor::VisitOMPReductionClause", NM="_ZN5clang19RecursiveASTVisitor23VisitOMPReductionClauseEPNS_18OMPReductionClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitOMPReductionClauseEPNS_18OMPReductionClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPReductionClause(OMPReductionClause /*P*/ C) {
    do {
      if (!getDerived().TraverseNestedNameSpecifierLoc(C.getQualifierLoc())) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().TraverseDeclarationNameInfo(C.getNameInfo())) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPClauseWithPostUpdate(C)) {
        return false;
      }
    } while (false);
    for (Expr /*P*/ E : C.privates()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.lhs_exprs()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.rhs_exprs()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.reduction_ops()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPLinearClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2787,
   FQN="clang::RecursiveASTVisitor::VisitOMPLinearClause", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPLinearClauseEPNS_15OMPLinearClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPLinearClauseEPNS_15OMPLinearClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPLinearClause(OMPLinearClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getStep())) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().TraverseStmt(C.getCalcStep())) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPClauseWithPostUpdate(C)) {
        return false;
      }
    } while (false);
    for (Expr /*P*/ E : C.privates()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.inits()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.updates()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.finals()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPAlignedClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2808,
   FQN="clang::RecursiveASTVisitor::VisitOMPAlignedClause", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPAlignedClauseEPNS_16OMPAlignedClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPAlignedClauseEPNS_16OMPAlignedClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPAlignedClause(OMPAlignedClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getAlignment())) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPCopyinClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2815,
   FQN="clang::RecursiveASTVisitor::VisitOMPCopyinClause", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPCopyinClauseEPNS_15OMPCopyinClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPCopyinClauseEPNS_15OMPCopyinClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPCopyinClause(OMPCopyinClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    for (Expr /*P*/ E : C.source_exprs()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.destination_exprs()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.assignment_ops()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPCopyprivateClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2830,
   FQN="clang::RecursiveASTVisitor::VisitOMPCopyprivateClause", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPCopyprivateClauseEPNS_20OMPCopyprivateClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPCopyprivateClauseEPNS_20OMPCopyprivateClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPCopyprivateClause(OMPCopyprivateClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    for (Expr /*P*/ E : C.source_exprs()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.destination_exprs()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    for (Expr /*P*/ E : C.assignment_ops()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPProcBindClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2654,
   FQN="clang::RecursiveASTVisitor::VisitOMPProcBindClause", NM="_ZN5clang19RecursiveASTVisitor22VisitOMPProcBindClauseEPNS_17OMPProcBindClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitOMPProcBindClauseEPNS_17OMPProcBindClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPProcBindClause(OMPProcBindClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPScheduleClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2659,
   FQN="clang::RecursiveASTVisitor::VisitOMPScheduleClause", NM="_ZN5clang19RecursiveASTVisitor22VisitOMPScheduleClauseEPNS_17OMPScheduleClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitOMPScheduleClauseEPNS_17OMPScheduleClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPScheduleClause(OMPScheduleClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseWithPreInit(C)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().TraverseStmt(C.getChunkSize())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPOrderedClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2667,
   FQN="clang::RecursiveASTVisitor::VisitOMPOrderedClause", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPOrderedClauseEPNS_16OMPOrderedClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPOrderedClauseEPNS_16OMPOrderedClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPOrderedClause(OMPOrderedClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getNumForLoops())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPNowaitClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2673,
   FQN="clang::RecursiveASTVisitor::VisitOMPNowaitClause", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPNowaitClauseEPNS_15OMPNowaitClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPNowaitClauseEPNS_15OMPNowaitClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPNowaitClause(OMPNowaitClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPUntiedClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2678,
   FQN="clang::RecursiveASTVisitor::VisitOMPUntiedClause", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPUntiedClauseEPNS_15OMPUntiedClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPUntiedClauseEPNS_15OMPUntiedClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPUntiedClause(OMPUntiedClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPMergeableClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2683,
   FQN="clang::RecursiveASTVisitor::VisitOMPMergeableClause", NM="_ZN5clang19RecursiveASTVisitor23VisitOMPMergeableClauseEPNS_18OMPMergeableClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitOMPMergeableClauseEPNS_18OMPMergeableClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPMergeableClause(OMPMergeableClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPFlushClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2868,
   FQN="clang::RecursiveASTVisitor::VisitOMPFlushClause", NM="_ZN5clang19RecursiveASTVisitor19VisitOMPFlushClauseEPNS_14OMPFlushClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitOMPFlushClauseEPNS_14OMPFlushClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPFlushClause(OMPFlushClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPReadClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2689,
   FQN="clang::RecursiveASTVisitor::VisitOMPReadClause", NM="_ZN5clang19RecursiveASTVisitor18VisitOMPReadClauseEPNS_13OMPReadClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitOMPReadClauseEPNS_13OMPReadClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPReadClause(OMPReadClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPWriteClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2694,
   FQN="clang::RecursiveASTVisitor::VisitOMPWriteClause", NM="_ZN5clang19RecursiveASTVisitor19VisitOMPWriteClauseEPNS_14OMPWriteClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor19VisitOMPWriteClauseEPNS_14OMPWriteClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPWriteClause(OMPWriteClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPUpdateClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2699,
   FQN="clang::RecursiveASTVisitor::VisitOMPUpdateClause", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPUpdateClauseEPNS_15OMPUpdateClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPUpdateClauseEPNS_15OMPUpdateClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPUpdateClause(OMPUpdateClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPCaptureClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2704,
   FQN="clang::RecursiveASTVisitor::VisitOMPCaptureClause", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPCaptureClauseEPNS_16OMPCaptureClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPCaptureClauseEPNS_16OMPCaptureClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPCaptureClause(OMPCaptureClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPSeqCstClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2709,
   FQN="clang::RecursiveASTVisitor::VisitOMPSeqCstClause", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPSeqCstClauseEPNS_15OMPSeqCstClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPSeqCstClauseEPNS_15OMPSeqCstClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPSeqCstClause(OMPSeqCstClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDependClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2874,
   FQN="clang::RecursiveASTVisitor::VisitOMPDependClause", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPDependClauseEPNS_15OMPDependClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPDependClauseEPNS_15OMPDependClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPDependClause(OMPDependClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDeviceClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2880,
   FQN="clang::RecursiveASTVisitor::VisitOMPDeviceClause", NM="_ZN5clang19RecursiveASTVisitor20VisitOMPDeviceClauseEPNS_15OMPDeviceClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor20VisitOMPDeviceClauseEPNS_15OMPDeviceClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPDeviceClause(OMPDeviceClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getDevice())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPThreadsClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2714,
   FQN="clang::RecursiveASTVisitor::VisitOMPThreadsClause", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPThreadsClauseEPNS_16OMPThreadsClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPThreadsClauseEPNS_16OMPThreadsClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPThreadsClause(OMPThreadsClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPSIMDClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2719,
   FQN="clang::RecursiveASTVisitor::VisitOMPSIMDClause", NM="_ZN5clang19RecursiveASTVisitor18VisitOMPSIMDClauseEPNS_13OMPSIMDClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitOMPSIMDClauseEPNS_13OMPSIMDClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPSIMDClause(OMPSIMDClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPMapClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2886,
   FQN="clang::RecursiveASTVisitor::VisitOMPMapClause", NM="_ZN5clang19RecursiveASTVisitor17VisitOMPMapClauseEPNS_12OMPMapClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor17VisitOMPMapClauseEPNS_12OMPMapClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPMapClause(OMPMapClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPNumTeamsClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2892,
   FQN="clang::RecursiveASTVisitor::VisitOMPNumTeamsClause", NM="_ZN5clang19RecursiveASTVisitor22VisitOMPNumTeamsClauseEPNS_17OMPNumTeamsClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitOMPNumTeamsClauseEPNS_17OMPNumTeamsClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPNumTeamsClause(OMPNumTeamsClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getNumTeams())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPThreadLimitClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2899,
   FQN="clang::RecursiveASTVisitor::VisitOMPThreadLimitClause", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPThreadLimitClauseEPNS_20OMPThreadLimitClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPThreadLimitClauseEPNS_20OMPThreadLimitClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPThreadLimitClause(OMPThreadLimitClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getThreadLimit())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPPriorityClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2906,
   FQN="clang::RecursiveASTVisitor::VisitOMPPriorityClause", NM="_ZN5clang19RecursiveASTVisitor22VisitOMPPriorityClauseEPNS_17OMPPriorityClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitOMPPriorityClauseEPNS_17OMPPriorityClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPPriorityClause(OMPPriorityClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getPriority())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPGrainsizeClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2913,
   FQN="clang::RecursiveASTVisitor::VisitOMPGrainsizeClause", NM="_ZN5clang19RecursiveASTVisitor23VisitOMPGrainsizeClauseEPNS_18OMPGrainsizeClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor23VisitOMPGrainsizeClauseEPNS_18OMPGrainsizeClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPGrainsizeClause(OMPGrainsizeClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getGrainsize())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPNogroupClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2724,
   FQN="clang::RecursiveASTVisitor::VisitOMPNogroupClause", NM="_ZN5clang19RecursiveASTVisitor21VisitOMPNogroupClauseEPNS_16OMPNogroupClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor21VisitOMPNogroupClauseEPNS_16OMPNogroupClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPNogroupClause(OMPNogroupClause /*P*/ $Prm0) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPNumTasksClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2920,
   FQN="clang::RecursiveASTVisitor::VisitOMPNumTasksClause", NM="_ZN5clang19RecursiveASTVisitor22VisitOMPNumTasksClauseEPNS_17OMPNumTasksClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor22VisitOMPNumTasksClauseEPNS_17OMPNumTasksClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPNumTasksClause(OMPNumTasksClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getNumTasks())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPHintClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2927,
   FQN="clang::RecursiveASTVisitor::VisitOMPHintClause", NM="_ZN5clang19RecursiveASTVisitor18VisitOMPHintClauseEPNS_13OMPHintClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitOMPHintClauseEPNS_13OMPHintClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPHintClause(OMPHintClause /*P*/ C) {
    do {
      if (!getDerived().TraverseStmt(C.getHint())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDistScheduleClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2933,
   FQN="clang::RecursiveASTVisitor::VisitOMPDistScheduleClause", NM="_ZN5clang19RecursiveASTVisitor26VisitOMPDistScheduleClauseEPNS_21OMPDistScheduleClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitOMPDistScheduleClauseEPNS_21OMPDistScheduleClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPDistScheduleClause(OMPDistScheduleClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseWithPreInit(C)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().TraverseStmt(C.getChunkSize())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPDefaultmapClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2941,
   FQN="clang::RecursiveASTVisitor::VisitOMPDefaultmapClause", NM="_ZN5clang19RecursiveASTVisitor24VisitOMPDefaultmapClauseEPNS_19OMPDefaultmapClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor24VisitOMPDefaultmapClauseEPNS_19OMPDefaultmapClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPDefaultmapClause(OMPDefaultmapClause /*P*/ C) {
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPToClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2947,
   FQN="clang::RecursiveASTVisitor::VisitOMPToClause", NM="_ZN5clang19RecursiveASTVisitor16VisitOMPToClauseEPNS_11OMPToClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16VisitOMPToClauseEPNS_11OMPToClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPToClause(OMPToClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPFromClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2953,
   FQN="clang::RecursiveASTVisitor::VisitOMPFromClause", NM="_ZN5clang19RecursiveASTVisitor18VisitOMPFromClauseEPNS_13OMPFromClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor18VisitOMPFromClauseEPNS_13OMPFromClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPFromClause(OMPFromClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPUseDevicePtrClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2959,
   FQN="clang::RecursiveASTVisitor::VisitOMPUseDevicePtrClause", NM="_ZN5clang19RecursiveASTVisitor26VisitOMPUseDevicePtrClauseEPNS_21OMPUseDevicePtrClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor26VisitOMPUseDevicePtrClauseEPNS_21OMPUseDevicePtrClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPUseDevicePtrClause(OMPUseDevicePtrClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPIsDevicePtrClause">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2966,
   FQN="clang::RecursiveASTVisitor::VisitOMPIsDevicePtrClause", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPIsDevicePtrClauseEPNS_20OMPIsDevicePtrClauseE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPIsDevicePtrClauseEPNS_20OMPIsDevicePtrClauseE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPIsDevicePtrClause(OMPIsDevicePtrClause /*P*/ C) {
    do {
      if (!getDerived().VisitOMPClauseList(C)) {
        return false;
      }
    } while (false);
    return true;
  }

  /// \brief Process clauses with list of variables.
  /*template <typename T> TEMPLATE*/
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPClauseList">
  @Converted(kind = Converted.Kind.MANUAL_COMPILATION,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2729,
   FQN="clang::RecursiveASTVisitor::VisitOMPClauseList", NM="Tpl__ZN5clang19RecursiveASTVisitor18VisitOMPClauseListEPT_",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=Tpl__ZN5clang19RecursiveASTVisitor18VisitOMPClauseListEPT_")
  //</editor-fold>
  public/*private*/ default/*interface*/ <T extends OMPVarListClause<?>> boolean VisitOMPClauseList(T /*P*/ Node) {
    for (Expr /*P*/ E : Node.varlists()) {
      do {
        if (!getDerived().TraverseStmt(E)) {
          return false;
        }
      } while (false);
    }
    return true;
  }

  /// Process clauses with pre-initis.
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPClauseWithPreInit">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2596,
   FQN="clang::RecursiveASTVisitor::VisitOMPClauseWithPreInit", NM="_ZN5clang19RecursiveASTVisitor25VisitOMPClauseWithPreInitEPNS_20OMPClauseWithPreInitE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor25VisitOMPClauseWithPreInitEPNS_20OMPClauseWithPreInitE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPClauseWithPreInit(OMPClauseWithPreInit /*P*/ Node) {
    do {
      if (!getDerived().TraverseStmt(Node.getPreInitStmt())) {
        return false;
      }
    } while (false);
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::VisitOMPClauseWithPostUpdate">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 2603,
   FQN="clang::RecursiveASTVisitor::VisitOMPClauseWithPostUpdate", NM="_ZN5clang19RecursiveASTVisitor28VisitOMPClauseWithPostUpdateEPNS_23OMPClauseWithPostUpdateE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor28VisitOMPClauseWithPostUpdateEPNS_23OMPClauseWithPostUpdateE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean VisitOMPClauseWithPostUpdate(OMPClauseWithPostUpdate /*P*/ Node) {
    do {
      if (!getDerived().VisitOMPClauseWithPreInit(Node)) {
        return false;
      }
    } while (false);
    do {
      if (!getDerived().TraverseStmt(Node.getPostUpdateExpr())) {
        return false;
      }
    } while (false);
    return true;
  }

  
  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::dataTraverseNode">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 513,
   FQN="clang::RecursiveASTVisitor::dataTraverseNode", NM="_ZN5clang19RecursiveASTVisitor16dataTraverseNodeEPNS_4StmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIS2_Lj1EbNS3_21PointerLikeTypeTraitsIS2_EENS3_18PointerIntPairInfoIS2_Lj1ES7_EEEEEE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor16dataTraverseNodeEPNS_4StmtEPN4llvm15SmallVectorImplINS3_14PointerIntPairIS2_Lj1EbNS3_21PointerLikeTypeTraitsIS2_EENS3_18PointerIntPairInfoIS2_Lj1ES7_EEEEEE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean dataTraverseNode(Stmt /*P*/ S, 
                  SmallVectorImpl<PointerBoolPair<Stmt /*P*/ > > /*P*/ Queue) {
    {
      
      // If we have a binary expr, dispatch to the subcode of the binop.  A smart
      // optimizer (e.g. LLVM) will fold this comparison into the switch stmt
      // below.
      BinaryOperator /*P*/ BinOp = dyn_cast_BinaryOperator(S);
      if ((BinOp != null)) {
        switch (BinOp.getOpcode()) {
         case BO_PtrMemD:
          return (has_overridden_traverse_with_queue_method("TraverseBinPtrMemD") ? ((Derived)(Native.$star(this))).TraverseBinPtrMemD(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinPtrMemD(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_PtrMemI:
          return (has_overridden_traverse_with_queue_method("TraverseBinPtrMemI") ? ((Derived)(Native.$star(this))).TraverseBinPtrMemI(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinPtrMemI(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Mul:
          return (has_overridden_traverse_with_queue_method("TraverseBinMul") ? ((Derived)(Native.$star(this))).TraverseBinMul(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinMul(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Div:
          return (has_overridden_traverse_with_queue_method("TraverseBinDiv") ? ((Derived)(Native.$star(this))).TraverseBinDiv(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinDiv(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Rem:
          return (has_overridden_traverse_with_queue_method("TraverseBinRem") ? ((Derived)(Native.$star(this))).TraverseBinRem(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinRem(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Add:
          return (has_overridden_traverse_with_queue_method("TraverseBinAdd") ? ((Derived)(Native.$star(this))).TraverseBinAdd(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinAdd(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Sub:
          return (has_overridden_traverse_with_queue_method("TraverseBinSub") ? ((Derived)(Native.$star(this))).TraverseBinSub(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinSub(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Shl:
          return (has_overridden_traverse_with_queue_method("TraverseBinShl") ? ((Derived)(Native.$star(this))).TraverseBinShl(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinShl(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Shr:
          return (has_overridden_traverse_with_queue_method("TraverseBinShr") ? ((Derived)(Native.$star(this))).TraverseBinShr(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinShr(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_LT:
          return (has_overridden_traverse_with_queue_method("TraverseBinLT") ? ((Derived)(Native.$star(this))).TraverseBinLT(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinLT(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_GT:
          return (has_overridden_traverse_with_queue_method("TraverseBinGT") ? ((Derived)(Native.$star(this))).TraverseBinGT(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinGT(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_LE:
          return (has_overridden_traverse_with_queue_method("TraverseBinLE") ? ((Derived)(Native.$star(this))).TraverseBinLE(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinLE(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_GE:
          return (has_overridden_traverse_with_queue_method("TraverseBinGE") ? ((Derived)(Native.$star(this))).TraverseBinGE(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinGE(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_EQ:
          return (has_overridden_traverse_with_queue_method("TraverseBinEQ") ? ((Derived)(Native.$star(this))).TraverseBinEQ(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinEQ(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_NE:
          return (has_overridden_traverse_with_queue_method("TraverseBinNE") ? ((Derived)(Native.$star(this))).TraverseBinNE(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinNE(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_And:
          return (has_overridden_traverse_with_queue_method("TraverseBinAnd") ? ((Derived)(Native.$star(this))).TraverseBinAnd(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinAnd(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Xor:
          return (has_overridden_traverse_with_queue_method("TraverseBinXor") ? ((Derived)(Native.$star(this))).TraverseBinXor(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinXor(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Or:
          return (has_overridden_traverse_with_queue_method("TraverseBinOr") ? ((Derived)(Native.$star(this))).TraverseBinOr(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinOr(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_LAnd:
          return (has_overridden_traverse_with_queue_method("TraverseBinLAnd") ? ((Derived)(Native.$star(this))).TraverseBinLAnd(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinLAnd(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_LOr:
          return (has_overridden_traverse_with_queue_method("TraverseBinLOr") ? ((Derived)(Native.$star(this))).TraverseBinLOr(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinLOr(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Assign:
          return (has_overridden_traverse_with_queue_method("TraverseBinAssign") ? ((Derived)(Native.$star(this))).TraverseBinAssign(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinAssign(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_Comma:
          return (has_overridden_traverse_with_queue_method("TraverseBinComma") ? ((Derived)(Native.$star(this))).TraverseBinComma(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinComma(((/*static_cast*/BinaryOperator /*P*/ )(S))));
         case BO_MulAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinMulAssign") ? ((Derived)(Native.$star(this))).TraverseBinMulAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinMulAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
         case BO_DivAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinDivAssign") ? ((Derived)(Native.$star(this))).TraverseBinDivAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinDivAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
         case BO_RemAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinRemAssign") ? ((Derived)(Native.$star(this))).TraverseBinRemAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinRemAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
         case BO_AddAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinAddAssign") ? ((Derived)(Native.$star(this))).TraverseBinAddAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinAddAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
         case BO_SubAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinSubAssign") ? ((Derived)(Native.$star(this))).TraverseBinSubAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinSubAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
         case BO_ShlAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinShlAssign") ? ((Derived)(Native.$star(this))).TraverseBinShlAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinShlAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
         case BO_ShrAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinShrAssign") ? ((Derived)(Native.$star(this))).TraverseBinShrAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinShrAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
         case BO_AndAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinAndAssign") ? ((Derived)(Native.$star(this))).TraverseBinAndAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinAndAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
         case BO_OrAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinOrAssign") ? ((Derived)(Native.$star(this))).TraverseBinOrAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinOrAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
         case BO_XorAssign:
          return (has_overridden_traverse_with_queue_method("TraverseBinXorAssign") ? ((Derived)(Native.$star(this))).TraverseBinXorAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinXorAssign(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
        }
      } else {
        UnaryOperator /*P*/ UnOp = dyn_cast_UnaryOperator(S);
        if ((UnOp != null)) {
          switch (UnOp.getOpcode()) {
           case UO_PostInc:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryPostInc") ? ((Derived)(Native.$star(this))).TraverseUnaryPostInc(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryPostInc(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_PostDec:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryPostDec") ? ((Derived)(Native.$star(this))).TraverseUnaryPostDec(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryPostDec(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_PreInc:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryPreInc") ? ((Derived)(Native.$star(this))).TraverseUnaryPreInc(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryPreInc(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_PreDec:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryPreDec") ? ((Derived)(Native.$star(this))).TraverseUnaryPreDec(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryPreDec(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_AddrOf:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryAddrOf") ? ((Derived)(Native.$star(this))).TraverseUnaryAddrOf(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryAddrOf(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_Deref:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryDeref") ? ((Derived)(Native.$star(this))).TraverseUnaryDeref(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryDeref(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_Plus:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryPlus") ? ((Derived)(Native.$star(this))).TraverseUnaryPlus(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryPlus(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_Minus:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryMinus") ? ((Derived)(Native.$star(this))).TraverseUnaryMinus(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryMinus(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_Not:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryNot") ? ((Derived)(Native.$star(this))).TraverseUnaryNot(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryNot(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_LNot:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryLNot") ? ((Derived)(Native.$star(this))).TraverseUnaryLNot(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryLNot(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_Real:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryReal") ? ((Derived)(Native.$star(this))).TraverseUnaryReal(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryReal(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_Imag:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryImag") ? ((Derived)(Native.$star(this))).TraverseUnaryImag(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryImag(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_Extension:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryExtension") ? ((Derived)(Native.$star(this))).TraverseUnaryExtension(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryExtension(((/*static_cast*/UnaryOperator /*P*/ )(S))));
           case UO_Coawait:
            return (has_overridden_traverse_with_queue_method("TraverseUnaryCoawait") ? ((Derived)(Native.$star(this))).TraverseUnaryCoawait(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryCoawait(((/*static_cast*/UnaryOperator /*P*/ )(S))));
          }
        }
      }
    }
    
    // Top switch stmt: dispatch to TraverseFooStmt for each concrete FooStmt.
    switch (S.getStmtClass()) {
     case NoStmtClass:
      break;
     case GCCAsmStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseGCCAsmStmt") ? ((Derived)(Native.$star(this))).TraverseGCCAsmStmt(((/*static_cast*/GCCAsmStmt /*P*/ )(S)), Queue) : getDerived().TraverseGCCAsmStmt(((/*static_cast*/GCCAsmStmt /*P*/ )(S))));
     case MSAsmStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseMSAsmStmt") ? ((Derived)(Native.$star(this))).TraverseMSAsmStmt(((/*static_cast*/MSAsmStmt /*P*/ )(S)), Queue) : getDerived().TraverseMSAsmStmt(((/*static_cast*/MSAsmStmt /*P*/ )(S))));
     case AttributedStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseAttributedStmt") ? ((Derived)(Native.$star(this))).TraverseAttributedStmt(((/*static_cast*/AttributedStmt /*P*/ )(S)), Queue) : getDerived().TraverseAttributedStmt(((/*static_cast*/AttributedStmt /*P*/ )(S))));
     case BreakStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseBreakStmt") ? ((Derived)(Native.$star(this))).TraverseBreakStmt(((/*static_cast*/BreakStmt /*P*/ )(S)), Queue) : getDerived().TraverseBreakStmt(((/*static_cast*/BreakStmt /*P*/ )(S))));
     case CXXCatchStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXCatchStmt") ? ((Derived)(Native.$star(this))).TraverseCXXCatchStmt(((/*static_cast*/CXXCatchStmt /*P*/ )(S)), Queue) : getDerived().TraverseCXXCatchStmt(((/*static_cast*/CXXCatchStmt /*P*/ )(S))));
     case CXXForRangeStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXForRangeStmt") ? ((Derived)(Native.$star(this))).TraverseCXXForRangeStmt(((/*static_cast*/CXXForRangeStmt /*P*/ )(S)), Queue) : getDerived().TraverseCXXForRangeStmt(((/*static_cast*/CXXForRangeStmt /*P*/ )(S))));
     case CXXTryStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXTryStmt") ? ((Derived)(Native.$star(this))).TraverseCXXTryStmt(((/*static_cast*/CXXTryStmt /*P*/ )(S)), Queue) : getDerived().TraverseCXXTryStmt(((/*static_cast*/CXXTryStmt /*P*/ )(S))));
     case CapturedStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseCapturedStmt") ? ((Derived)(Native.$star(this))).TraverseCapturedStmt(((/*static_cast*/CapturedStmt /*P*/ )(S)), Queue) : getDerived().TraverseCapturedStmt(((/*static_cast*/CapturedStmt /*P*/ )(S))));
     case CompoundStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseCompoundStmt") ? ((Derived)(Native.$star(this))).TraverseCompoundStmt(((/*static_cast*/CompoundStmt /*P*/ )(S)), Queue) : getDerived().TraverseCompoundStmt(((/*static_cast*/CompoundStmt /*P*/ )(S))));
     case ContinueStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseContinueStmt") ? ((Derived)(Native.$star(this))).TraverseContinueStmt(((/*static_cast*/ContinueStmt /*P*/ )(S)), Queue) : getDerived().TraverseContinueStmt(((/*static_cast*/ContinueStmt /*P*/ )(S))));
     case CoreturnStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseCoreturnStmt") ? ((Derived)(Native.$star(this))).TraverseCoreturnStmt(((/*static_cast*/CoreturnStmt /*P*/ )(S)), Queue) : getDerived().TraverseCoreturnStmt(((/*static_cast*/CoreturnStmt /*P*/ )(S))));
     case CoroutineBodyStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseCoroutineBodyStmt") ? ((Derived)(Native.$star(this))).TraverseCoroutineBodyStmt(((/*static_cast*/CoroutineBodyStmt /*P*/ )(S)), Queue) : getDerived().TraverseCoroutineBodyStmt(((/*static_cast*/CoroutineBodyStmt /*P*/ )(S))));
     case DeclStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseDeclStmt") ? ((Derived)(Native.$star(this))).TraverseDeclStmt(((/*static_cast*/DeclStmt /*P*/ )(S)), Queue) : getDerived().TraverseDeclStmt(((/*static_cast*/DeclStmt /*P*/ )(S))));
     case DoStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseDoStmt") ? ((Derived)(Native.$star(this))).TraverseDoStmt(((/*static_cast*/DoStmt /*P*/ )(S)), Queue) : getDerived().TraverseDoStmt(((/*static_cast*/DoStmt /*P*/ )(S))));
     case BinaryConditionalOperatorClass:
      return (has_overridden_traverse_with_queue_method("TraverseBinaryConditionalOperator") ? ((Derived)(Native.$star(this))).TraverseBinaryConditionalOperator(((/*static_cast*/BinaryConditionalOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinaryConditionalOperator(((/*static_cast*/BinaryConditionalOperator /*P*/ )(S))));
     case ConditionalOperatorClass:
      return (has_overridden_traverse_with_queue_method("TraverseConditionalOperator") ? ((Derived)(Native.$star(this))).TraverseConditionalOperator(((/*static_cast*/ConditionalOperator /*P*/ )(S)), Queue) : getDerived().TraverseConditionalOperator(((/*static_cast*/ConditionalOperator /*P*/ )(S))));
     case AddrLabelExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseAddrLabelExpr") ? ((Derived)(Native.$star(this))).TraverseAddrLabelExpr(((/*static_cast*/AddrLabelExpr /*P*/ )(S)), Queue) : getDerived().TraverseAddrLabelExpr(((/*static_cast*/AddrLabelExpr /*P*/ )(S))));
     case ArraySubscriptExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseArraySubscriptExpr") ? ((Derived)(Native.$star(this))).TraverseArraySubscriptExpr(((/*static_cast*/ArraySubscriptExpr /*P*/ )(S)), Queue) : getDerived().TraverseArraySubscriptExpr(((/*static_cast*/ArraySubscriptExpr /*P*/ )(S))));
     case ArrayTypeTraitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseArrayTypeTraitExpr") ? ((Derived)(Native.$star(this))).TraverseArrayTypeTraitExpr(((/*static_cast*/ArrayTypeTraitExpr /*P*/ )(S)), Queue) : getDerived().TraverseArrayTypeTraitExpr(((/*static_cast*/ArrayTypeTraitExpr /*P*/ )(S))));
     case AsTypeExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseAsTypeExpr") ? ((Derived)(Native.$star(this))).TraverseAsTypeExpr(((/*static_cast*/AsTypeExpr /*P*/ )(S)), Queue) : getDerived().TraverseAsTypeExpr(((/*static_cast*/AsTypeExpr /*P*/ )(S))));
     case AtomicExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseAtomicExpr") ? ((Derived)(Native.$star(this))).TraverseAtomicExpr(((/*static_cast*/AtomicExpr /*P*/ )(S)), Queue) : getDerived().TraverseAtomicExpr(((/*static_cast*/AtomicExpr /*P*/ )(S))));
     case BinaryOperatorClass:
      return (has_overridden_traverse_with_queue_method("TraverseBinaryOperator") ? ((Derived)(Native.$star(this))).TraverseBinaryOperator(((/*static_cast*/BinaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseBinaryOperator(((/*static_cast*/BinaryOperator /*P*/ )(S))));
     case CompoundAssignOperatorClass:
      return (has_overridden_traverse_with_queue_method("TraverseCompoundAssignOperator") ? ((Derived)(Native.$star(this))).TraverseCompoundAssignOperator(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)), Queue) : getDerived().TraverseCompoundAssignOperator(((/*static_cast*/CompoundAssignOperator /*P*/ )(S))));
     case BlockExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseBlockExpr") ? ((Derived)(Native.$star(this))).TraverseBlockExpr(((/*static_cast*/BlockExpr /*P*/ )(S)), Queue) : getDerived().TraverseBlockExpr(((/*static_cast*/BlockExpr /*P*/ )(S))));
     case CXXBindTemporaryExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXBindTemporaryExpr") ? ((Derived)(Native.$star(this))).TraverseCXXBindTemporaryExpr(((/*static_cast*/CXXBindTemporaryExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXBindTemporaryExpr(((/*static_cast*/CXXBindTemporaryExpr /*P*/ )(S))));
     case CXXBoolLiteralExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXBoolLiteralExpr") ? ((Derived)(Native.$star(this))).TraverseCXXBoolLiteralExpr(((/*static_cast*/CXXBoolLiteralExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXBoolLiteralExpr(((/*static_cast*/CXXBoolLiteralExpr /*P*/ )(S))));
     case CXXConstructExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXConstructExpr") ? ((Derived)(Native.$star(this))).TraverseCXXConstructExpr(((/*static_cast*/CXXConstructExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXConstructExpr(((/*static_cast*/CXXConstructExpr /*P*/ )(S))));
     case CXXTemporaryObjectExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXTemporaryObjectExpr") ? ((Derived)(Native.$star(this))).TraverseCXXTemporaryObjectExpr(((/*static_cast*/CXXTemporaryObjectExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXTemporaryObjectExpr(((/*static_cast*/CXXTemporaryObjectExpr /*P*/ )(S))));
     case CXXDefaultArgExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXDefaultArgExpr") ? ((Derived)(Native.$star(this))).TraverseCXXDefaultArgExpr(((/*static_cast*/CXXDefaultArgExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXDefaultArgExpr(((/*static_cast*/CXXDefaultArgExpr /*P*/ )(S))));
     case CXXDefaultInitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXDefaultInitExpr") ? ((Derived)(Native.$star(this))).TraverseCXXDefaultInitExpr(((/*static_cast*/CXXDefaultInitExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXDefaultInitExpr(((/*static_cast*/CXXDefaultInitExpr /*P*/ )(S))));
     case CXXDeleteExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXDeleteExpr") ? ((Derived)(Native.$star(this))).TraverseCXXDeleteExpr(((/*static_cast*/CXXDeleteExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXDeleteExpr(((/*static_cast*/CXXDeleteExpr /*P*/ )(S))));
     case CXXDependentScopeMemberExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXDependentScopeMemberExpr") ? ((Derived)(Native.$star(this))).TraverseCXXDependentScopeMemberExpr(((/*static_cast*/CXXDependentScopeMemberExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXDependentScopeMemberExpr(((/*static_cast*/CXXDependentScopeMemberExpr /*P*/ )(S))));
     case CXXFoldExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXFoldExpr") ? ((Derived)(Native.$star(this))).TraverseCXXFoldExpr(((/*static_cast*/CXXFoldExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXFoldExpr(((/*static_cast*/CXXFoldExpr /*P*/ )(S))));
     case CXXInheritedCtorInitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXInheritedCtorInitExpr") ? ((Derived)(Native.$star(this))).TraverseCXXInheritedCtorInitExpr(((/*static_cast*/CXXInheritedCtorInitExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXInheritedCtorInitExpr(((/*static_cast*/CXXInheritedCtorInitExpr /*P*/ )(S))));
     case CXXNewExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXNewExpr") ? ((Derived)(Native.$star(this))).TraverseCXXNewExpr(((/*static_cast*/CXXNewExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXNewExpr(((/*static_cast*/CXXNewExpr /*P*/ )(S))));
     case CXXNoexceptExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXNoexceptExpr") ? ((Derived)(Native.$star(this))).TraverseCXXNoexceptExpr(((/*static_cast*/CXXNoexceptExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXNoexceptExpr(((/*static_cast*/CXXNoexceptExpr /*P*/ )(S))));
     case CXXNullPtrLiteralExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXNullPtrLiteralExpr") ? ((Derived)(Native.$star(this))).TraverseCXXNullPtrLiteralExpr(((/*static_cast*/CXXNullPtrLiteralExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXNullPtrLiteralExpr(((/*static_cast*/CXXNullPtrLiteralExpr /*P*/ )(S))));
     case CXXPseudoDestructorExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXPseudoDestructorExpr") ? ((Derived)(Native.$star(this))).TraverseCXXPseudoDestructorExpr(((/*static_cast*/CXXPseudoDestructorExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXPseudoDestructorExpr(((/*static_cast*/CXXPseudoDestructorExpr /*P*/ )(S))));
     case CXXScalarValueInitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXScalarValueInitExpr") ? ((Derived)(Native.$star(this))).TraverseCXXScalarValueInitExpr(((/*static_cast*/CXXScalarValueInitExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXScalarValueInitExpr(((/*static_cast*/CXXScalarValueInitExpr /*P*/ )(S))));
     case CXXStdInitializerListExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXStdInitializerListExpr") ? ((Derived)(Native.$star(this))).TraverseCXXStdInitializerListExpr(((/*static_cast*/CXXStdInitializerListExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXStdInitializerListExpr(((/*static_cast*/CXXStdInitializerListExpr /*P*/ )(S))));
     case CXXThisExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXThisExpr") ? ((Derived)(Native.$star(this))).TraverseCXXThisExpr(((/*static_cast*/CXXThisExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXThisExpr(((/*static_cast*/CXXThisExpr /*P*/ )(S))));
     case CXXThrowExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXThrowExpr") ? ((Derived)(Native.$star(this))).TraverseCXXThrowExpr(((/*static_cast*/CXXThrowExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXThrowExpr(((/*static_cast*/CXXThrowExpr /*P*/ )(S))));
     case CXXTypeidExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXTypeidExpr") ? ((Derived)(Native.$star(this))).TraverseCXXTypeidExpr(((/*static_cast*/CXXTypeidExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXTypeidExpr(((/*static_cast*/CXXTypeidExpr /*P*/ )(S))));
     case CXXUnresolvedConstructExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXUnresolvedConstructExpr") ? ((Derived)(Native.$star(this))).TraverseCXXUnresolvedConstructExpr(((/*static_cast*/CXXUnresolvedConstructExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXUnresolvedConstructExpr(((/*static_cast*/CXXUnresolvedConstructExpr /*P*/ )(S))));
     case CXXUuidofExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXUuidofExpr") ? ((Derived)(Native.$star(this))).TraverseCXXUuidofExpr(((/*static_cast*/CXXUuidofExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXUuidofExpr(((/*static_cast*/CXXUuidofExpr /*P*/ )(S))));
     case CallExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCallExpr") ? ((Derived)(Native.$star(this))).TraverseCallExpr(((/*static_cast*/CallExpr /*P*/ )(S)), Queue) : getDerived().TraverseCallExpr(((/*static_cast*/CallExpr /*P*/ )(S))));
     case CUDAKernelCallExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCUDAKernelCallExpr") ? ((Derived)(Native.$star(this))).TraverseCUDAKernelCallExpr(((/*static_cast*/CUDAKernelCallExpr /*P*/ )(S)), Queue) : getDerived().TraverseCUDAKernelCallExpr(((/*static_cast*/CUDAKernelCallExpr /*P*/ )(S))));
     case CXXMemberCallExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXMemberCallExpr") ? ((Derived)(Native.$star(this))).TraverseCXXMemberCallExpr(((/*static_cast*/CXXMemberCallExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXMemberCallExpr(((/*static_cast*/CXXMemberCallExpr /*P*/ )(S))));
     case CXXOperatorCallExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXOperatorCallExpr") ? ((Derived)(Native.$star(this))).TraverseCXXOperatorCallExpr(((/*static_cast*/CXXOperatorCallExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXOperatorCallExpr(((/*static_cast*/CXXOperatorCallExpr /*P*/ )(S))));
     case UserDefinedLiteralClass:
      return (has_overridden_traverse_with_queue_method("TraverseUserDefinedLiteral") ? ((Derived)(Native.$star(this))).TraverseUserDefinedLiteral(((/*static_cast*/UserDefinedLiteral /*P*/ )(S)), Queue) : getDerived().TraverseUserDefinedLiteral(((/*static_cast*/UserDefinedLiteral /*P*/ )(S))));
     case CStyleCastExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCStyleCastExpr") ? ((Derived)(Native.$star(this))).TraverseCStyleCastExpr(((/*static_cast*/CStyleCastExpr /*P*/ )(S)), Queue) : getDerived().TraverseCStyleCastExpr(((/*static_cast*/CStyleCastExpr /*P*/ )(S))));
     case CXXFunctionalCastExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXFunctionalCastExpr") ? ((Derived)(Native.$star(this))).TraverseCXXFunctionalCastExpr(((/*static_cast*/CXXFunctionalCastExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXFunctionalCastExpr(((/*static_cast*/CXXFunctionalCastExpr /*P*/ )(S))));
     case CXXConstCastExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXConstCastExpr") ? ((Derived)(Native.$star(this))).TraverseCXXConstCastExpr(((/*static_cast*/CXXConstCastExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXConstCastExpr(((/*static_cast*/CXXConstCastExpr /*P*/ )(S))));
     case CXXDynamicCastExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXDynamicCastExpr") ? ((Derived)(Native.$star(this))).TraverseCXXDynamicCastExpr(((/*static_cast*/CXXDynamicCastExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXDynamicCastExpr(((/*static_cast*/CXXDynamicCastExpr /*P*/ )(S))));
     case CXXReinterpretCastExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXReinterpretCastExpr") ? ((Derived)(Native.$star(this))).TraverseCXXReinterpretCastExpr(((/*static_cast*/CXXReinterpretCastExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXReinterpretCastExpr(((/*static_cast*/CXXReinterpretCastExpr /*P*/ )(S))));
     case CXXStaticCastExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCXXStaticCastExpr") ? ((Derived)(Native.$star(this))).TraverseCXXStaticCastExpr(((/*static_cast*/CXXStaticCastExpr /*P*/ )(S)), Queue) : getDerived().TraverseCXXStaticCastExpr(((/*static_cast*/CXXStaticCastExpr /*P*/ )(S))));
     case ObjCBridgedCastExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCBridgedCastExpr") ? ((Derived)(Native.$star(this))).TraverseObjCBridgedCastExpr(((/*static_cast*/ObjCBridgedCastExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCBridgedCastExpr(((/*static_cast*/ObjCBridgedCastExpr /*P*/ )(S))));
     case ImplicitCastExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseImplicitCastExpr") ? ((Derived)(Native.$star(this))).TraverseImplicitCastExpr(((/*static_cast*/ImplicitCastExpr /*P*/ )(S)), Queue) : getDerived().TraverseImplicitCastExpr(((/*static_cast*/ImplicitCastExpr /*P*/ )(S))));
     case CharacterLiteralClass:
      return (has_overridden_traverse_with_queue_method("TraverseCharacterLiteral") ? ((Derived)(Native.$star(this))).TraverseCharacterLiteral(((/*static_cast*/CharacterLiteral /*P*/ )(S)), Queue) : getDerived().TraverseCharacterLiteral(((/*static_cast*/CharacterLiteral /*P*/ )(S))));
     case ChooseExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseChooseExpr") ? ((Derived)(Native.$star(this))).TraverseChooseExpr(((/*static_cast*/ChooseExpr /*P*/ )(S)), Queue) : getDerived().TraverseChooseExpr(((/*static_cast*/ChooseExpr /*P*/ )(S))));
     case CompoundLiteralExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCompoundLiteralExpr") ? ((Derived)(Native.$star(this))).TraverseCompoundLiteralExpr(((/*static_cast*/CompoundLiteralExpr /*P*/ )(S)), Queue) : getDerived().TraverseCompoundLiteralExpr(((/*static_cast*/CompoundLiteralExpr /*P*/ )(S))));
     case ConvertVectorExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseConvertVectorExpr") ? ((Derived)(Native.$star(this))).TraverseConvertVectorExpr(((/*static_cast*/ConvertVectorExpr /*P*/ )(S)), Queue) : getDerived().TraverseConvertVectorExpr(((/*static_cast*/ConvertVectorExpr /*P*/ )(S))));
     case CoawaitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCoawaitExpr") ? ((Derived)(Native.$star(this))).TraverseCoawaitExpr(((/*static_cast*/CoawaitExpr /*P*/ )(S)), Queue) : getDerived().TraverseCoawaitExpr(((/*static_cast*/CoawaitExpr /*P*/ )(S))));
     case CoyieldExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseCoyieldExpr") ? ((Derived)(Native.$star(this))).TraverseCoyieldExpr(((/*static_cast*/CoyieldExpr /*P*/ )(S)), Queue) : getDerived().TraverseCoyieldExpr(((/*static_cast*/CoyieldExpr /*P*/ )(S))));
     case DeclRefExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseDeclRefExpr") ? ((Derived)(Native.$star(this))).TraverseDeclRefExpr(((/*static_cast*/DeclRefExpr /*P*/ )(S)), Queue) : getDerived().TraverseDeclRefExpr(((/*static_cast*/DeclRefExpr /*P*/ )(S))));
     case DependentScopeDeclRefExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseDependentScopeDeclRefExpr") ? ((Derived)(Native.$star(this))).TraverseDependentScopeDeclRefExpr(((/*static_cast*/DependentScopeDeclRefExpr /*P*/ )(S)), Queue) : getDerived().TraverseDependentScopeDeclRefExpr(((/*static_cast*/DependentScopeDeclRefExpr /*P*/ )(S))));
     case DesignatedInitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseDesignatedInitExpr") ? ((Derived)(Native.$star(this))).TraverseDesignatedInitExpr(((/*static_cast*/DesignatedInitExpr /*P*/ )(S)), Queue) : getDerived().TraverseDesignatedInitExpr(((/*static_cast*/DesignatedInitExpr /*P*/ )(S))));
     case DesignatedInitUpdateExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseDesignatedInitUpdateExpr") ? ((Derived)(Native.$star(this))).TraverseDesignatedInitUpdateExpr(((/*static_cast*/DesignatedInitUpdateExpr /*P*/ )(S)), Queue) : getDerived().TraverseDesignatedInitUpdateExpr(((/*static_cast*/DesignatedInitUpdateExpr /*P*/ )(S))));
     case ExprWithCleanupsClass:
      return (has_overridden_traverse_with_queue_method("TraverseExprWithCleanups") ? ((Derived)(Native.$star(this))).TraverseExprWithCleanups(((/*static_cast*/ExprWithCleanups /*P*/ )(S)), Queue) : getDerived().TraverseExprWithCleanups(((/*static_cast*/ExprWithCleanups /*P*/ )(S))));
     case ExpressionTraitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseExpressionTraitExpr") ? ((Derived)(Native.$star(this))).TraverseExpressionTraitExpr(((/*static_cast*/ExpressionTraitExpr /*P*/ )(S)), Queue) : getDerived().TraverseExpressionTraitExpr(((/*static_cast*/ExpressionTraitExpr /*P*/ )(S))));
     case ExtVectorElementExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseExtVectorElementExpr") ? ((Derived)(Native.$star(this))).TraverseExtVectorElementExpr(((/*static_cast*/ExtVectorElementExpr /*P*/ )(S)), Queue) : getDerived().TraverseExtVectorElementExpr(((/*static_cast*/ExtVectorElementExpr /*P*/ )(S))));
     case FloatingLiteralClass:
      return (has_overridden_traverse_with_queue_method("TraverseFloatingLiteral") ? ((Derived)(Native.$star(this))).TraverseFloatingLiteral(((/*static_cast*/FloatingLiteral /*P*/ )(S)), Queue) : getDerived().TraverseFloatingLiteral(((/*static_cast*/FloatingLiteral /*P*/ )(S))));
     case FunctionParmPackExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseFunctionParmPackExpr") ? ((Derived)(Native.$star(this))).TraverseFunctionParmPackExpr(((/*static_cast*/FunctionParmPackExpr /*P*/ )(S)), Queue) : getDerived().TraverseFunctionParmPackExpr(((/*static_cast*/FunctionParmPackExpr /*P*/ )(S))));
     case GNUNullExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseGNUNullExpr") ? ((Derived)(Native.$star(this))).TraverseGNUNullExpr(((/*static_cast*/GNUNullExpr /*P*/ )(S)), Queue) : getDerived().TraverseGNUNullExpr(((/*static_cast*/GNUNullExpr /*P*/ )(S))));
     case GenericSelectionExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseGenericSelectionExpr") ? ((Derived)(Native.$star(this))).TraverseGenericSelectionExpr(((/*static_cast*/GenericSelectionExpr /*P*/ )(S)), Queue) : getDerived().TraverseGenericSelectionExpr(((/*static_cast*/GenericSelectionExpr /*P*/ )(S))));
     case ImaginaryLiteralClass:
      return (has_overridden_traverse_with_queue_method("TraverseImaginaryLiteral") ? ((Derived)(Native.$star(this))).TraverseImaginaryLiteral(((/*static_cast*/ImaginaryLiteral /*P*/ )(S)), Queue) : getDerived().TraverseImaginaryLiteral(((/*static_cast*/ImaginaryLiteral /*P*/ )(S))));
     case ImplicitValueInitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseImplicitValueInitExpr") ? ((Derived)(Native.$star(this))).TraverseImplicitValueInitExpr(((/*static_cast*/ImplicitValueInitExpr /*P*/ )(S)), Queue) : getDerived().TraverseImplicitValueInitExpr(((/*static_cast*/ImplicitValueInitExpr /*P*/ )(S))));
     case InitListExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseInitListExpr") ? ((Derived)(Native.$star(this))).TraverseInitListExpr(((/*static_cast*/InitListExpr /*P*/ )(S)), Queue) : getDerived().TraverseInitListExpr(((/*static_cast*/InitListExpr /*P*/ )(S))));
     case IntegerLiteralClass:
      return (has_overridden_traverse_with_queue_method("TraverseIntegerLiteral") ? ((Derived)(Native.$star(this))).TraverseIntegerLiteral(((/*static_cast*/IntegerLiteral /*P*/ )(S)), Queue) : getDerived().TraverseIntegerLiteral(((/*static_cast*/IntegerLiteral /*P*/ )(S))));
     case LambdaExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseLambdaExpr") ? ((Derived)(Native.$star(this))).TraverseLambdaExpr(((/*static_cast*/LambdaExpr /*P*/ )(S)), Queue) : getDerived().TraverseLambdaExpr(((/*static_cast*/LambdaExpr /*P*/ )(S))));
     case MSPropertyRefExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseMSPropertyRefExpr") ? ((Derived)(Native.$star(this))).TraverseMSPropertyRefExpr(((/*static_cast*/MSPropertyRefExpr /*P*/ )(S)), Queue) : getDerived().TraverseMSPropertyRefExpr(((/*static_cast*/MSPropertyRefExpr /*P*/ )(S))));
     case MSPropertySubscriptExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseMSPropertySubscriptExpr") ? ((Derived)(Native.$star(this))).TraverseMSPropertySubscriptExpr(((/*static_cast*/MSPropertySubscriptExpr /*P*/ )(S)), Queue) : getDerived().TraverseMSPropertySubscriptExpr(((/*static_cast*/MSPropertySubscriptExpr /*P*/ )(S))));
     case MaterializeTemporaryExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseMaterializeTemporaryExpr") ? ((Derived)(Native.$star(this))).TraverseMaterializeTemporaryExpr(((/*static_cast*/MaterializeTemporaryExpr /*P*/ )(S)), Queue) : getDerived().TraverseMaterializeTemporaryExpr(((/*static_cast*/MaterializeTemporaryExpr /*P*/ )(S))));
     case MemberExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseMemberExpr") ? ((Derived)(Native.$star(this))).TraverseMemberExpr(((/*static_cast*/MemberExpr /*P*/ )(S)), Queue) : getDerived().TraverseMemberExpr(((/*static_cast*/MemberExpr /*P*/ )(S))));
     case NoInitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseNoInitExpr") ? ((Derived)(Native.$star(this))).TraverseNoInitExpr(((/*static_cast*/NoInitExpr /*P*/ )(S)), Queue) : getDerived().TraverseNoInitExpr(((/*static_cast*/NoInitExpr /*P*/ )(S))));
     case OMPArraySectionExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPArraySectionExpr") ? ((Derived)(Native.$star(this))).TraverseOMPArraySectionExpr(((/*static_cast*/OMPArraySectionExpr /*P*/ )(S)), Queue) : getDerived().TraverseOMPArraySectionExpr(((/*static_cast*/OMPArraySectionExpr /*P*/ )(S))));
     case ObjCArrayLiteralClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCArrayLiteral") ? ((Derived)(Native.$star(this))).TraverseObjCArrayLiteral(((/*static_cast*/ObjCArrayLiteral /*P*/ )(S)), Queue) : getDerived().TraverseObjCArrayLiteral(((/*static_cast*/ObjCArrayLiteral /*P*/ )(S))));
     case ObjCAvailabilityCheckExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCAvailabilityCheckExpr") ? ((Derived)(Native.$star(this))).TraverseObjCAvailabilityCheckExpr(((/*static_cast*/ObjCAvailabilityCheckExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCAvailabilityCheckExpr(((/*static_cast*/ObjCAvailabilityCheckExpr /*P*/ )(S))));
     case ObjCBoolLiteralExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCBoolLiteralExpr") ? ((Derived)(Native.$star(this))).TraverseObjCBoolLiteralExpr(((/*static_cast*/ObjCBoolLiteralExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCBoolLiteralExpr(((/*static_cast*/ObjCBoolLiteralExpr /*P*/ )(S))));
     case ObjCBoxedExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCBoxedExpr") ? ((Derived)(Native.$star(this))).TraverseObjCBoxedExpr(((/*static_cast*/ObjCBoxedExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCBoxedExpr(((/*static_cast*/ObjCBoxedExpr /*P*/ )(S))));
     case ObjCDictionaryLiteralClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCDictionaryLiteral") ? ((Derived)(Native.$star(this))).TraverseObjCDictionaryLiteral(((/*static_cast*/ObjCDictionaryLiteral /*P*/ )(S)), Queue) : getDerived().TraverseObjCDictionaryLiteral(((/*static_cast*/ObjCDictionaryLiteral /*P*/ )(S))));
     case ObjCEncodeExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCEncodeExpr") ? ((Derived)(Native.$star(this))).TraverseObjCEncodeExpr(((/*static_cast*/ObjCEncodeExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCEncodeExpr(((/*static_cast*/ObjCEncodeExpr /*P*/ )(S))));
     case ObjCIndirectCopyRestoreExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCIndirectCopyRestoreExpr") ? ((Derived)(Native.$star(this))).TraverseObjCIndirectCopyRestoreExpr(((/*static_cast*/ObjCIndirectCopyRestoreExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCIndirectCopyRestoreExpr(((/*static_cast*/ObjCIndirectCopyRestoreExpr /*P*/ )(S))));
     case ObjCIsaExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCIsaExpr") ? ((Derived)(Native.$star(this))).TraverseObjCIsaExpr(((/*static_cast*/ObjCIsaExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCIsaExpr(((/*static_cast*/ObjCIsaExpr /*P*/ )(S))));
     case ObjCIvarRefExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCIvarRefExpr") ? ((Derived)(Native.$star(this))).TraverseObjCIvarRefExpr(((/*static_cast*/ObjCIvarRefExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCIvarRefExpr(((/*static_cast*/ObjCIvarRefExpr /*P*/ )(S))));
     case ObjCMessageExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCMessageExpr") ? ((Derived)(Native.$star(this))).TraverseObjCMessageExpr(((/*static_cast*/ObjCMessageExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCMessageExpr(((/*static_cast*/ObjCMessageExpr /*P*/ )(S))));
     case ObjCPropertyRefExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCPropertyRefExpr") ? ((Derived)(Native.$star(this))).TraverseObjCPropertyRefExpr(((/*static_cast*/ObjCPropertyRefExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCPropertyRefExpr(((/*static_cast*/ObjCPropertyRefExpr /*P*/ )(S))));
     case ObjCProtocolExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCProtocolExpr") ? ((Derived)(Native.$star(this))).TraverseObjCProtocolExpr(((/*static_cast*/ObjCProtocolExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCProtocolExpr(((/*static_cast*/ObjCProtocolExpr /*P*/ )(S))));
     case ObjCSelectorExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCSelectorExpr") ? ((Derived)(Native.$star(this))).TraverseObjCSelectorExpr(((/*static_cast*/ObjCSelectorExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCSelectorExpr(((/*static_cast*/ObjCSelectorExpr /*P*/ )(S))));
     case ObjCStringLiteralClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCStringLiteral") ? ((Derived)(Native.$star(this))).TraverseObjCStringLiteral(((/*static_cast*/ObjCStringLiteral /*P*/ )(S)), Queue) : getDerived().TraverseObjCStringLiteral(((/*static_cast*/ObjCStringLiteral /*P*/ )(S))));
     case ObjCSubscriptRefExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCSubscriptRefExpr") ? ((Derived)(Native.$star(this))).TraverseObjCSubscriptRefExpr(((/*static_cast*/ObjCSubscriptRefExpr /*P*/ )(S)), Queue) : getDerived().TraverseObjCSubscriptRefExpr(((/*static_cast*/ObjCSubscriptRefExpr /*P*/ )(S))));
     case OffsetOfExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseOffsetOfExpr") ? ((Derived)(Native.$star(this))).TraverseOffsetOfExpr(((/*static_cast*/OffsetOfExpr /*P*/ )(S)), Queue) : getDerived().TraverseOffsetOfExpr(((/*static_cast*/OffsetOfExpr /*P*/ )(S))));
     case OpaqueValueExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseOpaqueValueExpr") ? ((Derived)(Native.$star(this))).TraverseOpaqueValueExpr(((/*static_cast*/OpaqueValueExpr /*P*/ )(S)), Queue) : getDerived().TraverseOpaqueValueExpr(((/*static_cast*/OpaqueValueExpr /*P*/ )(S))));
     case UnresolvedLookupExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseUnresolvedLookupExpr") ? ((Derived)(Native.$star(this))).TraverseUnresolvedLookupExpr(((/*static_cast*/UnresolvedLookupExpr /*P*/ )(S)), Queue) : getDerived().TraverseUnresolvedLookupExpr(((/*static_cast*/UnresolvedLookupExpr /*P*/ )(S))));
     case UnresolvedMemberExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseUnresolvedMemberExpr") ? ((Derived)(Native.$star(this))).TraverseUnresolvedMemberExpr(((/*static_cast*/UnresolvedMemberExpr /*P*/ )(S)), Queue) : getDerived().TraverseUnresolvedMemberExpr(((/*static_cast*/UnresolvedMemberExpr /*P*/ )(S))));
     case PackExpansionExprClass:
      return (has_overridden_traverse_with_queue_method("TraversePackExpansionExpr") ? ((Derived)(Native.$star(this))).TraversePackExpansionExpr(((/*static_cast*/PackExpansionExpr /*P*/ )(S)), Queue) : getDerived().TraversePackExpansionExpr(((/*static_cast*/PackExpansionExpr /*P*/ )(S))));
     case ParenExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseParenExpr") ? ((Derived)(Native.$star(this))).TraverseParenExpr(((/*static_cast*/ParenExpr /*P*/ )(S)), Queue) : getDerived().TraverseParenExpr(((/*static_cast*/ParenExpr /*P*/ )(S))));
     case ParenListExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseParenListExpr") ? ((Derived)(Native.$star(this))).TraverseParenListExpr(((/*static_cast*/ParenListExpr /*P*/ )(S)), Queue) : getDerived().TraverseParenListExpr(((/*static_cast*/ParenListExpr /*P*/ )(S))));
     case PredefinedExprClass:
      return (has_overridden_traverse_with_queue_method("TraversePredefinedExpr") ? ((Derived)(Native.$star(this))).TraversePredefinedExpr(((/*static_cast*/PredefinedExpr /*P*/ )(S)), Queue) : getDerived().TraversePredefinedExpr(((/*static_cast*/PredefinedExpr /*P*/ )(S))));
     case PseudoObjectExprClass:
      return (has_overridden_traverse_with_queue_method("TraversePseudoObjectExpr") ? ((Derived)(Native.$star(this))).TraversePseudoObjectExpr(((/*static_cast*/PseudoObjectExpr /*P*/ )(S)), Queue) : getDerived().TraversePseudoObjectExpr(((/*static_cast*/PseudoObjectExpr /*P*/ )(S))));
     case ShuffleVectorExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseShuffleVectorExpr") ? ((Derived)(Native.$star(this))).TraverseShuffleVectorExpr(((/*static_cast*/ShuffleVectorExpr /*P*/ )(S)), Queue) : getDerived().TraverseShuffleVectorExpr(((/*static_cast*/ShuffleVectorExpr /*P*/ )(S))));
     case SizeOfPackExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseSizeOfPackExpr") ? ((Derived)(Native.$star(this))).TraverseSizeOfPackExpr(((/*static_cast*/SizeOfPackExpr /*P*/ )(S)), Queue) : getDerived().TraverseSizeOfPackExpr(((/*static_cast*/SizeOfPackExpr /*P*/ )(S))));
     case StmtExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseStmtExpr") ? ((Derived)(Native.$star(this))).TraverseStmtExpr(((/*static_cast*/StmtExpr /*P*/ )(S)), Queue) : getDerived().TraverseStmtExpr(((/*static_cast*/StmtExpr /*P*/ )(S))));
     case StringLiteralClass:
      return (has_overridden_traverse_with_queue_method("TraverseStringLiteral") ? ((Derived)(Native.$star(this))).TraverseStringLiteral(((/*static_cast*/StringLiteral /*P*/ )(S)), Queue) : getDerived().TraverseStringLiteral(((/*static_cast*/StringLiteral /*P*/ )(S))));
     case SubstNonTypeTemplateParmExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseSubstNonTypeTemplateParmExpr") ? ((Derived)(Native.$star(this))).TraverseSubstNonTypeTemplateParmExpr(((/*static_cast*/SubstNonTypeTemplateParmExpr /*P*/ )(S)), Queue) : getDerived().TraverseSubstNonTypeTemplateParmExpr(((/*static_cast*/SubstNonTypeTemplateParmExpr /*P*/ )(S))));
     case SubstNonTypeTemplateParmPackExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseSubstNonTypeTemplateParmPackExpr") ? ((Derived)(Native.$star(this))).TraverseSubstNonTypeTemplateParmPackExpr(((/*static_cast*/SubstNonTypeTemplateParmPackExpr /*P*/ )(S)), Queue) : getDerived().TraverseSubstNonTypeTemplateParmPackExpr(((/*static_cast*/SubstNonTypeTemplateParmPackExpr /*P*/ )(S))));
     case TypeTraitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseTypeTraitExpr") ? ((Derived)(Native.$star(this))).TraverseTypeTraitExpr(((/*static_cast*/TypeTraitExpr /*P*/ )(S)), Queue) : getDerived().TraverseTypeTraitExpr(((/*static_cast*/TypeTraitExpr /*P*/ )(S))));
     case TypoExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseTypoExpr") ? ((Derived)(Native.$star(this))).TraverseTypoExpr(((/*static_cast*/TypoExpr /*P*/ )(S)), Queue) : getDerived().TraverseTypoExpr(((/*static_cast*/TypoExpr /*P*/ )(S))));
     case UnaryExprOrTypeTraitExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseUnaryExprOrTypeTraitExpr") ? ((Derived)(Native.$star(this))).TraverseUnaryExprOrTypeTraitExpr(((/*static_cast*/UnaryExprOrTypeTraitExpr /*P*/ )(S)), Queue) : getDerived().TraverseUnaryExprOrTypeTraitExpr(((/*static_cast*/UnaryExprOrTypeTraitExpr /*P*/ )(S))));
     case UnaryOperatorClass:
      return (has_overridden_traverse_with_queue_method("TraverseUnaryOperator") ? ((Derived)(Native.$star(this))).TraverseUnaryOperator(((/*static_cast*/UnaryOperator /*P*/ )(S)), Queue) : getDerived().TraverseUnaryOperator(((/*static_cast*/UnaryOperator /*P*/ )(S))));
     case VAArgExprClass:
      return (has_overridden_traverse_with_queue_method("TraverseVAArgExpr") ? ((Derived)(Native.$star(this))).TraverseVAArgExpr(((/*static_cast*/VAArgExpr /*P*/ )(S)), Queue) : getDerived().TraverseVAArgExpr(((/*static_cast*/VAArgExpr /*P*/ )(S))));
     case ForStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseForStmt") ? ((Derived)(Native.$star(this))).TraverseForStmt(((/*static_cast*/ForStmt /*P*/ )(S)), Queue) : getDerived().TraverseForStmt(((/*static_cast*/ForStmt /*P*/ )(S))));
     case GotoStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseGotoStmt") ? ((Derived)(Native.$star(this))).TraverseGotoStmt(((/*static_cast*/GotoStmt /*P*/ )(S)), Queue) : getDerived().TraverseGotoStmt(((/*static_cast*/GotoStmt /*P*/ )(S))));
     case IfStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseIfStmt") ? ((Derived)(Native.$star(this))).TraverseIfStmt(((/*static_cast*/IfStmt /*P*/ )(S)), Queue) : getDerived().TraverseIfStmt(((/*static_cast*/IfStmt /*P*/ )(S))));
     case IndirectGotoStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseIndirectGotoStmt") ? ((Derived)(Native.$star(this))).TraverseIndirectGotoStmt(((/*static_cast*/IndirectGotoStmt /*P*/ )(S)), Queue) : getDerived().TraverseIndirectGotoStmt(((/*static_cast*/IndirectGotoStmt /*P*/ )(S))));
     case LabelStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseLabelStmt") ? ((Derived)(Native.$star(this))).TraverseLabelStmt(((/*static_cast*/LabelStmt /*P*/ )(S)), Queue) : getDerived().TraverseLabelStmt(((/*static_cast*/LabelStmt /*P*/ )(S))));
     case MSDependentExistsStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseMSDependentExistsStmt") ? ((Derived)(Native.$star(this))).TraverseMSDependentExistsStmt(((/*static_cast*/MSDependentExistsStmt /*P*/ )(S)), Queue) : getDerived().TraverseMSDependentExistsStmt(((/*static_cast*/MSDependentExistsStmt /*P*/ )(S))));
     case NullStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseNullStmt") ? ((Derived)(Native.$star(this))).TraverseNullStmt(((/*static_cast*/NullStmt /*P*/ )(S)), Queue) : getDerived().TraverseNullStmt(((/*static_cast*/NullStmt /*P*/ )(S))));
     case OMPAtomicDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPAtomicDirective") ? ((Derived)(Native.$star(this))).TraverseOMPAtomicDirective(((/*static_cast*/OMPAtomicDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPAtomicDirective(((/*static_cast*/OMPAtomicDirective /*P*/ )(S))));
     case OMPBarrierDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPBarrierDirective") ? ((Derived)(Native.$star(this))).TraverseOMPBarrierDirective(((/*static_cast*/OMPBarrierDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPBarrierDirective(((/*static_cast*/OMPBarrierDirective /*P*/ )(S))));
     case OMPCancelDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPCancelDirective") ? ((Derived)(Native.$star(this))).TraverseOMPCancelDirective(((/*static_cast*/OMPCancelDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPCancelDirective(((/*static_cast*/OMPCancelDirective /*P*/ )(S))));
     case OMPCancellationPointDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPCancellationPointDirective") ? ((Derived)(Native.$star(this))).TraverseOMPCancellationPointDirective(((/*static_cast*/OMPCancellationPointDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPCancellationPointDirective(((/*static_cast*/OMPCancellationPointDirective /*P*/ )(S))));
     case OMPCriticalDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPCriticalDirective") ? ((Derived)(Native.$star(this))).TraverseOMPCriticalDirective(((/*static_cast*/OMPCriticalDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPCriticalDirective(((/*static_cast*/OMPCriticalDirective /*P*/ )(S))));
     case OMPFlushDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPFlushDirective") ? ((Derived)(Native.$star(this))).TraverseOMPFlushDirective(((/*static_cast*/OMPFlushDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPFlushDirective(((/*static_cast*/OMPFlushDirective /*P*/ )(S))));
     case OMPDistributeDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPDistributeDirective") ? ((Derived)(Native.$star(this))).TraverseOMPDistributeDirective(((/*static_cast*/OMPDistributeDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPDistributeDirective(((/*static_cast*/OMPDistributeDirective /*P*/ )(S))));
     case OMPDistributeParallelForDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPDistributeParallelForDirective") ? ((Derived)(Native.$star(this))).TraverseOMPDistributeParallelForDirective(((/*static_cast*/OMPDistributeParallelForDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPDistributeParallelForDirective(((/*static_cast*/OMPDistributeParallelForDirective /*P*/ )(S))));
     case OMPDistributeParallelForSimdDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPDistributeParallelForSimdDirective") ? ((Derived)(Native.$star(this))).TraverseOMPDistributeParallelForSimdDirective(((/*static_cast*/OMPDistributeParallelForSimdDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPDistributeParallelForSimdDirective(((/*static_cast*/OMPDistributeParallelForSimdDirective /*P*/ )(S))));
     case OMPDistributeSimdDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPDistributeSimdDirective") ? ((Derived)(Native.$star(this))).TraverseOMPDistributeSimdDirective(((/*static_cast*/OMPDistributeSimdDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPDistributeSimdDirective(((/*static_cast*/OMPDistributeSimdDirective /*P*/ )(S))));
     case OMPForDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPForDirective") ? ((Derived)(Native.$star(this))).TraverseOMPForDirective(((/*static_cast*/OMPForDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPForDirective(((/*static_cast*/OMPForDirective /*P*/ )(S))));
     case OMPForSimdDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPForSimdDirective") ? ((Derived)(Native.$star(this))).TraverseOMPForSimdDirective(((/*static_cast*/OMPForSimdDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPForSimdDirective(((/*static_cast*/OMPForSimdDirective /*P*/ )(S))));
     case OMPParallelForDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPParallelForDirective") ? ((Derived)(Native.$star(this))).TraverseOMPParallelForDirective(((/*static_cast*/OMPParallelForDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPParallelForDirective(((/*static_cast*/OMPParallelForDirective /*P*/ )(S))));
     case OMPParallelForSimdDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPParallelForSimdDirective") ? ((Derived)(Native.$star(this))).TraverseOMPParallelForSimdDirective(((/*static_cast*/OMPParallelForSimdDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPParallelForSimdDirective(((/*static_cast*/OMPParallelForSimdDirective /*P*/ )(S))));
     case OMPSimdDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPSimdDirective") ? ((Derived)(Native.$star(this))).TraverseOMPSimdDirective(((/*static_cast*/OMPSimdDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPSimdDirective(((/*static_cast*/OMPSimdDirective /*P*/ )(S))));
     case OMPTargetParallelForSimdDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTargetParallelForSimdDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTargetParallelForSimdDirective(((/*static_cast*/OMPTargetParallelForSimdDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTargetParallelForSimdDirective(((/*static_cast*/OMPTargetParallelForSimdDirective /*P*/ )(S))));
     case OMPTaskLoopDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTaskLoopDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTaskLoopDirective(((/*static_cast*/OMPTaskLoopDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTaskLoopDirective(((/*static_cast*/OMPTaskLoopDirective /*P*/ )(S))));
     case OMPTaskLoopSimdDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTaskLoopSimdDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTaskLoopSimdDirective(((/*static_cast*/OMPTaskLoopSimdDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTaskLoopSimdDirective(((/*static_cast*/OMPTaskLoopSimdDirective /*P*/ )(S))));
     case OMPMasterDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPMasterDirective") ? ((Derived)(Native.$star(this))).TraverseOMPMasterDirective(((/*static_cast*/OMPMasterDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPMasterDirective(((/*static_cast*/OMPMasterDirective /*P*/ )(S))));
     case OMPOrderedDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPOrderedDirective") ? ((Derived)(Native.$star(this))).TraverseOMPOrderedDirective(((/*static_cast*/OMPOrderedDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPOrderedDirective(((/*static_cast*/OMPOrderedDirective /*P*/ )(S))));
     case OMPParallelDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPParallelDirective") ? ((Derived)(Native.$star(this))).TraverseOMPParallelDirective(((/*static_cast*/OMPParallelDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPParallelDirective(((/*static_cast*/OMPParallelDirective /*P*/ )(S))));
     case OMPParallelSectionsDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPParallelSectionsDirective") ? ((Derived)(Native.$star(this))).TraverseOMPParallelSectionsDirective(((/*static_cast*/OMPParallelSectionsDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPParallelSectionsDirective(((/*static_cast*/OMPParallelSectionsDirective /*P*/ )(S))));
     case OMPSectionDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPSectionDirective") ? ((Derived)(Native.$star(this))).TraverseOMPSectionDirective(((/*static_cast*/OMPSectionDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPSectionDirective(((/*static_cast*/OMPSectionDirective /*P*/ )(S))));
     case OMPSectionsDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPSectionsDirective") ? ((Derived)(Native.$star(this))).TraverseOMPSectionsDirective(((/*static_cast*/OMPSectionsDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPSectionsDirective(((/*static_cast*/OMPSectionsDirective /*P*/ )(S))));
     case OMPSingleDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPSingleDirective") ? ((Derived)(Native.$star(this))).TraverseOMPSingleDirective(((/*static_cast*/OMPSingleDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPSingleDirective(((/*static_cast*/OMPSingleDirective /*P*/ )(S))));
     case OMPTargetDataDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTargetDataDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTargetDataDirective(((/*static_cast*/OMPTargetDataDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTargetDataDirective(((/*static_cast*/OMPTargetDataDirective /*P*/ )(S))));
     case OMPTargetDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTargetDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTargetDirective(((/*static_cast*/OMPTargetDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTargetDirective(((/*static_cast*/OMPTargetDirective /*P*/ )(S))));
     case OMPTargetEnterDataDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTargetEnterDataDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTargetEnterDataDirective(((/*static_cast*/OMPTargetEnterDataDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTargetEnterDataDirective(((/*static_cast*/OMPTargetEnterDataDirective /*P*/ )(S))));
     case OMPTargetExitDataDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTargetExitDataDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTargetExitDataDirective(((/*static_cast*/OMPTargetExitDataDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTargetExitDataDirective(((/*static_cast*/OMPTargetExitDataDirective /*P*/ )(S))));
     case OMPTargetParallelDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTargetParallelDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTargetParallelDirective(((/*static_cast*/OMPTargetParallelDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTargetParallelDirective(((/*static_cast*/OMPTargetParallelDirective /*P*/ )(S))));
     case OMPTargetParallelForDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTargetParallelForDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTargetParallelForDirective(((/*static_cast*/OMPTargetParallelForDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTargetParallelForDirective(((/*static_cast*/OMPTargetParallelForDirective /*P*/ )(S))));
     case OMPTargetUpdateDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTargetUpdateDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTargetUpdateDirective(((/*static_cast*/OMPTargetUpdateDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTargetUpdateDirective(((/*static_cast*/OMPTargetUpdateDirective /*P*/ )(S))));
     case OMPTaskDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTaskDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTaskDirective(((/*static_cast*/OMPTaskDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTaskDirective(((/*static_cast*/OMPTaskDirective /*P*/ )(S))));
     case OMPTaskgroupDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTaskgroupDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTaskgroupDirective(((/*static_cast*/OMPTaskgroupDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTaskgroupDirective(((/*static_cast*/OMPTaskgroupDirective /*P*/ )(S))));
     case OMPTaskwaitDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTaskwaitDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTaskwaitDirective(((/*static_cast*/OMPTaskwaitDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTaskwaitDirective(((/*static_cast*/OMPTaskwaitDirective /*P*/ )(S))));
     case OMPTaskyieldDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTaskyieldDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTaskyieldDirective(((/*static_cast*/OMPTaskyieldDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTaskyieldDirective(((/*static_cast*/OMPTaskyieldDirective /*P*/ )(S))));
     case OMPTeamsDirectiveClass:
      return (has_overridden_traverse_with_queue_method("TraverseOMPTeamsDirective") ? ((Derived)(Native.$star(this))).TraverseOMPTeamsDirective(((/*static_cast*/OMPTeamsDirective /*P*/ )(S)), Queue) : getDerived().TraverseOMPTeamsDirective(((/*static_cast*/OMPTeamsDirective /*P*/ )(S))));
     case ObjCAtCatchStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCAtCatchStmt") ? ((Derived)(Native.$star(this))).TraverseObjCAtCatchStmt(((/*static_cast*/ObjCAtCatchStmt /*P*/ )(S)), Queue) : getDerived().TraverseObjCAtCatchStmt(((/*static_cast*/ObjCAtCatchStmt /*P*/ )(S))));
     case ObjCAtFinallyStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCAtFinallyStmt") ? ((Derived)(Native.$star(this))).TraverseObjCAtFinallyStmt(((/*static_cast*/ObjCAtFinallyStmt /*P*/ )(S)), Queue) : getDerived().TraverseObjCAtFinallyStmt(((/*static_cast*/ObjCAtFinallyStmt /*P*/ )(S))));
     case ObjCAtSynchronizedStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCAtSynchronizedStmt") ? ((Derived)(Native.$star(this))).TraverseObjCAtSynchronizedStmt(((/*static_cast*/ObjCAtSynchronizedStmt /*P*/ )(S)), Queue) : getDerived().TraverseObjCAtSynchronizedStmt(((/*static_cast*/ObjCAtSynchronizedStmt /*P*/ )(S))));
     case ObjCAtThrowStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCAtThrowStmt") ? ((Derived)(Native.$star(this))).TraverseObjCAtThrowStmt(((/*static_cast*/ObjCAtThrowStmt /*P*/ )(S)), Queue) : getDerived().TraverseObjCAtThrowStmt(((/*static_cast*/ObjCAtThrowStmt /*P*/ )(S))));
     case ObjCAtTryStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCAtTryStmt") ? ((Derived)(Native.$star(this))).TraverseObjCAtTryStmt(((/*static_cast*/ObjCAtTryStmt /*P*/ )(S)), Queue) : getDerived().TraverseObjCAtTryStmt(((/*static_cast*/ObjCAtTryStmt /*P*/ )(S))));
     case ObjCAutoreleasePoolStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCAutoreleasePoolStmt") ? ((Derived)(Native.$star(this))).TraverseObjCAutoreleasePoolStmt(((/*static_cast*/ObjCAutoreleasePoolStmt /*P*/ )(S)), Queue) : getDerived().TraverseObjCAutoreleasePoolStmt(((/*static_cast*/ObjCAutoreleasePoolStmt /*P*/ )(S))));
     case ObjCForCollectionStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseObjCForCollectionStmt") ? ((Derived)(Native.$star(this))).TraverseObjCForCollectionStmt(((/*static_cast*/ObjCForCollectionStmt /*P*/ )(S)), Queue) : getDerived().TraverseObjCForCollectionStmt(((/*static_cast*/ObjCForCollectionStmt /*P*/ )(S))));
     case ReturnStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseReturnStmt") ? ((Derived)(Native.$star(this))).TraverseReturnStmt(((/*static_cast*/ReturnStmt /*P*/ )(S)), Queue) : getDerived().TraverseReturnStmt(((/*static_cast*/ReturnStmt /*P*/ )(S))));
     case SEHExceptStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseSEHExceptStmt") ? ((Derived)(Native.$star(this))).TraverseSEHExceptStmt(((/*static_cast*/SEHExceptStmt /*P*/ )(S)), Queue) : getDerived().TraverseSEHExceptStmt(((/*static_cast*/SEHExceptStmt /*P*/ )(S))));
     case SEHFinallyStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseSEHFinallyStmt") ? ((Derived)(Native.$star(this))).TraverseSEHFinallyStmt(((/*static_cast*/SEHFinallyStmt /*P*/ )(S)), Queue) : getDerived().TraverseSEHFinallyStmt(((/*static_cast*/SEHFinallyStmt /*P*/ )(S))));
     case SEHLeaveStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseSEHLeaveStmt") ? ((Derived)(Native.$star(this))).TraverseSEHLeaveStmt(((/*static_cast*/SEHLeaveStmt /*P*/ )(S)), Queue) : getDerived().TraverseSEHLeaveStmt(((/*static_cast*/SEHLeaveStmt /*P*/ )(S))));
     case SEHTryStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseSEHTryStmt") ? ((Derived)(Native.$star(this))).TraverseSEHTryStmt(((/*static_cast*/SEHTryStmt /*P*/ )(S)), Queue) : getDerived().TraverseSEHTryStmt(((/*static_cast*/SEHTryStmt /*P*/ )(S))));
     case CaseStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseCaseStmt") ? ((Derived)(Native.$star(this))).TraverseCaseStmt(((/*static_cast*/CaseStmt /*P*/ )(S)), Queue) : getDerived().TraverseCaseStmt(((/*static_cast*/CaseStmt /*P*/ )(S))));
     case DefaultStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseDefaultStmt") ? ((Derived)(Native.$star(this))).TraverseDefaultStmt(((/*static_cast*/DefaultStmt /*P*/ )(S)), Queue) : getDerived().TraverseDefaultStmt(((/*static_cast*/DefaultStmt /*P*/ )(S))));
     case SwitchStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseSwitchStmt") ? ((Derived)(Native.$star(this))).TraverseSwitchStmt(((/*static_cast*/SwitchStmt /*P*/ )(S)), Queue) : getDerived().TraverseSwitchStmt(((/*static_cast*/SwitchStmt /*P*/ )(S))));
     case WhileStmtClass:
      return (has_overridden_traverse_with_queue_method("TraverseWhileStmt") ? ((Derived)(Native.$star(this))).TraverseWhileStmt(((/*static_cast*/WhileStmt /*P*/ )(S)), Queue) : getDerived().TraverseWhileStmt(((/*static_cast*/WhileStmt /*P*/ )(S))));
    }
    
    return true;
  }

  //<editor-fold defaultstate="collapsed" desc="clang::RecursiveASTVisitor::PostVisitStmt">
  @Converted(kind = Converted.Kind.AUTO,
   source = "${LLVM_SRC}/llvm/tools/clang/include/clang/AST/RecursiveASTVisitor.h", line = 569,
   FQN="clang::RecursiveASTVisitor::PostVisitStmt", NM="_ZN5clang19RecursiveASTVisitor13PostVisitStmtEPNS_4StmtE",
   cmd="jclank.sh -java-options=${SPUTNIK}/modules/org.clang.ast/llvmToClangType ${LLVM_SRC}/llvm/tools/clang/lib/StaticAnalyzer/Checkers/DebugCheckers.cpp -nm=_ZN5clang19RecursiveASTVisitor13PostVisitStmtEPNS_4StmtE")
  //</editor-fold>
  public/*private*/ default/*interface*/ boolean PostVisitStmt(Stmt /*P*/ S) {
    switch (S.getStmtClass()) {
     case NoStmtClass:
      break;
     case GCCAsmStmtClass:
      do {
        if (!getDerived().WalkUpFromGCCAsmStmt(((/*static_cast*/GCCAsmStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case MSAsmStmtClass:
      do {
        if (!getDerived().WalkUpFromMSAsmStmt(((/*static_cast*/MSAsmStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case AttributedStmtClass:
      do {
        if (!getDerived().WalkUpFromAttributedStmt(((/*static_cast*/AttributedStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case BreakStmtClass:
      do {
        if (!getDerived().WalkUpFromBreakStmt(((/*static_cast*/BreakStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXCatchStmtClass:
      do {
        if (!getDerived().WalkUpFromCXXCatchStmt(((/*static_cast*/CXXCatchStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXForRangeStmtClass:
      do {
        if (!getDerived().WalkUpFromCXXForRangeStmt(((/*static_cast*/CXXForRangeStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXTryStmtClass:
      do {
        if (!getDerived().WalkUpFromCXXTryStmt(((/*static_cast*/CXXTryStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CapturedStmtClass:
      do {
        if (!getDerived().WalkUpFromCapturedStmt(((/*static_cast*/CapturedStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CompoundStmtClass:
      do {
        if (!getDerived().WalkUpFromCompoundStmt(((/*static_cast*/CompoundStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ContinueStmtClass:
      do {
        if (!getDerived().WalkUpFromContinueStmt(((/*static_cast*/ContinueStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CoreturnStmtClass:
      do {
        if (!getDerived().WalkUpFromCoreturnStmt(((/*static_cast*/CoreturnStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CoroutineBodyStmtClass:
      do {
        if (!getDerived().WalkUpFromCoroutineBodyStmt(((/*static_cast*/CoroutineBodyStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case DeclStmtClass:
      do {
        if (!getDerived().WalkUpFromDeclStmt(((/*static_cast*/DeclStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case DoStmtClass:
      do {
        if (!getDerived().WalkUpFromDoStmt(((/*static_cast*/DoStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case BinaryConditionalOperatorClass:
      do {
        if (!getDerived().WalkUpFromBinaryConditionalOperator(((/*static_cast*/BinaryConditionalOperator /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ConditionalOperatorClass:
      do {
        if (!getDerived().WalkUpFromConditionalOperator(((/*static_cast*/ConditionalOperator /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case AddrLabelExprClass:
      do {
        if (!getDerived().WalkUpFromAddrLabelExpr(((/*static_cast*/AddrLabelExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ArraySubscriptExprClass:
      do {
        if (!getDerived().WalkUpFromArraySubscriptExpr(((/*static_cast*/ArraySubscriptExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ArrayTypeTraitExprClass:
      do {
        if (!getDerived().WalkUpFromArrayTypeTraitExpr(((/*static_cast*/ArrayTypeTraitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case AsTypeExprClass:
      do {
        if (!getDerived().WalkUpFromAsTypeExpr(((/*static_cast*/AsTypeExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case AtomicExprClass:
      do {
        if (!getDerived().WalkUpFromAtomicExpr(((/*static_cast*/AtomicExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case BinaryOperatorClass:
      do {
        if (!getDerived().WalkUpFromBinaryOperator(((/*static_cast*/BinaryOperator /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CompoundAssignOperatorClass:
      do {
        if (!getDerived().WalkUpFromCompoundAssignOperator(((/*static_cast*/CompoundAssignOperator /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case BlockExprClass:
      do {
        if (!getDerived().WalkUpFromBlockExpr(((/*static_cast*/BlockExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXBindTemporaryExprClass:
      do {
        if (!getDerived().WalkUpFromCXXBindTemporaryExpr(((/*static_cast*/CXXBindTemporaryExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXBoolLiteralExprClass:
      do {
        if (!getDerived().WalkUpFromCXXBoolLiteralExpr(((/*static_cast*/CXXBoolLiteralExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXConstructExprClass:
      do {
        if (!getDerived().WalkUpFromCXXConstructExpr(((/*static_cast*/CXXConstructExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXTemporaryObjectExprClass:
      do {
        if (!getDerived().WalkUpFromCXXTemporaryObjectExpr(((/*static_cast*/CXXTemporaryObjectExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXDefaultArgExprClass:
      do {
        if (!getDerived().WalkUpFromCXXDefaultArgExpr(((/*static_cast*/CXXDefaultArgExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXDefaultInitExprClass:
      do {
        if (!getDerived().WalkUpFromCXXDefaultInitExpr(((/*static_cast*/CXXDefaultInitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXDeleteExprClass:
      do {
        if (!getDerived().WalkUpFromCXXDeleteExpr(((/*static_cast*/CXXDeleteExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXDependentScopeMemberExprClass:
      do {
        if (!getDerived().WalkUpFromCXXDependentScopeMemberExpr(((/*static_cast*/CXXDependentScopeMemberExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXFoldExprClass:
      do {
        if (!getDerived().WalkUpFromCXXFoldExpr(((/*static_cast*/CXXFoldExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXInheritedCtorInitExprClass:
      do {
        if (!getDerived().WalkUpFromCXXInheritedCtorInitExpr(((/*static_cast*/CXXInheritedCtorInitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXNewExprClass:
      do {
        if (!getDerived().WalkUpFromCXXNewExpr(((/*static_cast*/CXXNewExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXNoexceptExprClass:
      do {
        if (!getDerived().WalkUpFromCXXNoexceptExpr(((/*static_cast*/CXXNoexceptExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXNullPtrLiteralExprClass:
      do {
        if (!getDerived().WalkUpFromCXXNullPtrLiteralExpr(((/*static_cast*/CXXNullPtrLiteralExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXPseudoDestructorExprClass:
      do {
        if (!getDerived().WalkUpFromCXXPseudoDestructorExpr(((/*static_cast*/CXXPseudoDestructorExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXScalarValueInitExprClass:
      do {
        if (!getDerived().WalkUpFromCXXScalarValueInitExpr(((/*static_cast*/CXXScalarValueInitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXStdInitializerListExprClass:
      do {
        if (!getDerived().WalkUpFromCXXStdInitializerListExpr(((/*static_cast*/CXXStdInitializerListExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXThisExprClass:
      do {
        if (!getDerived().WalkUpFromCXXThisExpr(((/*static_cast*/CXXThisExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXThrowExprClass:
      do {
        if (!getDerived().WalkUpFromCXXThrowExpr(((/*static_cast*/CXXThrowExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXTypeidExprClass:
      do {
        if (!getDerived().WalkUpFromCXXTypeidExpr(((/*static_cast*/CXXTypeidExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXUnresolvedConstructExprClass:
      do {
        if (!getDerived().WalkUpFromCXXUnresolvedConstructExpr(((/*static_cast*/CXXUnresolvedConstructExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXUuidofExprClass:
      do {
        if (!getDerived().WalkUpFromCXXUuidofExpr(((/*static_cast*/CXXUuidofExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CallExprClass:
      do {
        if (!getDerived().WalkUpFromCallExpr(((/*static_cast*/CallExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CUDAKernelCallExprClass:
      do {
        if (!getDerived().WalkUpFromCUDAKernelCallExpr(((/*static_cast*/CUDAKernelCallExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXMemberCallExprClass:
      do {
        if (!getDerived().WalkUpFromCXXMemberCallExpr(((/*static_cast*/CXXMemberCallExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXOperatorCallExprClass:
      do {
        if (!getDerived().WalkUpFromCXXOperatorCallExpr(((/*static_cast*/CXXOperatorCallExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case UserDefinedLiteralClass:
      do {
        if (!getDerived().WalkUpFromUserDefinedLiteral(((/*static_cast*/UserDefinedLiteral /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CStyleCastExprClass:
      do {
        if (!getDerived().WalkUpFromCStyleCastExpr(((/*static_cast*/CStyleCastExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXFunctionalCastExprClass:
      do {
        if (!getDerived().WalkUpFromCXXFunctionalCastExpr(((/*static_cast*/CXXFunctionalCastExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXConstCastExprClass:
      do {
        if (!getDerived().WalkUpFromCXXConstCastExpr(((/*static_cast*/CXXConstCastExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXDynamicCastExprClass:
      do {
        if (!getDerived().WalkUpFromCXXDynamicCastExpr(((/*static_cast*/CXXDynamicCastExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXReinterpretCastExprClass:
      do {
        if (!getDerived().WalkUpFromCXXReinterpretCastExpr(((/*static_cast*/CXXReinterpretCastExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CXXStaticCastExprClass:
      do {
        if (!getDerived().WalkUpFromCXXStaticCastExpr(((/*static_cast*/CXXStaticCastExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCBridgedCastExprClass:
      do {
        if (!getDerived().WalkUpFromObjCBridgedCastExpr(((/*static_cast*/ObjCBridgedCastExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ImplicitCastExprClass:
      do {
        if (!getDerived().WalkUpFromImplicitCastExpr(((/*static_cast*/ImplicitCastExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CharacterLiteralClass:
      do {
        if (!getDerived().WalkUpFromCharacterLiteral(((/*static_cast*/CharacterLiteral /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ChooseExprClass:
      do {
        if (!getDerived().WalkUpFromChooseExpr(((/*static_cast*/ChooseExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CompoundLiteralExprClass:
      do {
        if (!getDerived().WalkUpFromCompoundLiteralExpr(((/*static_cast*/CompoundLiteralExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ConvertVectorExprClass:
      do {
        if (!getDerived().WalkUpFromConvertVectorExpr(((/*static_cast*/ConvertVectorExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CoawaitExprClass:
      do {
        if (!getDerived().WalkUpFromCoawaitExpr(((/*static_cast*/CoawaitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CoyieldExprClass:
      do {
        if (!getDerived().WalkUpFromCoyieldExpr(((/*static_cast*/CoyieldExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case DeclRefExprClass:
      do {
        if (!getDerived().WalkUpFromDeclRefExpr(((/*static_cast*/DeclRefExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case DependentScopeDeclRefExprClass:
      do {
        if (!getDerived().WalkUpFromDependentScopeDeclRefExpr(((/*static_cast*/DependentScopeDeclRefExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case DesignatedInitExprClass:
      do {
        if (!getDerived().WalkUpFromDesignatedInitExpr(((/*static_cast*/DesignatedInitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case DesignatedInitUpdateExprClass:
      do {
        if (!getDerived().WalkUpFromDesignatedInitUpdateExpr(((/*static_cast*/DesignatedInitUpdateExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ExprWithCleanupsClass:
      do {
        if (!getDerived().WalkUpFromExprWithCleanups(((/*static_cast*/ExprWithCleanups /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ExpressionTraitExprClass:
      do {
        if (!getDerived().WalkUpFromExpressionTraitExpr(((/*static_cast*/ExpressionTraitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ExtVectorElementExprClass:
      do {
        if (!getDerived().WalkUpFromExtVectorElementExpr(((/*static_cast*/ExtVectorElementExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case FloatingLiteralClass:
      do {
        if (!getDerived().WalkUpFromFloatingLiteral(((/*static_cast*/FloatingLiteral /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case FunctionParmPackExprClass:
      do {
        if (!getDerived().WalkUpFromFunctionParmPackExpr(((/*static_cast*/FunctionParmPackExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case GNUNullExprClass:
      do {
        if (!getDerived().WalkUpFromGNUNullExpr(((/*static_cast*/GNUNullExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case GenericSelectionExprClass:
      do {
        if (!getDerived().WalkUpFromGenericSelectionExpr(((/*static_cast*/GenericSelectionExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ImaginaryLiteralClass:
      do {
        if (!getDerived().WalkUpFromImaginaryLiteral(((/*static_cast*/ImaginaryLiteral /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ImplicitValueInitExprClass:
      do {
        if (!getDerived().WalkUpFromImplicitValueInitExpr(((/*static_cast*/ImplicitValueInitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case InitListExprClass:
      do {
        if (!getDerived().WalkUpFromInitListExpr(((/*static_cast*/InitListExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case IntegerLiteralClass:
      do {
        if (!getDerived().WalkUpFromIntegerLiteral(((/*static_cast*/IntegerLiteral /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case LambdaExprClass:
      do {
        if (!getDerived().WalkUpFromLambdaExpr(((/*static_cast*/LambdaExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case MSPropertyRefExprClass:
      do {
        if (!getDerived().WalkUpFromMSPropertyRefExpr(((/*static_cast*/MSPropertyRefExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case MSPropertySubscriptExprClass:
      do {
        if (!getDerived().WalkUpFromMSPropertySubscriptExpr(((/*static_cast*/MSPropertySubscriptExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case MaterializeTemporaryExprClass:
      do {
        if (!getDerived().WalkUpFromMaterializeTemporaryExpr(((/*static_cast*/MaterializeTemporaryExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case MemberExprClass:
      do {
        if (!getDerived().WalkUpFromMemberExpr(((/*static_cast*/MemberExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case NoInitExprClass:
      do {
        if (!getDerived().WalkUpFromNoInitExpr(((/*static_cast*/NoInitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPArraySectionExprClass:
      do {
        if (!getDerived().WalkUpFromOMPArraySectionExpr(((/*static_cast*/OMPArraySectionExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCArrayLiteralClass:
      do {
        if (!getDerived().WalkUpFromObjCArrayLiteral(((/*static_cast*/ObjCArrayLiteral /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCAvailabilityCheckExprClass:
      do {
        if (!getDerived().WalkUpFromObjCAvailabilityCheckExpr(((/*static_cast*/ObjCAvailabilityCheckExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCBoolLiteralExprClass:
      do {
        if (!getDerived().WalkUpFromObjCBoolLiteralExpr(((/*static_cast*/ObjCBoolLiteralExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCBoxedExprClass:
      do {
        if (!getDerived().WalkUpFromObjCBoxedExpr(((/*static_cast*/ObjCBoxedExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCDictionaryLiteralClass:
      do {
        if (!getDerived().WalkUpFromObjCDictionaryLiteral(((/*static_cast*/ObjCDictionaryLiteral /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCEncodeExprClass:
      do {
        if (!getDerived().WalkUpFromObjCEncodeExpr(((/*static_cast*/ObjCEncodeExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCIndirectCopyRestoreExprClass:
      do {
        if (!getDerived().WalkUpFromObjCIndirectCopyRestoreExpr(((/*static_cast*/ObjCIndirectCopyRestoreExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCIsaExprClass:
      do {
        if (!getDerived().WalkUpFromObjCIsaExpr(((/*static_cast*/ObjCIsaExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCIvarRefExprClass:
      do {
        if (!getDerived().WalkUpFromObjCIvarRefExpr(((/*static_cast*/ObjCIvarRefExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCMessageExprClass:
      do {
        if (!getDerived().WalkUpFromObjCMessageExpr(((/*static_cast*/ObjCMessageExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCPropertyRefExprClass:
      do {
        if (!getDerived().WalkUpFromObjCPropertyRefExpr(((/*static_cast*/ObjCPropertyRefExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCProtocolExprClass:
      do {
        if (!getDerived().WalkUpFromObjCProtocolExpr(((/*static_cast*/ObjCProtocolExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCSelectorExprClass:
      do {
        if (!getDerived().WalkUpFromObjCSelectorExpr(((/*static_cast*/ObjCSelectorExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCStringLiteralClass:
      do {
        if (!getDerived().WalkUpFromObjCStringLiteral(((/*static_cast*/ObjCStringLiteral /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCSubscriptRefExprClass:
      do {
        if (!getDerived().WalkUpFromObjCSubscriptRefExpr(((/*static_cast*/ObjCSubscriptRefExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OffsetOfExprClass:
      do {
        if (!getDerived().WalkUpFromOffsetOfExpr(((/*static_cast*/OffsetOfExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OpaqueValueExprClass:
      do {
        if (!getDerived().WalkUpFromOpaqueValueExpr(((/*static_cast*/OpaqueValueExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case UnresolvedLookupExprClass:
      do {
        if (!getDerived().WalkUpFromUnresolvedLookupExpr(((/*static_cast*/UnresolvedLookupExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case UnresolvedMemberExprClass:
      do {
        if (!getDerived().WalkUpFromUnresolvedMemberExpr(((/*static_cast*/UnresolvedMemberExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case PackExpansionExprClass:
      do {
        if (!getDerived().WalkUpFromPackExpansionExpr(((/*static_cast*/PackExpansionExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ParenExprClass:
      do {
        if (!getDerived().WalkUpFromParenExpr(((/*static_cast*/ParenExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ParenListExprClass:
      do {
        if (!getDerived().WalkUpFromParenListExpr(((/*static_cast*/ParenListExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case PredefinedExprClass:
      do {
        if (!getDerived().WalkUpFromPredefinedExpr(((/*static_cast*/PredefinedExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case PseudoObjectExprClass:
      do {
        if (!getDerived().WalkUpFromPseudoObjectExpr(((/*static_cast*/PseudoObjectExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ShuffleVectorExprClass:
      do {
        if (!getDerived().WalkUpFromShuffleVectorExpr(((/*static_cast*/ShuffleVectorExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case SizeOfPackExprClass:
      do {
        if (!getDerived().WalkUpFromSizeOfPackExpr(((/*static_cast*/SizeOfPackExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case StmtExprClass:
      do {
        if (!getDerived().WalkUpFromStmtExpr(((/*static_cast*/StmtExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case StringLiteralClass:
      do {
        if (!getDerived().WalkUpFromStringLiteral(((/*static_cast*/StringLiteral /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case SubstNonTypeTemplateParmExprClass:
      do {
        if (!getDerived().WalkUpFromSubstNonTypeTemplateParmExpr(((/*static_cast*/SubstNonTypeTemplateParmExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case SubstNonTypeTemplateParmPackExprClass:
      do {
        if (!getDerived().WalkUpFromSubstNonTypeTemplateParmPackExpr(((/*static_cast*/SubstNonTypeTemplateParmPackExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case TypeTraitExprClass:
      do {
        if (!getDerived().WalkUpFromTypeTraitExpr(((/*static_cast*/TypeTraitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case TypoExprClass:
      do {
        if (!getDerived().WalkUpFromTypoExpr(((/*static_cast*/TypoExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case UnaryExprOrTypeTraitExprClass:
      do {
        if (!getDerived().WalkUpFromUnaryExprOrTypeTraitExpr(((/*static_cast*/UnaryExprOrTypeTraitExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case UnaryOperatorClass:
      do {
        if (!getDerived().WalkUpFromUnaryOperator(((/*static_cast*/UnaryOperator /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case VAArgExprClass:
      do {
        if (!getDerived().WalkUpFromVAArgExpr(((/*static_cast*/VAArgExpr /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ForStmtClass:
      do {
        if (!getDerived().WalkUpFromForStmt(((/*static_cast*/ForStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case GotoStmtClass:
      do {
        if (!getDerived().WalkUpFromGotoStmt(((/*static_cast*/GotoStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case IfStmtClass:
      do {
        if (!getDerived().WalkUpFromIfStmt(((/*static_cast*/IfStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case IndirectGotoStmtClass:
      do {
        if (!getDerived().WalkUpFromIndirectGotoStmt(((/*static_cast*/IndirectGotoStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case LabelStmtClass:
      do {
        if (!getDerived().WalkUpFromLabelStmt(((/*static_cast*/LabelStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case MSDependentExistsStmtClass:
      do {
        if (!getDerived().WalkUpFromMSDependentExistsStmt(((/*static_cast*/MSDependentExistsStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case NullStmtClass:
      do {
        if (!getDerived().WalkUpFromNullStmt(((/*static_cast*/NullStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPAtomicDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPAtomicDirective(((/*static_cast*/OMPAtomicDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPBarrierDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPBarrierDirective(((/*static_cast*/OMPBarrierDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPCancelDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPCancelDirective(((/*static_cast*/OMPCancelDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPCancellationPointDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPCancellationPointDirective(((/*static_cast*/OMPCancellationPointDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPCriticalDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPCriticalDirective(((/*static_cast*/OMPCriticalDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPFlushDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPFlushDirective(((/*static_cast*/OMPFlushDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPDistributeDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPDistributeDirective(((/*static_cast*/OMPDistributeDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPDistributeParallelForDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPDistributeParallelForDirective(((/*static_cast*/OMPDistributeParallelForDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPDistributeParallelForSimdDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPDistributeParallelForSimdDirective(((/*static_cast*/OMPDistributeParallelForSimdDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPDistributeSimdDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPDistributeSimdDirective(((/*static_cast*/OMPDistributeSimdDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPForDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPForDirective(((/*static_cast*/OMPForDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPForSimdDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPForSimdDirective(((/*static_cast*/OMPForSimdDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPParallelForDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPParallelForDirective(((/*static_cast*/OMPParallelForDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPParallelForSimdDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPParallelForSimdDirective(((/*static_cast*/OMPParallelForSimdDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPSimdDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPSimdDirective(((/*static_cast*/OMPSimdDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTargetParallelForSimdDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTargetParallelForSimdDirective(((/*static_cast*/OMPTargetParallelForSimdDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTaskLoopDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTaskLoopDirective(((/*static_cast*/OMPTaskLoopDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTaskLoopSimdDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTaskLoopSimdDirective(((/*static_cast*/OMPTaskLoopSimdDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPMasterDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPMasterDirective(((/*static_cast*/OMPMasterDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPOrderedDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPOrderedDirective(((/*static_cast*/OMPOrderedDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPParallelDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPParallelDirective(((/*static_cast*/OMPParallelDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPParallelSectionsDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPParallelSectionsDirective(((/*static_cast*/OMPParallelSectionsDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPSectionDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPSectionDirective(((/*static_cast*/OMPSectionDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPSectionsDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPSectionsDirective(((/*static_cast*/OMPSectionsDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPSingleDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPSingleDirective(((/*static_cast*/OMPSingleDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTargetDataDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTargetDataDirective(((/*static_cast*/OMPTargetDataDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTargetDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTargetDirective(((/*static_cast*/OMPTargetDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTargetEnterDataDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTargetEnterDataDirective(((/*static_cast*/OMPTargetEnterDataDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTargetExitDataDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTargetExitDataDirective(((/*static_cast*/OMPTargetExitDataDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTargetParallelDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTargetParallelDirective(((/*static_cast*/OMPTargetParallelDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTargetParallelForDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTargetParallelForDirective(((/*static_cast*/OMPTargetParallelForDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTargetUpdateDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTargetUpdateDirective(((/*static_cast*/OMPTargetUpdateDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTaskDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTaskDirective(((/*static_cast*/OMPTaskDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTaskgroupDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTaskgroupDirective(((/*static_cast*/OMPTaskgroupDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTaskwaitDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTaskwaitDirective(((/*static_cast*/OMPTaskwaitDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTaskyieldDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTaskyieldDirective(((/*static_cast*/OMPTaskyieldDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case OMPTeamsDirectiveClass:
      do {
        if (!getDerived().WalkUpFromOMPTeamsDirective(((/*static_cast*/OMPTeamsDirective /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCAtCatchStmtClass:
      do {
        if (!getDerived().WalkUpFromObjCAtCatchStmt(((/*static_cast*/ObjCAtCatchStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCAtFinallyStmtClass:
      do {
        if (!getDerived().WalkUpFromObjCAtFinallyStmt(((/*static_cast*/ObjCAtFinallyStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCAtSynchronizedStmtClass:
      do {
        if (!getDerived().WalkUpFromObjCAtSynchronizedStmt(((/*static_cast*/ObjCAtSynchronizedStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCAtThrowStmtClass:
      do {
        if (!getDerived().WalkUpFromObjCAtThrowStmt(((/*static_cast*/ObjCAtThrowStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCAtTryStmtClass:
      do {
        if (!getDerived().WalkUpFromObjCAtTryStmt(((/*static_cast*/ObjCAtTryStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCAutoreleasePoolStmtClass:
      do {
        if (!getDerived().WalkUpFromObjCAutoreleasePoolStmt(((/*static_cast*/ObjCAutoreleasePoolStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ObjCForCollectionStmtClass:
      do {
        if (!getDerived().WalkUpFromObjCForCollectionStmt(((/*static_cast*/ObjCForCollectionStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case ReturnStmtClass:
      do {
        if (!getDerived().WalkUpFromReturnStmt(((/*static_cast*/ReturnStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case SEHExceptStmtClass:
      do {
        if (!getDerived().WalkUpFromSEHExceptStmt(((/*static_cast*/SEHExceptStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case SEHFinallyStmtClass:
      do {
        if (!getDerived().WalkUpFromSEHFinallyStmt(((/*static_cast*/SEHFinallyStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case SEHLeaveStmtClass:
      do {
        if (!getDerived().WalkUpFromSEHLeaveStmt(((/*static_cast*/SEHLeaveStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case SEHTryStmtClass:
      do {
        if (!getDerived().WalkUpFromSEHTryStmt(((/*static_cast*/SEHTryStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case CaseStmtClass:
      do {
        if (!getDerived().WalkUpFromCaseStmt(((/*static_cast*/CaseStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case DefaultStmtClass:
      do {
        if (!getDerived().WalkUpFromDefaultStmt(((/*static_cast*/DefaultStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case SwitchStmtClass:
      do {
        if (!getDerived().WalkUpFromSwitchStmt(((/*static_cast*/SwitchStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
     case WhileStmtClass:
      do {
        if (!getDerived().WalkUpFromWhileStmt(((/*static_cast*/WhileStmt /*P*/ )(S)))) {
          return false;
        }
      } while (false);
      break;
    }
    
    return true;
  }

  //////////////////////////////////////////////////////////////
  // EXTRA MEMBERS: BEGIN

  
  public default/*interface*/ boolean has_overridden_traverse_with_queue_method(String TraverseMethodName) {
    throw new UnsupportedOperationException("Why not overridden in Derived class ? Must examine " + this.getClass() + 
            " and check if " + TraverseMethodName + " with Queue param is overridden. Usually classes do not override Traverse* methods");
  }
  
  public default/*interface*/ void $RecursiveASTVisitor() { 
    /*for derived classes*/ 
  }

  public default void $destroy$RecursiveASTVisitor() {    
    /*for derived classes*/ 
  }

  // The following regexp-based replacements can be applied in order to change the code
  //1)
  //Replace What:\(/\*static_cast\*/ std\.conditional<has_same_member_pointer_type<decltype\(/\*AddrOf\*//\*FPtr\*/RecursiveASTVisitor<Derived>::.*\), decltype\(Native\.\$bitand\(Derived\..*\)\)>\.value, Derived /\*&\*/ \, RecursiveASTVisitor<Derived> /\*&\*/ >\.type\)
  //=>
  //Replace With:\(Derived\)
  //2)
  //Replace What:has_same_member_pointer_type<decltype\(/\*AddrOf\*//\*FPtr\*/RecursiveASTVisitor<Derived>::(.*)\), decltype\(Native\.\$bitand\(Derived\..*\)\)>\.value
  //=>
  //Replace With:has_overridden_traverse_with_queue_method\("$1"\)
  //3)
  //Replace What:;\n(\s)*; 
  // => 
  //Replace With:;


  // EXTRA MEMBERS: END
  //////////////////////////////////////////////////////////////
}
