/////////////////////////////////////////////
/// MODULE org.llvm.ir

/// Non virtual functions with the same name
AnalysisInfoMixin.ID()->VerifierAnalysis.ID() [1]
AnalysisManagerBase.$assign()->AnalysisManager.$assign() [1]
AnalysisManagerBase.$assignMove()->AnalysisManager.$assignMove() [1]
CallSiteBase.getCallee()->CallSite.getCallee() [1]
CmpInst.getSignedPredicate()->ICmpInst.getSignedPredicate() [1]
CmpInst.isEquality()->ICmpInst.isEquality() [2]
CmpInst.swapOperands()->ICmpInst.swapOperands() [2]
Constant.getSplatValue()->ConstantDataVector.getSplatValue() [2]
DINode.getTag()->GenericDINode.getTag() [1]
DIScope.getDirectory()->DIFile.getDirectory() [1]
DIScope.getFilename()->DIFile.getFilename() [1]
DIScope.getName()->DIType.getName() [4]
DIType.mutate()->DICompositeType.mutate() [1]
DIVariable.getScope()->DILocalVariable.getScope() [1]
DomTreeGraphTraitsBase.getEntryNode()->GraphTraitsDominatorTree$P.getEntryNode() [2]
DomTreeGraphTraitsBase.nodes_begin()->GraphTraitsDominatorTree$P.nodes_begin() [2]
DomTreeGraphTraitsBase.nodes_end()->GraphTraitsDominatorTree$P.nodes_end() [2]
FixedNumOperandTraits.operands()->OptionalOperandTraits.operands() [1]
GlobalValue.getAlignment()->GlobalObject.getAlignment() [1]
GlobalValue.getComdat()->GlobalObject.getComdat() [1]
GlobalValue.getComdat$Const()->GlobalObject.getComdat$Const() [1]
GlobalValue.getSection()->GlobalObject.getSection() [1]
GlobalValue.hasComdat()->GlobalObject.hasComdat() [1]
GlobalValue.hasSection()->GlobalObject.hasSection() [1]
GlobalValue.isMaterializable()->Function.isMaterializable() [1]
GraphTraitsBasicBlock$C$P.getEntryNode()->GraphTraitsFunction$C$P.getEntryNode() [1]
GraphTraitsBasicBlock$P.getEntryNode()->GraphTraitsFunction$P.getEntryNode() [1]
IRBuilder.CreateAlignedLoad()->CGBuilderTy.CreateAlignedLoad() [1]
IRBuilder.CreateAlignedStore()->CGBuilderTy.CreateAlignedStore() [1]
IRBuilder.CreateBitCast()->CGBuilderTy.CreateBitCast() [1]
IRBuilder.CreateLoad()->CGBuilderTy.CreateLoad() [1]
IRBuilder.CreatePointerBitCastOrAddrSpaceCast()->CGBuilderTy.CreatePointerBitCastOrAddrSpaceCast() [1]
IRBuilder.CreateStore()->CGBuilderTy.CreateStore() [1]
IRBuilder.CreateStructGEP()->CGBuilderTy.CreateStructGEP() [1]
IRBuilderBase.CreateMemCpy()->CGBuilderTy.CreateMemCpy() [1]
IRBuilderBase.CreateMemMove()->CGBuilderTy.CreateMemMove() [1]
IRBuilderBase.CreateMemSet()->CGBuilderTy.CreateMemSet() [1]
IRBuilderDefaultInserter.InsertHelper()->InstCombineIRInserter.InsertHelper() [3]
Instruction.cloneImpl()->ReturnInst.cloneImpl() [44]
Instruction.getOpcode()->CastInst.getOpcode() [3]
Instruction.isCommutative()->CmpInst.isCommutative()->ICmpInst.isCommutative() [2]
Instruction.setInstructionSubclassData()->StoreInst.setInstructionSubclassData() [1]
MDNode.clone()->MDTuple.clone() [25]
MDNode.get()->MDTuple.get() [25]
MDNode.getDistinct()->MDTuple.getDistinct() [25]
MDNode.getIfExists()->MDTuple.getIfExists() [25]
MDNode.getTemporary()->MDTuple.getTemporary() [25]
MDNode.replaceOperandWith()->DILocation.replaceOperandWith() [1]
MDNodeOpsKey.calculateHash()->MDNodeKeyImplMDTuple.calculateHash() [2]
Metadata.handleChangedOperand()->MDNode.handleChangedOperand() [1]
PMDataManager.add()->FunctionPassManagerImpl.add() [2]
Pass.dump()->CallGraphWrapperPass.dump() [4]
PassInfoMixin.name()->LoopAccessAnalysis.name() [6]
ReplaceableMetadataImpl.getContext()->ValueAsMetadata.getContext() [1]
ReplaceableMetadataImpl.getIfExists()->ValueAsMetadata.getIfExists()->ConstantAsMetadata.getIfExists() [2]
ReplaceableMetadataImpl.replaceAllUsesWith()->ValueAsMetadata.replaceAllUsesWith() [1]
TerminatorInst.getNumSuccessors()->ReturnInst.getNumSuccessors() [10]
TerminatorInst.getSuccessor()->BranchInst.getSuccessor() [6]
TerminatorInst.setSuccessor()->BranchInst.setSuccessor() [6]
Type.isSized()->StructType.isSized() [1]
User.$new()->MemoryAccess.$new()->MemoryUseOrDef.$new()->MemoryUse.$new() [26]
User.Op()->MemoryUseOrDef.Op()->MemoryUse.Op() [44]
User.Op$Const()->MemoryUseOrDef.Op$Const()->MemoryUse.Op$Const() [44]
User.allocHungoffUses()->PHINode.allocHungoffUses() [2]
User.dropAllReferences()->Function.dropAllReferences() [2]
User.getNumOperands()->MemoryUseOrDef.getNumOperands()->MemoryUse.getNumOperands() [44]
User.getOperand()->MemoryUseOrDef.getOperand()->MemoryUse.getOperand() [44]
User.op_begin()->MemoryUseOrDef.op_begin()->MemoryUse.op_begin() [44]
User.op_begin$Const()->MemoryUseOrDef.op_begin$Const()->MemoryUse.op_begin$Const() [44]
User.op_end()->MemoryUseOrDef.op_end()->MemoryUse.op_end() [44]
User.op_end$Const()->MemoryUseOrDef.op_end$Const()->MemoryUse.op_end$Const() [44]
User.setOperand()->MemoryUseOrDef.setOperand()->MemoryUse.setOperand() [44]
Value.dump()->MemoryAccess.dump() [1]
Value.getContext()->Function.getContext() [2]
Value.getType()->GlobalValue.getType() [13]
Value.print()->Function.print() [4]
Value.setValueSubclassData()->ConstantExpr.setValueSubclassData() [1]
Value.stripPointerCasts()->Constant.stripPointerCasts() [1]
Value.stripPointerCasts$Const()->Constant.stripPointerCasts$Const() [1]
Value.user_back()->Instruction.user_back() [1]
Value.user_back$Const()->Instruction.user_back$Const() [1]
ValueAsMetadata.get()->ConstantAsMetadata.get() [2]
ValueAsMetadata.getValue()->ConstantAsMetadata.getValue() [1]
ValueHandleBase.$arrow()->TrackingVH.$arrow() [1]
ValueHandleBase.$assign()->WeakVH.$assign() [3]
ValueHandleBase.$star()->TrackingVH.$star() [1]
ValueHandleBase.getValPtr()->TrackingVH.getValPtr() [1]

/// Ambiguous points
Class FunctionPassManagerImpl inherits function findAnalysisPass via multiple branches:
[PMDataManager::findAnalysisPass]
[PMTopLevelManager::findAnalysisPass]

Class PassManagerImpl inherits function findAnalysisPass via multiple branches:
[PMDataManager::findAnalysisPass]
[PMTopLevelManager::findAnalysisPass]