exception() throw()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bad_exception() throw() : std::exception()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, class std::exception)
   2: exception([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline __gnu_cxx::__ops::_Iter_less_iter __iter_less_iter()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__ops::_Iter_less_iter() (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_less_iter)
   2: [B1.1] (ImplicitCastExpr, NoOp, const struct __gnu_cxx::__ops::_Iter_less_iter)
   3: [B1.2]
   4: [B1.3] (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_less_iter)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline __gnu_cxx::__ops::_Iter_less_val __iter_less_val()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__ops::_Iter_less_val() (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_less_val)
   2: [B1.1] (ImplicitCastExpr, NoOp, const struct __gnu_cxx::__ops::_Iter_less_val)
   3: [B1.2]
   4: [B1.3] (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_less_val)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline __gnu_cxx::__ops::_Iter_less_val __iter_comp_val(__gnu_cxx::__ops::_Iter_less_iter)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__ops::_Iter_less_val() (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_less_val)
   2: [B1.1] (ImplicitCastExpr, NoOp, const struct __gnu_cxx::__ops::_Iter_less_val)
   3: [B1.2]
   4: [B1.3] (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_less_val)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline __gnu_cxx::__ops::_Val_less_iter __val_less_iter()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__ops::_Val_less_iter() (CXXConstructExpr, struct __gnu_cxx::__ops::_Val_less_iter)
   2: [B1.1] (ImplicitCastExpr, NoOp, const struct __gnu_cxx::__ops::_Val_less_iter)
   3: [B1.2]
   4: [B1.3] (CXXConstructExpr, struct __gnu_cxx::__ops::_Val_less_iter)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline __gnu_cxx::__ops::_Val_less_iter __val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__ops::_Val_less_iter() (CXXConstructExpr, struct __gnu_cxx::__ops::_Val_less_iter)
   2: [B1.1] (ImplicitCastExpr, NoOp, const struct __gnu_cxx::__ops::_Val_less_iter)
   3: [B1.2]
   4: [B1.3] (CXXConstructExpr, struct __gnu_cxx::__ops::_Val_less_iter)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline __gnu_cxx::__ops::_Iter_equal_to_iter __iter_equal_to_iter()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__ops::_Iter_equal_to_iter() (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_equal_to_iter)
   2: [B1.1] (ImplicitCastExpr, NoOp, const struct __gnu_cxx::__ops::_Iter_equal_to_iter)
   3: [B1.2]
   4: [B1.3] (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_equal_to_iter)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline __gnu_cxx::__ops::_Iter_equal_to_val __iter_equal_to_val()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__ops::_Iter_equal_to_val() (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_equal_to_val)
   2: [B1.1] (ImplicitCastExpr, NoOp, const struct __gnu_cxx::__ops::_Iter_equal_to_val)
   3: [B1.2]
   4: [B1.3] (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_equal_to_val)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline __gnu_cxx::__ops::_Iter_equal_to_val __iter_comp_val(__gnu_cxx::__ops::_Iter_equal_to_iter)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__ops::_Iter_equal_to_val() (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_equal_to_val)
   2: [B1.1] (ImplicitCastExpr, NoOp, const struct __gnu_cxx::__ops::_Iter_equal_to_val)
   3: [B1.2]
   4: [B1.3] (CXXConstructExpr, struct __gnu_cxx::__ops::_Iter_equal_to_val)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int __lg(int __n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sizeof(int)
   2: 8
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: [B1.1] * [B1.3]
   5: 1
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: [B1.4] - [B1.6]
   8: __builtin_clz
   9: [B1.8] (ImplicitCastExpr, BuiltinFnToFnPtr, int (*)(unsigned int))
  10: __n
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B1.11] (ImplicitCastExpr, IntegralCast, unsigned int)
  13: [B1.9]([B1.12])
  14: [B1.13] (ImplicitCastExpr, IntegralCast, unsigned long)
  15: [B1.7] - [B1.14]
  16: [B1.15] (ImplicitCastExpr, IntegralCast, int)
  17: return [B1.16];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned int __lg(unsigned int __n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sizeof(int)
   2: 8
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: [B1.1] * [B1.3]
   5: 1
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: [B1.4] - [B1.6]
   8: __builtin_clz
   9: [B1.8] (ImplicitCastExpr, BuiltinFnToFnPtr, int (*)(unsigned int))
  10: __n
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, unsigned int)
  12: [B1.9]([B1.11])
  13: [B1.12] (ImplicitCastExpr, IntegralCast, unsigned long)
  14: [B1.7] - [B1.13]
  15: [B1.14] (ImplicitCastExpr, IntegralCast, unsigned int)
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline long __lg(long __n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sizeof(long)
   2: 8
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: [B1.1] * [B1.3]
   5: 1
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: [B1.4] - [B1.6]
   8: __builtin_clzl
   9: [B1.8] (ImplicitCastExpr, BuiltinFnToFnPtr, int (*)(unsigned long))
  10: __n
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, long)
  12: [B1.11] (ImplicitCastExpr, IntegralCast, unsigned long)
  13: [B1.9]([B1.12])
  14: [B1.13] (ImplicitCastExpr, IntegralCast, unsigned long)
  15: [B1.7] - [B1.14]
  16: [B1.15] (ImplicitCastExpr, IntegralCast, long)
  17: return [B1.16];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned long __lg(unsigned long __n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sizeof(long)
   2: 8
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: [B1.1] * [B1.3]
   5: 1
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: [B1.4] - [B1.6]
   8: __builtin_clzl
   9: [B1.8] (ImplicitCastExpr, BuiltinFnToFnPtr, int (*)(unsigned long))
  10: __n
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, unsigned long)
  12: [B1.9]([B1.11])
  13: [B1.12] (ImplicitCastExpr, IntegralCast, unsigned long)
  14: [B1.7] - [B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline long long __lg(long long __n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sizeof(long long)
   2: 8
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: [B1.1] * [B1.3]
   5: 1
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: [B1.4] - [B1.6]
   8: __builtin_clzll
   9: [B1.8] (ImplicitCastExpr, BuiltinFnToFnPtr, int (*)(unsigned long long))
  10: __n
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, long long)
  12: [B1.11] (ImplicitCastExpr, IntegralCast, unsigned long long)
  13: [B1.9]([B1.12])
  14: [B1.13] (ImplicitCastExpr, IntegralCast, unsigned long)
  15: [B1.7] - [B1.14]
  16: [B1.15] (ImplicitCastExpr, IntegralCast, long long)
  17: return [B1.16];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned long long __lg(unsigned long long __n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sizeof(long long)
   2: 8
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: [B1.1] * [B1.3]
   5: 1
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: [B1.4] - [B1.6]
   8: __builtin_clzll
   9: [B1.8] (ImplicitCastExpr, BuiltinFnToFnPtr, int (*)(unsigned long long))
  10: __n
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, unsigned long long)
  12: [B1.9]([B1.11])
  13: [B1.12] (ImplicitCastExpr, IntegralCast, unsigned long)
  14: [B1.7] - [B1.13]
  15: [B1.14] (ImplicitCastExpr, IntegralCast, unsigned long long)
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void assign(char_type &__c1, const char_type &__c2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char_type)
   3: __c1
   4: [B1.3] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool eq(const char_type &__c1, const char_type &__c2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c1
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char_type)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: __c2
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char_type)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B1.3] == [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool lt(const char_type &__c1, const char_type &__c2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c1
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char_type)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned char)
   4: static_cast<unsigned char>([B1.3]) (CXXStaticCastExpr, NoOp, unsigned char)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: __c2
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, char_type)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, unsigned char)
   9: static_cast<unsigned char>([B1.8]) (CXXStaticCastExpr, NoOp, unsigned char)
  10: [B1.9] (ImplicitCastExpr, IntegralCast, int)
  11: [B1.5] < [B1.10]
  12: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __builtin_memcmp
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, int (*)(const void *, const void *, unsigned long))
   3: __s1
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char_type *)
   5: [B1.4] (ImplicitCastExpr, BitCast, const void *)
   6: __s2
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const char_type *)
   8: [B1.7] (ImplicitCastExpr, BitCast, const void *)
   9: __n
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, size_t)
  11: [B1.2]([B1.5], [B1.8], [B1.10])
  12: return [B1.11];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 0
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static size_t length(const char_type *__s)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __builtin_strlen
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, unsigned long (*)(const char *))
   3: __s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char_type *)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __builtin_memchr
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(const void *, int, unsigned long))
   3: __s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char_type *)
   5: [B1.4] (ImplicitCastExpr, BitCast, const void *)
   6: __a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, char_type)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: __n
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, size_t)
  11: [B1.2]([B1.5], [B1.8], [B1.10])
  12: static_cast<const char_type *>([B1.11]) (CXXStaticCastExpr, BitCast, const char_type *)
  13: return [B1.12];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 0
   2: [B2.1] (ImplicitCastExpr, NullToPointer, const char_type *)
   3: return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __builtin_memmove
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(void *, const void *, unsigned long))
   3: __s1
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: [B1.4] (ImplicitCastExpr, BitCast, void *)
   6: __s2
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const char_type *)
   8: [B1.7] (ImplicitCastExpr, BitCast, const void *)
   9: __n
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, size_t)
  11: [B1.2]([B1.5], [B1.8], [B1.10])
  12: static_cast<char_type *>([B1.11]) (CXXStaticCastExpr, BitCast, char_type *)
  13: return [B1.12];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __s1
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, char_type *)
   3: return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __builtin_memcpy
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(void *, const void *, unsigned long))
   3: __s1
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: [B1.4] (ImplicitCastExpr, BitCast, void *)
   6: __s2
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const char_type *)
   8: [B1.7] (ImplicitCastExpr, BitCast, const void *)
   9: __n
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, size_t)
  11: [B1.2]([B1.5], [B1.8], [B1.10])
  12: static_cast<char_type *>([B1.11]) (CXXStaticCastExpr, BitCast, char_type *)
  13: return [B1.12];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __s1
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, char_type *)
   3: return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static char_type *assign(char_type *__s, size_t __n, char_type __a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __builtin_memset
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(void *, int, unsigned long))
   3: __s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: [B1.4] (ImplicitCastExpr, BitCast, void *)
   6: __a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, char_type)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: __n
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, size_t)
  11: [B1.2]([B1.5], [B1.8], [B1.10])
  12: static_cast<char_type *>([B1.11]) (CXXStaticCastExpr, BitCast, char_type *)
  13: return [B1.12];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __s
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, char_type *)
   3: return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static char_type to_char_type(const int_type &__c)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int_type)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, char_type)
   4: static_cast<char_type>([B1.3]) (CXXStaticCastExpr, NoOp, char_type)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int_type to_int_type(const char_type &__c)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char_type)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned char)
   4: static_cast<unsigned char>([B1.3]) (CXXStaticCastExpr, NoOp, unsigned char)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int_type)
   6: static_cast<int_type>([B1.5]) (CXXStaticCastExpr, NoOp, int_type)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool eq_int_type(const int_type &__c1, const int_type &__c2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c1
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int_type)
   3: __c2
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int_type)
   5: [B1.2] == [B1.4]
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int_type eof()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: -[B1.1]
   3: static_cast<int_type>([B1.2]) (CXXStaticCastExpr, NoOp, int_type)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int_type not_eof(const int_type &__c)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ([B4.6]) ? [B2.1] : [B3.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: __c
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int_type)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: __c
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int_type)
   3: eof
   4: [B4.3] (ImplicitCastExpr, FunctionToPointerDecay, int_type (*)(void))
   5: [B4.4]()
   6: [B4.2] == [B4.5]
   T: ([B4.6]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

static void assign(char_type &__c1, const char_type &__c2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char_type)
   3: __c1
   4: [B1.3] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool eq(const char_type &__c1, const char_type &__c2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c1
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char_type)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: __c2
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char_type)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B1.3] == [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool lt(const char_type &__c1, const char_type &__c2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c1
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char_type)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: __c2
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char_type)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B1.3] < [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: wmemcmp
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const wchar_t *, const wchar_t *, size_t) throw())
   3: __s1
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char_type *)
   5: __s2
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const char_type *)
   7: __n
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, size_t)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 0
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static size_t length(const char_type *__s)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: wcslen
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, size_t (*)(const wchar_t *) throw())
   3: __s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char_type *)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: wmemchr
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const wchar_t *(*)(const wchar_t *, wchar_t, size_t) throw())
   3: __s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char_type *)
   5: __a
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char_type)
   7: __n
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, size_t)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 0
   2: [B2.1] (ImplicitCastExpr, NullToPointer, const char_type *)
   3: return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: wmemmove
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, wchar_t *(*)(wchar_t *, const wchar_t *, size_t) throw())
   3: __s1
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: __s2
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const char_type *)
   7: __n
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, size_t)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __s1
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, char_type *)
   3: return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: wmemcpy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, wchar_t *(*)(wchar_t *__restrict, const wchar_t *__restrict, size_t) throw())
   3: __s1
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: __s2
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const char_type *)
   7: __n
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, size_t)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __s1
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, char_type *)
   3: return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static char_type *assign(char_type *__s, size_t __n, char_type __a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: wmemset
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, wchar_t *(*)(wchar_t *, wchar_t, size_t) throw())
   3: __s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: __a
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char_type)
   7: __n
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, size_t)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __s
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, char_type *)
   3: return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B3.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static char_type to_char_type(const int_type &__c)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int_type)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, char_type)
   4: char_type([B1.3]) (CXXFunctionalCastExpr, NoOp, char_type)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int_type to_int_type(const char_type &__c)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char_type)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int_type)
   4: int_type([B1.3]) (CXXFunctionalCastExpr, NoOp, int_type)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool eq_int_type(const int_type &__c1, const int_type &__c2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c1
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int_type)
   3: __c2
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int_type)
   5: [B1.2] == [B1.4]
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int_type eof()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 4294967295U
   2: static_cast<int_type>(([B1.1])) (CXXStaticCastExpr, NoOp, int_type)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int_type not_eof(const int_type &__c)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.8] ? [B2.2] : [B3.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   2: [B2.1] (ImplicitCastExpr, IntegralCast, unsigned int)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: __c
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int_type)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: eq_int_type
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const int_type &, const int_type &))
   3: __c
   4: eof
   5: [B4.4] (ImplicitCastExpr, FunctionToPointerDecay, int_type (*)(void))
   6: [B4.5]()
   7: [B4.6]
   8: [B4.2]([B4.3], [B4.7])
   T: [B4.8] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline int __convert_from_v(const __c_locale &__cloc, char *__out, const int __size, const char *__fmt, ...)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__uselocale
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (uselocale) *)
   3: __cloc
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __c_locale)
   5: [B1.2]([B1.4])
   6: __c_locale __old = __gnu_cxx::__uselocale(__cloc);
   7:  (CXXConstructExpr, __builtin_va_list)
   8: __builtin_va_list __args;
   9: __builtin_va_start
  10: [B1.9] (ImplicitCastExpr, BuiltinFnToFnPtr, void (*)(struct __va_list_tag *, ...))
  11: __args
  12: [B1.11] (ImplicitCastExpr, ArrayToPointerDecay, struct __va_list_tag *)
  13: __fmt
  14: [B1.10]([B1.12], [B1.13])
  15: __builtin_vsnprintf
  16: [B1.15] (ImplicitCastExpr, BuiltinFnToFnPtr, int (*)(char *, unsigned long, const char *, struct __va_list_tag *))
  17: __out
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, char *)
  19: __size
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.20] (ImplicitCastExpr, IntegralCast, unsigned long)
  22: __fmt
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, const char *)
  24: __args
  25: [B1.24] (ImplicitCastExpr, ArrayToPointerDecay, struct __va_list_tag *)
  26: [B1.16]([B1.18], [B1.21], [B1.23], [B1.25])
  27: const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);
  28: __builtin_va_end
  29: [B1.28] (ImplicitCastExpr, BuiltinFnToFnPtr, void (*)(struct __va_list_tag *))
  30: __args
  31: [B1.30] (ImplicitCastExpr, ArrayToPointerDecay, struct __va_list_tag *)
  32: [B1.29]([B1.31])
  33: __gnu_cxx::__uselocale
  34: [B1.33] (ImplicitCastExpr, FunctionToPointerDecay, typeof (uselocale) *)
  35: __old
  36: [B1.35] (ImplicitCastExpr, LValueToRValue, __c_locale)
  37: [B1.34]([B1.36])
  38: __ret
  39: [B1.38] (ImplicitCastExpr, LValueToRValue, int)
  40: return [B1.39];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline unsigned int __bswap_32(unsigned int __bsx)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __builtin_bswap32
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, unsigned int (*)(unsigned int))
   3: __bsx
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline __uint64_t __bswap_64(__uint64_t __bsx)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __builtin_bswap64
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, unsigned long long (*)(unsigned long long))
   3: __bsx
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __uint64_t)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long long)
   6: [B1.2]([B1.5])
   7: [B1.6] (ImplicitCastExpr, IntegralCast, __uint64_t)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

__pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __fct
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, void (*)(void *))
   3: __cancel_routine([B1.2]) (Member initializer)
   4: __arg
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, void *)
   6: __cancel_arg([B1.5]) (Member initializer)
   7: 1
   8: __do_it([B1.7]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~__pthread_cleanup_class()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->__cancel_routine
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, void (*)(void *))
   4: this
   5: [B1.4]->__cancel_arg
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, void *)
   7: [B1.3]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->__do_it
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: [B2.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.4]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

void __setdoit(int __newval)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __newval
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B1.3]->__do_it
   5: [B1.4] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void __defer()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: pthread_setcanceltype
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int *))
   3: PTHREAD_CANCEL_DEFERRED
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: this
   6: [B1.5]->__cancel_type
   7: &[B1.6]
   8: [B1.2]([B1.4], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void __restore() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: pthread_setcanceltype
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int *))
   3: this
   4: [B1.3]->__cancel_type
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, int *)
   8: [B1.2]([B1.5], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_active_p()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __gthread_active_ptr
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, void *)
   3: 0
   4: [B1.3] (ImplicitCastExpr, NullToPointer, void *)
   5: [B1.2] != [B1.4]
   6: [B1.5] (ImplicitCastExpr, IntegralCast, int)
   7: return [B1.6];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: __gthrw___pthread_key_create
   2: &[B2.1]
   3: (void *)[B2.2] (CStyleCastExpr, BitCast, void *)
   4: static void *const __gthread_active_ptr = __extension__ (void *)&__gthrw___pthread_key_create;
   Preds (1): B3
   Succs (1): B1

 [B3]
   T: static init __gthread_active_ptr
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *__args)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_create) *)
   3: __threadid
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_t *)
   5: __null
   6: [B1.5] (ImplicitCastExpr, NullToPointer, const pthread_attr_t *)
   7: __func
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, void *(*)(void *))
   9: __args
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, void *)
  11: [B1.2]([B1.4], [B1.6], [B1.8], [B1.10])
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_join
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_join) *)
   3: __threadid
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_t)
   5: __value_ptr
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, void **)
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_detach(__gthread_t __threadid)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_detach
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_detach) *)
   3: __threadid
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_t)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_equal) *)
   3: __t1
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_t)
   5: __t2
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, __gthread_t)
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline __gthread_t __gthread_self()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_self
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_self) *)
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_yield()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_sched_yield
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (sched_yield) *)
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_once(__gthread_once_t *__once, void (*__func)())
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 1
   2: -[B1.1]
   3: return [B1.2];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __gthrw_pthread_once
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_once) *)
   3: __once
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, __gthread_once_t *)
   5: __func
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, void (*)(void))
   7: [B2.2]([B2.4], [B2.6])
   8: return [B2.7];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __gthread_active_p
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
   3: [B3.2]()
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *))
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_key_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_key_create) *)
   3: __key
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_key_t *)
   5: __dtor
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, void (*)(void *))
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_key_delete(__gthread_key_t __key)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_key_delete
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_key_delete) *)
   3: __key
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_key_t)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline void *__gthread_getspecific(__gthread_key_t __key)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_getspecific
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_getspecific) *)
   3: __key
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_key_t)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_setspecific
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_setspecific) *)
   3: __key
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_key_t)
   5: __ptr
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: __gthrw_pthread_mutex_init
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_mutex_init) *)
   3: __mutex
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_mutex_t *)
   5: __null
   6: [B1.5] (ImplicitCastExpr, NullToPointer, const pthread_mutexattr_t *)
   7: [B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: __gthread_active_p
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
   3: [B2.2]()
   4: [B2.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.4]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __gthrw_pthread_mutex_destroy
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_mutex_destroy) *)
   3: __mutex
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, __gthread_mutex_t *)
   5: [B2.2]([B2.4])
   6: return [B2.5];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __gthread_active_p
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
   3: [B3.2]()
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __gthrw_pthread_mutex_lock
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_mutex_lock) *)
   3: __mutex
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, __gthread_mutex_t *)
   5: [B2.2]([B2.4])
   6: return [B2.5];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __gthread_active_p
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
   3: [B3.2]()
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __gthrw_pthread_mutex_trylock
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_mutex_trylock) *)
   3: __mutex
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, __gthread_mutex_t *)
   5: [B2.2]([B2.4])
   6: return [B2.5];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __gthread_active_p
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
   3: [B3.2]()
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *__abs_timeout)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __gthrw_pthread_mutex_timedlock
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_mutex_timedlock) *)
   3: __mutex
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, __gthread_mutex_t *)
   5: __abs_timeout
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, const __gthread_time_t *)
   7: [B2.2]([B2.4], [B2.6])
   8: return [B2.7];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __gthread_active_p
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
   3: [B3.2]()
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __gthrw_pthread_mutex_unlock
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_mutex_unlock) *)
   3: __mutex
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, __gthread_mutex_t *)
   5: [B2.2]([B2.4])
   6: return [B2.5];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __gthread_active_p
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
   3: [B3.2]()
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthread_mutex_lock
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(__gthread_mutex_t *))
   3: __mutex
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_recursive_mutex_t *)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthread_mutex_trylock
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(__gthread_mutex_t *))
   3: __mutex
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_recursive_mutex_t *)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *__abs_timeout)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthread_mutex_timedlock
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(__gthread_mutex_t *, const __gthread_time_t *))
   3: __mutex
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_recursive_mutex_t *)
   5: __abs_timeout
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const __gthread_time_t *)
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthread_mutex_unlock
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(__gthread_mutex_t *))
   3: __mutex
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_recursive_mutex_t *)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthread_mutex_destroy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(__gthread_mutex_t *))
   3: __mutex
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_recursive_mutex_t *)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_cond_broadcast
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_cond_broadcast) *)
   3: __cond
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_cond_t *)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_cond_signal(__gthread_cond_t *__cond)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_cond_signal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_cond_signal) *)
   3: __cond
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_cond_t *)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_cond_wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_cond_wait) *)
   3: __cond
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_cond_t *)
   5: __mutex
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, __gthread_mutex_t *)
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *__abs_timeout)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_cond_timedwait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_cond_timedwait) *)
   3: __cond
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_cond_t *)
   5: __mutex
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, __gthread_mutex_t *)
   7: __abs_timeout
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const __gthread_time_t *)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *__mutex)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthread_cond_wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(__gthread_cond_t *, __gthread_mutex_t *))
   3: __cond
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_cond_t *)
   5: __mutex
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, __gthread_recursive_mutex_t *)
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline int __gthread_cond_destroy(__gthread_cond_t *__cond)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gthrw_pthread_cond_destroy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typeof (pthread_cond_destroy) *)
   3: __cond
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, __gthread_cond_t *)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __mem
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, volatile _Atomic_word *)
   3: 4
   4: __val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: __atomic_fetch_add([B1.2], [B1.5], [B1.3])
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline void __atomic_add(volatile _Atomic_word *__mem, int __val)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __mem
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, volatile _Atomic_word *)
   3: 4
   4: __val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: __atomic_fetch_add([B1.2], [B1.5], [B1.3])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __mem
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Atomic_word *)
   3: *[B1.2]
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Atomic_word)
   5: _Atomic_word __result = *__mem;
   6: __mem
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Atomic_word *)
   8: *[B1.7]
   9: __val
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] += [B1.10]
  12: __result
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, _Atomic_word)
  14: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline void __atomic_add_single(_Atomic_word *__mem, int __val)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __mem
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Atomic_word *)
   3: *[B1.2]
   4: __val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3] += [B1.5]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline _Atomic_word __exchange_and_add_dispatch(_Atomic_word *__mem, int __val)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __exchange_and_add_single
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Atomic_word (*)(_Atomic_word *, int))
   3: __mem
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Atomic_word *)
   5: __val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __exchange_and_add
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, _Atomic_word (*)(volatile _Atomic_word *, int))
   3: __mem
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, _Atomic_word *)
   5: [B2.4] (ImplicitCastExpr, NoOp, volatile _Atomic_word *)
   6: __val
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B2.2]([B2.5], [B2.7])
   9: return [B2.8];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __gthread_active_p
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
   3: [B3.2]()
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static inline void __atomic_add_dispatch(_Atomic_word *__mem, int __val)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __atomic_add_single
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(_Atomic_word *, int))
   3: __mem
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Atomic_word *)
   5: __val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __atomic_add
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(volatile _Atomic_word *, int))
   3: __mem
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, _Atomic_word *)
   5: [B2.4] (ImplicitCastExpr, NoOp, volatile _Atomic_word *)
   6: __val
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B2.2]([B2.5], [B2.7])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __gthread_active_p
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
   3: [B3.2]()
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

bad_alloc() throw() : std::exception()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, class std::exception)
   2: exception([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void *operator new(std::size_t, void *__p) throw()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, void *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void *operator new[](std::size_t, void *__p) throw()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, void *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void operator delete(void *, void *) throw()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void operator delete[](void *, void *) throw()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const std::locale &__other) const throw()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator==
   3: __other
   4: [B1.2]([B1.3])
   5: !([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.3] ? [B2.1] : [B3.1]
   2: _M_refcount([B1.1]) (Member initializer)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 1
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: 0
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: __refs
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: [B4.2] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B4.3] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

void _M_add_reference() const throw()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__atomic_add_dispatch
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(_Atomic_word *, int))
   3: this
   4: [B1.3]->_M_refcount
   5: &[B1.4]
   6: 1
   7: [B1.2]([B1.5], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void _M_remove_reference() const throw()
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   T: try ...
   Succs (1): B2

 [B2]
  catch (...):
   1: catch (...) {
}
   Preds (1): B1
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->~facet() (Implicit destructor)
   3: delete [B3.1]
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: __gnu_cxx::__exchange_and_add_dispatch
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, _Atomic_word (*)(_Atomic_word *, int))
   3: this
   4: [B4.3]->_M_refcount
   5: &[B4.4]
   6: 1
   7: -[B4.6]
   8: [B4.2]([B4.5], [B4.7])
   9: 1
  10: [B4.8] == [B4.9]
   T: if [B4.10]
   Preds (1): B5
   Succs (2): B3 B0

 [B0 (EXIT)]
   Preds (3): B2 B3 B4

id()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void _M_add_reference() throw()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__atomic_add_dispatch
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(_Atomic_word *, int))
   3: this
   4: [B1.3]->_M_refcount
   5: &[B1.4]
   6: 1
   7: [B1.2]([B1.5], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void _M_remove_reference() throw()
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   T: try ...
   Succs (1): B2

 [B2]
  catch (...):
   1: catch (...) {
}
   Preds (1): B1
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->~_Impl() (Implicit destructor)
   3: delete [B3.1]
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: __gnu_cxx::__exchange_and_add_dispatch
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, _Atomic_word (*)(_Atomic_word *, int))
   3: this
   4: [B4.3]->_M_refcount
   5: &[B4.4]
   6: 1
   7: -[B4.6]
   8: [B4.2]([B4.5], [B4.7])
   9: 1
  10: [B4.8] == [B4.9]
   T: if [B4.10]
   Preds (1): B5
   Succs (2): B3 B0

 [B0 (EXIT)]
   Preds (3): B2 B3 B4

bool _M_check_same_name()
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: __ret
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: return [B1.2];
   Preds (3): B4 B5 B7
   Succs (1): B0

 [B2]
   1: __i
   2: ++[B2.1]
   Preds (1): B3
   Succs (1): B5

 [B3]
   1: __builtin_strcmp
   2: [B3.1] (ImplicitCastExpr, BuiltinFnToFnPtr, int (*)(const char *, const char *))
   3: this
   4: [B3.3]->_M_names
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, char **)
   6: __i
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, size_t)
   8: [B3.5][[B3.7]]
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, char *)
  10: [B3.9] (ImplicitCastExpr, NoOp, const char *)
  11: this
  12: [B3.11]->_M_names
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, char **)
  14: __i
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, size_t)
  16: 1
  17: [B3.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: [B3.15] + [B3.17]
  19: [B3.13][[B3.18]]
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, char *)
  21: [B3.20] (ImplicitCastExpr, NoOp, const char *)
  22: [B3.2]([B3.10], [B3.21])
  23: 0
  24: [B3.22] == [B3.23]
  25: __ret
  26: [B3.25] = [B3.24]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: __i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: _S_categories_size
   4: [B4.3] (ImplicitCastExpr, IntegralCast, int)
   5: 1
   6: [B4.4] - [B4.5]
   7: [B4.6] (ImplicitCastExpr, IntegralCast, unsigned long)
   8: [B4.2] < [B4.7]
   T: for (...; [B5.2] && [B4.8]; ...)
   Preds (1): B5
   Succs (2): B3 B1

 [B5]
   1: __ret
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B5.2] && ...
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: 0
   2: [B6.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: size_t __i = 0;
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: true
   2: bool __ret = true;
   3: this
   4: [B7.3]->_M_names
   5: [B7.4] (ImplicitCastExpr, LValueToRValue, char **)
   6: 1
   7: [B7.5][[B7.6]]
   8: [B7.7] (ImplicitCastExpr, LValueToRValue, char *)
   9: [B7.8] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B7.9]
   Preds (1): B8
   Succs (2): B6 B1

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Fmtflags operator&(std::_Ios_Fmtflags __a, std::_Ios_Fmtflags __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: static_cast<int>([B1.7]) (CXXStaticCastExpr, NoOp, int)
   9: [B1.4] & [B1.8]
  10: std::_Ios_Fmtflags([B1.9]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Fmtflags)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Fmtflags operator|(std::_Ios_Fmtflags __a, std::_Ios_Fmtflags __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: static_cast<int>([B1.7]) (CXXStaticCastExpr, NoOp, int)
   9: [B1.4] | [B1.8]
  10: std::_Ios_Fmtflags([B1.9]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Fmtflags)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Fmtflags operator^(std::_Ios_Fmtflags __a, std::_Ios_Fmtflags __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: static_cast<int>([B1.7]) (CXXStaticCastExpr, NoOp, int)
   9: [B1.4] ^ [B1.8]
  10: std::_Ios_Fmtflags([B1.9]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Fmtflags)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Fmtflags operator~(std::_Ios_Fmtflags __a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: ~[B1.4]
   6: std::_Ios_Fmtflags([B1.5]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Fmtflags)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::_Ios_Fmtflags &operator|=(std::_Ios_Fmtflags &__a, std::_Ios_Fmtflags __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags, enum std::_Ios_Fmtflags))
   3: __a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   7: [B1.4] | [B1.6] (OperatorCall)
   8: __a
   9: [B1.8] = [B1.7]
  10: [B1.9] (ImplicitCastExpr, NoOp, const enum std::_Ios_Fmtflags)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::_Ios_Fmtflags &operator&=(std::_Ios_Fmtflags &__a, std::_Ios_Fmtflags __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags, enum std::_Ios_Fmtflags))
   3: __a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   7: [B1.4] & [B1.6] (OperatorCall)
   8: __a
   9: [B1.8] = [B1.7]
  10: [B1.9] (ImplicitCastExpr, NoOp, const enum std::_Ios_Fmtflags)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::_Ios_Fmtflags &operator^=(std::_Ios_Fmtflags &__a, std::_Ios_Fmtflags __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags, enum std::_Ios_Fmtflags))
   3: __a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Fmtflags)
   7: [B1.4] ^ [B1.6] (OperatorCall)
   8: __a
   9: [B1.8] = [B1.7]
  10: [B1.9] (ImplicitCastExpr, NoOp, const enum std::_Ios_Fmtflags)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Openmode operator&(std::_Ios_Openmode __a, std::_Ios_Openmode __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: static_cast<int>([B1.7]) (CXXStaticCastExpr, NoOp, int)
   9: [B1.4] & [B1.8]
  10: std::_Ios_Openmode([B1.9]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Openmode)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Openmode operator|(std::_Ios_Openmode __a, std::_Ios_Openmode __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: static_cast<int>([B1.7]) (CXXStaticCastExpr, NoOp, int)
   9: [B1.4] | [B1.8]
  10: std::_Ios_Openmode([B1.9]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Openmode)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Openmode operator^(std::_Ios_Openmode __a, std::_Ios_Openmode __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: static_cast<int>([B1.7]) (CXXStaticCastExpr, NoOp, int)
   9: [B1.4] ^ [B1.8]
  10: std::_Ios_Openmode([B1.9]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Openmode)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Openmode operator~(std::_Ios_Openmode __a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: ~[B1.4]
   6: std::_Ios_Openmode([B1.5]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Openmode)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::_Ios_Openmode &operator|=(std::_Ios_Openmode &__a, std::_Ios_Openmode __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Openmode (*)(enum std::_Ios_Openmode, enum std::_Ios_Openmode))
   3: __a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   7: [B1.4] | [B1.6] (OperatorCall)
   8: __a
   9: [B1.8] = [B1.7]
  10: [B1.9] (ImplicitCastExpr, NoOp, const enum std::_Ios_Openmode)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::_Ios_Openmode &operator&=(std::_Ios_Openmode &__a, std::_Ios_Openmode __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Openmode (*)(enum std::_Ios_Openmode, enum std::_Ios_Openmode))
   3: __a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   7: [B1.4] & [B1.6] (OperatorCall)
   8: __a
   9: [B1.8] = [B1.7]
  10: [B1.9] (ImplicitCastExpr, NoOp, const enum std::_Ios_Openmode)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::_Ios_Openmode &operator^=(std::_Ios_Openmode &__a, std::_Ios_Openmode __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Openmode (*)(enum std::_Ios_Openmode, enum std::_Ios_Openmode))
   3: __a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Openmode)
   7: [B1.4] ^ [B1.6] (OperatorCall)
   8: __a
   9: [B1.8] = [B1.7]
  10: [B1.9] (ImplicitCastExpr, NoOp, const enum std::_Ios_Openmode)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Iostate operator&(std::_Ios_Iostate __a, std::_Ios_Iostate __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: static_cast<int>([B1.7]) (CXXStaticCastExpr, NoOp, int)
   9: [B1.4] & [B1.8]
  10: std::_Ios_Iostate([B1.9]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Iostate)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Iostate operator|(std::_Ios_Iostate __a, std::_Ios_Iostate __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: static_cast<int>([B1.7]) (CXXStaticCastExpr, NoOp, int)
   9: [B1.4] | [B1.8]
  10: std::_Ios_Iostate([B1.9]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Iostate)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Iostate operator^(std::_Ios_Iostate __a, std::_Ios_Iostate __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: static_cast<int>([B1.7]) (CXXStaticCastExpr, NoOp, int)
   9: [B1.4] ^ [B1.8]
  10: std::_Ios_Iostate([B1.9]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Iostate)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Ios_Iostate operator~(std::_Ios_Iostate __a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, int)
   4: static_cast<int>([B1.3]) (CXXStaticCastExpr, NoOp, int)
   5: ~[B1.4]
   6: std::_Ios_Iostate([B1.5]) (CXXFunctionalCastExpr, IntegralCast, enum std::_Ios_Iostate)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::_Ios_Iostate &operator|=(std::_Ios_Iostate &__a, std::_Ios_Iostate __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Iostate (*)(enum std::_Ios_Iostate, enum std::_Ios_Iostate))
   3: __a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   7: [B1.4] | [B1.6] (OperatorCall)
   8: __a
   9: [B1.8] = [B1.7]
  10: [B1.9] (ImplicitCastExpr, NoOp, const enum std::_Ios_Iostate)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::_Ios_Iostate &operator&=(std::_Ios_Iostate &__a, std::_Ios_Iostate __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Iostate (*)(enum std::_Ios_Iostate, enum std::_Ios_Iostate))
   3: __a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   7: [B1.4] & [B1.6] (OperatorCall)
   8: __a
   9: [B1.8] = [B1.7]
  10: [B1.9] (ImplicitCastExpr, NoOp, const enum std::_Ios_Iostate)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::_Ios_Iostate &operator^=(std::_Ios_Iostate &__a, std::_Ios_Iostate __b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Iostate (*)(enum std::_Ios_Iostate, enum std::_Ios_Iostate))
   3: __a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   5: __b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum std::_Ios_Iostate)
   7: [B1.4] ^ [B1.6] (OperatorCall)
   8: __a
   9: [B1.8] = [B1.7]
  10: [B1.9] (ImplicitCastExpr, NoOp, const enum std::_Ios_Iostate)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

error_code()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Callback_list(ios_base::event_callback __fn, int __index, std::ios_base::_Callback_list *__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __cb
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, struct std::ios_base::_Callback_list *)
   3: _M_next([B1.2]) (Member initializer)
   4: __fn
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, class ios_base::event_callback)
   6: _M_fn([B1.5]) (Member initializer)
   7: __index
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: _M_index([B1.8]) (Member initializer)
  10: 0
  11: _M_refcount([B1.10]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void _M_add_reference()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __gnu_cxx::__atomic_add_dispatch
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(_Atomic_word *, int))
   3: this
   4: [B1.3]->_M_refcount
   5: &[B1.4]
   6: 1
   7: [B1.2]([B1.5], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int _M_remove_reference()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __res
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: __gnu_cxx::__exchange_and_add_dispatch
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, _Atomic_word (*)(_Atomic_word *, int))
   3: this
   4: [B3.3]->_M_refcount
   5: &[B3.4]
   6: 1
   7: -[B3.6]
   8: [B3.2]([B3.5], [B3.7])
   9: int __res = __gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount, -1);
  10: __res
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, int)
  12: 0
  13: [B3.11] == [B3.12]
   T: if [B3.13]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

_Words() : _M_pword(0), _M_iword(0)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, void *)
   3: _M_pword([B1.2]) (Member initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: _M_iword([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

fmtflags flags() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_flags
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, fmtflags)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

fmtflags flags(fmtflags __fmtfl)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_flags
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, fmtflags)
   4: fmtflags __old = this->_M_flags;
   5: __fmtfl
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, fmtflags)
   7: this
   8: [B1.7]->_M_flags
   9: [B1.8] = [B1.6]
  10: __old
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, fmtflags)
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

fmtflags setf(fmtflags __fmtfl)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_flags
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, fmtflags)
   4: fmtflags __old = this->_M_flags;
   5: operator|=
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, const enum std::_Ios_Fmtflags &(*)(enum std::_Ios_Fmtflags &, enum std::_Ios_Fmtflags))
   7: this
   8: [B1.7]->_M_flags
   9: __fmtfl
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, fmtflags)
  11: [B1.8] |= [B1.10] (OperatorCall)
  12: __old
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, fmtflags)
  14: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

fmtflags setf(fmtflags __fmtfl, fmtflags __mask)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_flags
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, fmtflags)
   4: fmtflags __old = this->_M_flags;
   5: operator&=
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, const enum std::_Ios_Fmtflags &(*)(enum std::_Ios_Fmtflags &, enum std::_Ios_Fmtflags))
   7: this
   8: [B1.7]->_M_flags
   9: operator~
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags))
  11: __mask
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, fmtflags)
  13: ~ [B1.12] (OperatorCall)
  14: [B1.8] &= [B1.13] (OperatorCall)
  15: operator|=
  16: [B1.15] (ImplicitCastExpr, FunctionToPointerDecay, const enum std::_Ios_Fmtflags &(*)(enum std::_Ios_Fmtflags &, enum std::_Ios_Fmtflags))
  17: this
  18: [B1.17]->_M_flags
  19: operator&
  20: [B1.19] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags, enum std::_Ios_Fmtflags))
  21: __fmtfl
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, fmtflags)
  23: __mask
  24: [B1.23] (ImplicitCastExpr, LValueToRValue, fmtflags)
  25: [B1.22] & [B1.24] (OperatorCall)
  26: [B1.18] |= ([B1.25]) (OperatorCall)
  27: __old
  28: [B1.27] (ImplicitCastExpr, LValueToRValue, fmtflags)
  29: return [B1.28];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void unsetf(fmtflags __mask)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const enum std::_Ios_Fmtflags &(*)(enum std::_Ios_Fmtflags &, enum std::_Ios_Fmtflags))
   3: this
   4: [B1.3]->_M_flags
   5: operator~
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags))
   7: __mask
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, fmtflags)
   9: ~ [B1.8] (OperatorCall)
  10: [B1.4] &= [B1.9] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

streamsize precision() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_precision
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, streamsize)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

streamsize precision(streamsize __prec)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_precision
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, streamsize)
   4: streamsize __old = this->_M_precision;
   5: __prec
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, streamsize)
   7: this
   8: [B1.7]->_M_precision
   9: [B1.8] = [B1.6]
  10: __old
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, streamsize)
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

streamsize width() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_width
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, streamsize)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

streamsize width(streamsize __wide)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_width
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, streamsize)
   4: streamsize __old = this->_M_width;
   5: __wide
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, streamsize)
   7: this
   8: [B1.7]->_M_width
   9: [B1.8] = [B1.6]
  10: __old
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, streamsize)
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

std::locale getloc() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_ios_locale
   3: [B1.2] (CXXConstructExpr, class std::locale)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const std::locale &_M_getloc() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_ios_locale
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

long &iword(int __ix)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ([B4.6]) ? [B2.6] : [B3.6]
   2: std::ios_base::_Words &__word = (__ix < this->_M_word_size) ? this->_M_word[__ix] : this->_M_grow_words(__ix, true);
   3: __word
   4: [B1.3]._M_iword
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_word
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, struct std::ios_base::_Words *)
   4: __ix
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3][[B2.5]]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->_M_grow_words
   3: __ix
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: true
   6: [B3.2]([B3.4], [B3.5])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: __ix
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B4.3]->_M_word_size
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B4.2] < [B4.5]
   T: ([B4.6]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

void *&pword(int __ix)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ([B4.6]) ? [B2.6] : [B3.6]
   2: std::ios_base::_Words &__word = (__ix < this->_M_word_size) ? this->_M_word[__ix] : this->_M_grow_words(__ix, false);
   3: __word
   4: [B1.3]._M_pword
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_word
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, struct std::ios_base::_Words *)
   4: __ix
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3][[B2.5]]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->_M_grow_words
   3: __ix
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: false
   6: [B3.2]([B3.4], [B3.5])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: __ix
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B4.3]->_M_word_size
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B4.2] < [B4.5]
   T: ([B4.6]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &boolalpha(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::boolalpha
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &noboolalpha(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].unsetf
   3: ios_base::boolalpha
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &showbase(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::showbase
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &noshowbase(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].unsetf
   3: ios_base::showbase
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &showpoint(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::showpoint
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &noshowpoint(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].unsetf
   3: ios_base::showpoint
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &showpos(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::showpos
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &noshowpos(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].unsetf
   3: ios_base::showpos
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &skipws(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::skipws
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &noskipws(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].unsetf
   3: ios_base::skipws
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &uppercase(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::uppercase
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &nouppercase(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].unsetf
   3: ios_base::uppercase
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &unitbuf(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::unitbuf
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &nounitbuf(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].unsetf
   3: ios_base::unitbuf
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: [B1.2]([B1.4])
   6: __base
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &internal(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::internal
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: ios_base::adjustfield
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, fmtflags)
   7: [B1.2]([B1.4], [B1.6])
   8: __base
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &left(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::left
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: ios_base::adjustfield
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, fmtflags)
   7: [B1.2]([B1.4], [B1.6])
   8: __base
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &right(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::right
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: ios_base::adjustfield
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, fmtflags)
   7: [B1.2]([B1.4], [B1.6])
   8: __base
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &dec(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::dec
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: ios_base::basefield
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, fmtflags)
   7: [B1.2]([B1.4], [B1.6])
   8: __base
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &hex(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::hex
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: ios_base::basefield
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, fmtflags)
   7: [B1.2]([B1.4], [B1.6])
   8: __base
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &oct(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::oct
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: ios_base::basefield
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, fmtflags)
   7: [B1.2]([B1.4], [B1.6])
   8: __base
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &fixed(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::fixed
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: ios_base::floatfield
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, fmtflags)
   7: [B1.2]([B1.4], [B1.6])
   8: __base
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::ios_base &scientific(std::ios_base &__base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __base
   2: [B1.1].setf
   3: ios_base::scientific
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, fmtflags)
   5: ios_base::floatfield
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, fmtflags)
   7: [B1.2]([B1.4], [B1.6])
   8: __base
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

char_type toupper(char_type __c) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->do_toupper
   3: __c
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char_type *toupper(char_type *__lo, const char_type *__hi) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->do_toupper
   3: __lo
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: __hi
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const char_type *)
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

char_type tolower(char_type __c) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->do_tolower
   3: __c
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char_type *tolower(char_type *__lo, const char_type *__hi) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->do_tolower
   3: __lo
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: __hi
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const char_type *)
   7: [B1.2]([B1.4], [B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

char_type widen(char __c) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->_M_widen_init
   3: [B1.2]()
   4: this
   5: [B1.4]->do_widen
   6: __c
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, char)
   8: [B1.5]([B1.7])
   9: return [B1.8];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_widen
   3: [B2.2] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   4: __c
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B2.5] (ImplicitCastExpr, IntegralCast, unsigned char)
   7: static_cast<unsigned char>([B2.6]) (CXXStaticCastExpr, NoOp, unsigned char)
   8: [B2.3][[B2.7]]
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, char)
  10: return [B2.9];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->_M_widen_ok
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, char)
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

const char *widen(const char *__lo, const char *__hi, char_type *__to) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: this
   2: [B1.1]->do_widen
   3: __lo
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: __hi
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const char *)
   7: __to
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, char_type *)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: return [B1.9];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_widen_init
   3: [B2.2]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->_M_widen_ok
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, char)
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   5: ![B3.4]
   T: if [B3.5]
   Preds (1): B5
   Succs (2): B2 B1

 [B4]
   1: __builtin_memcpy
   2: [B4.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(void *, const void *, unsigned long))
   3: __to
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: [B4.4] (ImplicitCastExpr, BitCast, void *)
   6: __lo
   7: [B4.6] (ImplicitCastExpr, LValueToRValue, const char *)
   8: [B4.7] (ImplicitCastExpr, BitCast, const void *)
   9: __hi
  10: [B4.9] (ImplicitCastExpr, LValueToRValue, const char *)
  11: __lo
  12: [B4.11] (ImplicitCastExpr, LValueToRValue, const char *)
  13: [B4.10] - [B4.12]
  14: [B4.13] (ImplicitCastExpr, IntegralCast, unsigned long)
  15: [B4.2]([B4.5], [B4.8], [B4.14])
  16: __hi
  17: [B4.16] (ImplicitCastExpr, LValueToRValue, const char *)
  18: return [B4.17];
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->_M_widen_ok
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, char)
   4: [B5.3] (ImplicitCastExpr, IntegralCast, int)
   5: 1
   6: [B5.4] == [B5.5]
   T: if [B5.6]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (2): B1 B4

char narrow(char_type __c, char __dfault) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: __t
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: __t
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, char)
   3: this
   4: [B2.3]->_M_narrow
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   6: __c
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, char_type)
   8: [B2.7] (ImplicitCastExpr, IntegralCast, unsigned char)
   9: static_cast<unsigned char>([B2.8]) (CXXStaticCastExpr, NoOp, unsigned char)
  10: [B2.5][[B2.9]]
  11: [B2.10] = [B2.2]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->do_narrow
   3: __c
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, char_type)
   5: __dfault
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, char)
   7: [B3.2]([B3.4], [B3.6])
   8: const char __t = this->do_narrow(__c, __dfault);
   9: __t
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B3.10] (ImplicitCastExpr, IntegralCast, int)
  12: __dfault
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, char)
  14: [B3.13] (ImplicitCastExpr, IntegralCast, int)
  15: [B3.11] != [B3.14]
   T: if [B3.15]
   Preds (1): B5
   Succs (2): B2 B1

 [B4]
   1: this
   2: [B4.1]->_M_narrow
   3: [B4.2] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   4: __c
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, char_type)
   6: [B4.5] (ImplicitCastExpr, IntegralCast, unsigned char)
   7: static_cast<unsigned char>([B4.6]) (CXXStaticCastExpr, NoOp, unsigned char)
   8: [B4.3][[B4.7]]
   9: [B4.8] (ImplicitCastExpr, LValueToRValue, char)
  10: return [B4.9];
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->_M_narrow
   3: [B5.2] (ImplicitCastExpr, ArrayToPointerDecay, char *)
   4: __c
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, char_type)
   6: [B5.5] (ImplicitCastExpr, IntegralCast, unsigned char)
   7: static_cast<unsigned char>([B5.6]) (CXXStaticCastExpr, NoOp, unsigned char)
   8: [B5.3][[B5.7]]
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, char)
  10: [B5.9] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B5.10]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (2): B1 B4

const char_type *narrow(const char_type *__lo, const char_type *__hi, char __dfault, char *__to) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: this
   2: [B1.1]->do_narrow
   3: __lo
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char_type *)
   5: __hi
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const char_type *)
   7: __dfault
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, char)
   9: __to
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char *)
  11: [B1.2]([B1.4], [B1.6], [B1.8], [B1.10])
  12: return [B1.11];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_narrow_init
   3: [B2.2]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->_M_narrow_ok
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, char)
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   5: ![B3.4]
   T: if [B3.5]
   Preds (1): B5
   Succs (2): B2 B1

 [B4]
   1: __builtin_memcpy
   2: [B4.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(void *, const void *, unsigned long))
   3: __to
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: [B4.4] (ImplicitCastExpr, BitCast, void *)
   6: __lo
   7: [B4.6] (ImplicitCastExpr, LValueToRValue, const char_type *)
   8: [B4.7] (ImplicitCastExpr, BitCast, const void *)
   9: __hi
  10: [B4.9] (ImplicitCastExpr, LValueToRValue, const char_type *)
  11: __lo
  12: [B4.11] (ImplicitCastExpr, LValueToRValue, const char_type *)
  13: [B4.10] - [B4.12]
  14: [B4.13] (ImplicitCastExpr, IntegralCast, unsigned long)
  15: [B4.2]([B4.5], [B4.8], [B4.14])
  16: __hi
  17: [B4.16] (ImplicitCastExpr, LValueToRValue, const char_type *)
  18: return [B4.17];
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: __builtin_expect
   2: [B5.1] (ImplicitCastExpr, BuiltinFnToFnPtr, long (*)(long, long))
   3: this
   4: [B5.3]->_M_narrow_ok
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B5.5] (ImplicitCastExpr, IntegralCast, int)
   7: 1
   8: [B5.6] == [B5.7]
   9: [B5.8] (ImplicitCastExpr, IntegralCast, long)
  10: true
  11: [B5.10] (ImplicitCastExpr, IntegralCast, long)
  12: [B5.2]([B5.9], [B5.11])
  13: [B5.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B5.13]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (2): B1 B4

const mask *table() const throw()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_table
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, const mask *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual char_type do_widen(char __c) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__to) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __builtin_memcpy
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(void *, const void *, unsigned long))
   3: __to
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char_type *)
   5: [B1.4] (ImplicitCastExpr, BitCast, void *)
   6: __lo
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const char *)
   8: [B1.7] (ImplicitCastExpr, BitCast, const void *)
   9: __hi
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, const char *)
  11: __lo
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, const char *)
  13: [B1.10] - [B1.12]
  14: [B1.13] (ImplicitCastExpr, IntegralCast, unsigned long)
  15: [B1.2]([B1.5], [B1.8], [B1.14])
  16: __hi
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, const char *)
  18: return [B1.17];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual char do_narrow(char_type __c, char __dfault) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __c
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char_type)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char __dfault, char *__to) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __builtin_memcpy
   2: [B1.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(void *, const void *, unsigned long))
   3: __to
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char *)
   5: [B1.4] (ImplicitCastExpr, BitCast, void *)
   6: __lo
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const char_type *)
   8: [B1.7] (ImplicitCastExpr, BitCast, const void *)
   9: __hi
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, const char_type *)
  11: __lo
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, const char_type *)
  13: [B1.10] - [B1.12]
  14: [B1.13] (ImplicitCastExpr, IntegralCast, unsigned long)
  15: [B1.2]([B1.5], [B1.8], [B1.14])
  16: __hi
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, const char_type *)
  18: return [B1.17];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool is(mask __m, char __c) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_table
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, const mask *)
   4: __c
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned char)
   7: static_cast<unsigned char>([B1.6]) (CXXStaticCastExpr, NoOp, unsigned char)
   8: [B1.3][[B1.7]]
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, mask)
  10: [B1.9] (ImplicitCastExpr, IntegralCast, int)
  11: __m
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, mask)
  13: [B1.12] (ImplicitCastExpr, IntegralCast, int)
  14: [B1.10] & [B1.13]
  15: [B1.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *is(const char *__low, const char *__high, mask *__vec) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: __high
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: return [B1.2];
   Preds (1): B4
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: this
   2: [B3.1]->_M_table
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, const mask *)
   4: __low
   5: [B3.4]++
   6: *[B3.5]
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, char)
   8: [B3.7] (ImplicitCastExpr, IntegralCast, unsigned char)
   9: static_cast<unsigned char>([B3.8]) (CXXStaticCastExpr, NoOp, unsigned char)
  10: [B3.3][[B3.9]]
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, mask)
  12: __vec
  13: [B3.12]++
  14: *[B3.13]
  15: [B3.14] = [B3.11]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: __low
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: __high
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: [B4.2] < [B4.4]
   T: while [B4.5]
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (1): B1

const char *scan_is(mask __m, const char *__low, const char *__high) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: __low
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: return [B1.2];
   Preds (2): B4 B5
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B5

 [B3]
   1: __low
   2: ++[B3.1]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: this
   2: [B4.1]->_M_table
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, const mask *)
   4: __low
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, const char *)
   6: *[B4.5]
   7: [B4.6] (ImplicitCastExpr, LValueToRValue, char)
   8: [B4.7] (ImplicitCastExpr, IntegralCast, unsigned char)
   9: static_cast<unsigned char>([B4.8]) (CXXStaticCastExpr, NoOp, unsigned char)
  10: [B4.3][[B4.9]]
  11: [B4.10] (ImplicitCastExpr, LValueToRValue, mask)
  12: [B4.11] (ImplicitCastExpr, IntegralCast, int)
  13: __m
  14: [B4.13] (ImplicitCastExpr, LValueToRValue, mask)
  15: [B4.14] (ImplicitCastExpr, IntegralCast, int)
  16: [B4.12] & [B4.15]
  17: ([B4.16]) (ImplicitCastExpr, IntegralToBoolean, _Bool)
  18: ![B4.17]
   T: while [B5.5] && [B4.18]
   Preds (1): B5
   Succs (2): B3 B1

 [B5]
   1: __low
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: __high
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: [B5.2] < [B5.4]
   T: [B5.5] && ...
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B0 (EXIT)]
   Preds (1): B1

const char *scan_not(mask __m, const char *__low, const char *__high) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: __low
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: return [B1.2];
   Preds (2): B4 B5
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B5

 [B3]
   1: __low
   2: ++[B3.1]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: this
   2: [B4.1]->_M_table
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, const mask *)
   4: __low
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, const char *)
   6: *[B4.5]
   7: [B4.6] (ImplicitCastExpr, LValueToRValue, char)
   8: [B4.7] (ImplicitCastExpr, IntegralCast, unsigned char)
   9: static_cast<unsigned char>([B4.8]) (CXXStaticCastExpr, NoOp, unsigned char)
  10: [B4.3][[B4.9]]
  11: [B4.10] (ImplicitCastExpr, LValueToRValue, mask)
  12: [B4.11] (ImplicitCastExpr, IntegralCast, int)
  13: __m
  14: [B4.13] (ImplicitCastExpr, LValueToRValue, mask)
  15: [B4.14] (ImplicitCastExpr, IntegralCast, int)
  16: [B4.12] & [B4.15]
  17: 0
  18: ([B4.16]) != [B4.17]
   T: while [B5.5] && [B4.18]
   Preds (1): B5
   Succs (2): B3 B1

 [B5]
   1: __low
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: __high
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: [B5.2] < [B5.4]
   T: [B5.5] && ...
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B0 (EXIT)]
   Preds (1): B1

_Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p(__x), _M_mask(__y)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __x
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   3: _M_p([B1.2]) (Member initializer)
   4: __y
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bit_type)
   6: _M_mask([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Bit_reference() : _M_p(0), _M_mask(0)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, _Bit_type *)
   3: _M_p([B1.2]) (Member initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, IntegralCast, _Bit_type)
   6: _M_mask([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator bool() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   4: *[B1.3]
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bit_type)
   6: this
   7: [B1.6]->_M_mask
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, _Bit_type)
   9: [B1.5] & [B1.8]
  10: ([B1.9]) (ImplicitCastExpr, IntegralToBoolean, _Bool)
  11: ![B1.10]
  12: ![B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

std::_Bit_reference &operator=(bool __x)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   4: *[B2.3]
   5: this
   6: [B2.5]->_M_mask
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, _Bit_type)
   8: ~[B2.7]
   9: [B2.4] &= [B2.8]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->_M_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   4: *[B3.3]
   5: this
   6: [B3.5]->_M_mask
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, _Bit_type)
   8: [B3.4] |= [B3.7]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: __x
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B4.2]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1

std::_Bit_reference &operator=(const std::_Bit_reference &__x)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, struct std::_Bit_reference &(*)(_Bool))
   3: this
   4: *[B1.3]
   5: __x
   6: [B1.5].operator bool
   7: [B1.5]
   8: [B1.7] (ImplicitCastExpr, UserDefinedConversion, _Bool)
   9: bool([B1.8]) (CXXFunctionalCastExpr, NoOp, _Bool)
  10: [B1.4] = [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const std::_Bit_reference &__x) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2].operator bool
   4: [B1.2]
   5: [B1.4] (ImplicitCastExpr, UserDefinedConversion, _Bool)
   6: bool([B1.5]) (CXXFunctionalCastExpr, NoOp, _Bool)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: __x
   9: [B1.8].operator bool
  10: [B1.8]
  11: [B1.10] (ImplicitCastExpr, UserDefinedConversion, _Bool)
  12: bool([B1.11]) (CXXFunctionalCastExpr, NoOp, _Bool)
  13: [B1.12] (ImplicitCastExpr, IntegralCast, int)
  14: [B1.7] == [B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(const std::_Bit_reference &__x) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.7] && [B2.5]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: __x
   2: [B2.1].operator bool
   3: [B2.1]
   4: [B2.3] (ImplicitCastExpr, UserDefinedConversion, _Bool)
   5: bool([B2.4]) (CXXFunctionalCastExpr, NoOp, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: *[B3.1]
   3: [B3.2].operator bool
   4: [B3.2]
   5: [B3.4] (ImplicitCastExpr, UserDefinedConversion, _Bool)
   6: bool([B3.5]) (CXXFunctionalCastExpr, NoOp, _Bool)
   7: ![B3.6]
   T: [B3.7] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

void flip()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   4: *[B1.3]
   5: this
   6: [B1.5]->_M_mask
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bit_type)
   8: [B1.4] ^= [B1.7]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Bit_iterator_base(_Bit_type *__x, unsigned int __y) : std::iterator<std::random_access_iterator_tag, bool>(), _M_p(__x), _M_offset(__y)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, std::iterator<std::random_access_iterator_tag, _Bool>)
   2: iterator([B1.1]) (Base initializer)
   3: __x
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   5: _M_p([B1.4]) (Member initializer)
   6: __y
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: _M_offset([B1.7]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void _M_bump_up()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, IntegralCast, unsigned int)
   3: this
   4: [B1.3]->_M_offset
   5: [B1.4] = [B1.2]
   6: this
   7: [B1.6]->_M_p
   8: ++[B1.7]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_offset
   3: [B2.2]++
   4: _S_word_bit
   5: [B2.4] (ImplicitCastExpr, IntegralCast, int)
   6: int([B2.5]) (CXXFunctionalCastExpr, NoOp, int)
   7: 1
   8: [B2.6] - [B2.7]
   9: [B2.8] (ImplicitCastExpr, IntegralCast, unsigned int)
  10: [B2.3] == [B2.9]
   T: if [B2.10]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

void _M_bump_down()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: _S_word_bit
   2: [B1.1] (ImplicitCastExpr, IntegralCast, int)
   3: int([B1.2]) (CXXFunctionalCastExpr, NoOp, int)
   4: 1
   5: [B1.3] - [B1.4]
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned int)
   7: this
   8: [B1.7]->_M_offset
   9: [B1.8] = [B1.6]
  10: this
  11: [B1.10]->_M_p
  12: --[B1.11]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_offset
   3: [B2.2]--
   4: 0
   5: [B2.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: [B2.3] == [B2.5]
   T: if [B2.6]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

void _M_incr(ptrdiff_t __i)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __n
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, difference_type)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   4: static_cast<unsigned int>([B1.3]) (CXXStaticCastExpr, NoOp, unsigned int)
   5: this
   6: [B1.5]->_M_offset
   7: [B1.6] = [B1.4]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: __n
   2: _S_word_bit
   3: [B2.2] (ImplicitCastExpr, IntegralCast, int)
   4: int([B2.3]) (CXXFunctionalCastExpr, NoOp, int)
   5: [B2.4] (ImplicitCastExpr, IntegralCast, long)
   6: [B2.1] += [B2.5]
   7: this
   8: [B2.7]->_M_p
   9: --[B2.8]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: __i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
   3: this
   4: [B3.3]->_M_offset
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B3.5] (ImplicitCastExpr, IntegralCast, long)
   7: [B3.2] + [B3.6]
   8: difference_type __n = __i + this->_M_offset;
   9: this
  10: [B3.9]->_M_p
  11: __n
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, difference_type)
  13: _S_word_bit
  14: [B3.13] (ImplicitCastExpr, IntegralCast, int)
  15: int([B3.14]) (CXXFunctionalCastExpr, NoOp, int)
  16: [B3.15] (ImplicitCastExpr, IntegralCast, long)
  17: [B3.12] / [B3.16]
  18: [B3.10] += [B3.17]
  19: __n
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, difference_type)
  21: _S_word_bit
  22: [B3.21] (ImplicitCastExpr, IntegralCast, int)
  23: int([B3.22]) (CXXFunctionalCastExpr, NoOp, int)
  24: [B3.23] (ImplicitCastExpr, IntegralCast, long)
  25: [B3.20] % [B3.24]
  26: __n
  27: [B3.26] = [B3.25]
  28: __n
  29: [B3.28] (ImplicitCastExpr, LValueToRValue, difference_type)
  30: 0
  31: [B3.30] (ImplicitCastExpr, IntegralCast, long)
  32: [B3.29] < [B3.31]
   T: if [B3.32]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const std::_Bit_iterator_base &__i) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.7] && [B2.7]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_offset
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, unsigned int)
   4: __i
   5: [B2.4]._M_offset
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, unsigned int)
   7: [B2.3] == [B2.6]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->_M_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   4: __i
   5: [B3.4]._M_p
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   7: [B3.3] == [B3.6]
   T: [B3.7] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(const std::_Bit_iterator_base &__i) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.7] || ([B3.7] && [B2.7])
   2: return [B1.1];
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->_M_offset
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, unsigned int)
   4: __i
   5: [B2.4]._M_offset
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, unsigned int)
   7: [B2.3] < [B2.6]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->_M_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   4: __i
   5: [B3.4]._M_p
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   7: [B3.3] == [B3.6]
   T: [B3.7] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: this
   2: [B4.1]->_M_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   4: __i
   5: [B4.4]._M_p
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   7: [B4.3] < [B4.6]
   T: [B4.7] || ...
   Preds (1): B5
   Succs (2): B1 B3

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const std::_Bit_iterator_base &__i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const struct std::_Bit_iterator_base &) const)
   3: this
   4: *[B1.3]
   5: __i
   6: [B1.4] == [B1.5] (OperatorCall)
   7: !([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(const std::_Bit_iterator_base &__i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const struct std::_Bit_iterator_base &) const)
   3: __i
   4: this
   5: *[B1.4]
   6: [B1.3] < [B1.5] (OperatorCall)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(const std::_Bit_iterator_base &__i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const struct std::_Bit_iterator_base &) const)
   3: __i
   4: this
   5: *[B1.4]
   6: [B1.3] < [B1.5] (OperatorCall)
   7: !([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(const std::_Bit_iterator_base &__i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const struct std::_Bit_iterator_base &) const)
   3: this
   4: *[B1.3]
   5: __i
   6: [B1.4] < [B1.5] (OperatorCall)
   7: !([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ptrdiff_t operator-(const std::_Bit_iterator_base &__x, const std::_Bit_iterator_base &__y)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: _S_word_bit
   2: [B1.1] (ImplicitCastExpr, IntegralCast, int)
   3: int([B1.2]) (CXXFunctionalCastExpr, NoOp, int)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, long)
   5: __x
   6: [B1.5]._M_p
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   8: __y
   9: [B1.8]._M_p
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
  11: [B1.7] - [B1.10]
  12: [B1.4] * ([B1.11])
  13: __x
  14: [B1.13]._M_offset
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, unsigned int)
  16: [B1.15] (ImplicitCastExpr, IntegralCast, long)
  17: [B1.12] + [B1.16]
  18: __y
  19: [B1.18]._M_offset
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, unsigned int)
  21: [B1.20] (ImplicitCastExpr, IntegralCast, long)
  22: [B1.17] - [B1.21]
  23: return ([B1.22]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Bit_iterator() : std::_Bit_iterator_base(0, 0)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, _Bit_type *)
   3: 0
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: [B1.2], [B1.4] (CXXConstructExpr, struct std::_Bit_iterator_base)
   6: _Bit_iterator_base([B1.5]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Bit_iterator(_Bit_type *__x, unsigned int __y) : std::_Bit_iterator_base(__x, __y)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __x
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   3: __y
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.2], [B1.4] (CXXConstructExpr, struct std::_Bit_iterator_base)
   6: _Bit_iterator_base([B1.5]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator _M_const_cast() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, iterator)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

reference operator*() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   3: [B1.2]->_M_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   5: 1UL
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   8: [B1.7]->_M_offset
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, unsigned int)
  10: [B1.5] << [B1.9]
  11: reference([B1.4], [B1.10]) (CXXConstructExpr, reference)
  12: [B1.11] (ImplicitCastExpr, NoOp, const struct std::_Bit_reference)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, reference)
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator &operator++()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   3: [B1.2]->_M_bump_up
   4: [B1.3]()
   5: this
   6: *[B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator operator++(int)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
   4: [B1.3] (CXXConstructExpr, iterator)
   5: iterator __tmp = *this;
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   8: [B1.7]->_M_bump_up
   9: [B1.8]()
  10: __tmp
  11: [B1.10] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
  12: [B1.11] (CXXConstructExpr, iterator)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator &operator--()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   3: [B1.2]->_M_bump_down
   4: [B1.3]()
   5: this
   6: *[B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator operator--(int)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
   4: [B1.3] (CXXConstructExpr, iterator)
   5: iterator __tmp = *this;
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   8: [B1.7]->_M_bump_down
   9: [B1.8]()
  10: __tmp
  11: [B1.10] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
  12: [B1.11] (CXXConstructExpr, iterator)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator &operator+=(difference_type __i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   3: [B1.2]->_M_incr
   4: __i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, difference_type)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator &operator-=(difference_type __i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, iterator &(*)(difference_type))
   3: this
   4: *[B1.3]
   5: __i
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, difference_type)
   7: -[B1.6]
   8: [B1.4] += [B1.7] (OperatorCall)
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator operator+(difference_type __i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, iterator)
   4: iterator __tmp = *this;
   5: operator+=
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, iterator &(*)(difference_type))
   7: __tmp
   8: __i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, difference_type)
  10: [B1.7] += [B1.9] (OperatorCall)
  11: [B1.10] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
  12: [B1.11] (CXXConstructExpr, iterator)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator operator-(difference_type __i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, iterator)
   4: iterator __tmp = *this;
   5: operator-=
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, iterator &(*)(difference_type))
   7: __tmp
   8: __i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, difference_type)
  10: [B1.7] -= [B1.9] (OperatorCall)
  11: [B1.10] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
  12: [B1.11] (CXXConstructExpr, iterator)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

reference operator[](difference_type __i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, reference (*)(void) const)
   3: operator+
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, iterator (*)(difference_type) const)
   5: this
   6: *[B1.5]
   7: __i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, difference_type)
   9: [B1.6] + [B1.8] (OperatorCall)
  10: ([B1.9]) (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
  11: * [B1.10] (OperatorCall)
  12: [B1.11] (ImplicitCastExpr, NoOp, const struct std::_Bit_reference)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, reference)
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Bit_iterator operator+(ptrdiff_t __n, const std::_Bit_iterator &__x)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, iterator (*)(difference_type) const)
   3: __x
   4: __n
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
   6: [B1.3] + [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
   8: [B1.7]
   9: [B1.8] (CXXConstructExpr, struct std::_Bit_iterator)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Bit_const_iterator() : std::_Bit_iterator_base(0, 0)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, _Bit_type *)
   3: 0
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: [B1.2], [B1.4] (CXXConstructExpr, struct std::_Bit_iterator_base)
   6: _Bit_iterator_base([B1.5]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Bit_const_iterator(_Bit_type *__x, unsigned int __y) : std::_Bit_iterator_base(__x, __y)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __x
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   3: __y
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.2], [B1.4] (CXXConstructExpr, struct std::_Bit_iterator_base)
   6: _Bit_iterator_base([B1.5]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Bit_const_iterator(const std::_Bit_iterator &__x) : std::_Bit_iterator_base(__x._M_p, __x._M_offset)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __x
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base)
   3: [B1.2]._M_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   5: __x
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base)
   7: [B1.6]._M_offset
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, unsigned int)
   9: [B1.4], [B1.8] (CXXConstructExpr, struct std::_Bit_iterator_base)
  10: _Bit_iterator_base([B1.9]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

std::_Bit_iterator _M_const_cast() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   3: [B1.2]->_M_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   7: [B1.6]->_M_offset
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, unsigned int)
   9: std::_Bit_iterator([B1.4], [B1.8]) (CXXConstructExpr, struct std::_Bit_iterator)
  10: [B1.9] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, struct std::_Bit_iterator)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_reference operator*() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   3: [B1.2]->_M_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   5: 1UL
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   8: [B1.7]->_M_offset
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, unsigned int)
  10: [B1.5] << [B1.9]
  11: std::_Bit_reference([B1.4], [B1.10]) (CXXConstructExpr, struct std::_Bit_reference)
  12: [B1.11] (ImplicitCastExpr, NoOp, const struct std::_Bit_reference)
  13: [B1.12].operator bool
  14: [B1.12]
  15: [B1.14] (ImplicitCastExpr, UserDefinedConversion, _Bool)
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_iterator &operator++()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   3: [B1.2]->_M_bump_up
   4: [B1.3]()
   5: this
   6: *[B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_iterator operator++(int)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (ImplicitCastExpr, NoOp, const struct std::_Bit_const_iterator)
   4: [B1.3] (CXXConstructExpr, const_iterator)
   5: const_iterator __tmp = *this;
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   8: [B1.7]->_M_bump_up
   9: [B1.8]()
  10: __tmp
  11: [B1.10] (ImplicitCastExpr, NoOp, const struct std::_Bit_const_iterator)
  12: [B1.11] (CXXConstructExpr, const_iterator)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_iterator &operator--()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   3: [B1.2]->_M_bump_down
   4: [B1.3]()
   5: this
   6: *[B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_iterator operator--(int)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (ImplicitCastExpr, NoOp, const struct std::_Bit_const_iterator)
   4: [B1.3] (CXXConstructExpr, const_iterator)
   5: const_iterator __tmp = *this;
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   8: [B1.7]->_M_bump_down
   9: [B1.8]()
  10: __tmp
  11: [B1.10] (ImplicitCastExpr, NoOp, const struct std::_Bit_const_iterator)
  12: [B1.11] (CXXConstructExpr, const_iterator)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_iterator &operator+=(difference_type __i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base *)
   3: [B1.2]->_M_incr
   4: __i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, difference_type)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_iterator &operator-=(difference_type __i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const_iterator &(*)(difference_type))
   3: this
   4: *[B1.3]
   5: __i
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, difference_type)
   7: -[B1.6]
   8: [B1.4] += [B1.7] (OperatorCall)
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_iterator operator+(difference_type __i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, const_iterator)
   4: const_iterator __tmp = *this;
   5: operator+=
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, const_iterator &(*)(difference_type))
   7: __tmp
   8: __i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, difference_type)
  10: [B1.7] += [B1.9] (OperatorCall)
  11: [B1.10] (ImplicitCastExpr, NoOp, const struct std::_Bit_const_iterator)
  12: [B1.11] (CXXConstructExpr, const_iterator)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_iterator operator-(difference_type __i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, const_iterator)
   4: const_iterator __tmp = *this;
   5: operator-=
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, const_iterator &(*)(difference_type))
   7: __tmp
   8: __i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, difference_type)
  10: [B1.7] -= [B1.9] (OperatorCall)
  11: [B1.10] (ImplicitCastExpr, NoOp, const struct std::_Bit_const_iterator)
  12: [B1.11] (CXXConstructExpr, const_iterator)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_reference operator[](difference_type __i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const_reference (*)(void) const)
   3: operator+
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, const_iterator (*)(difference_type) const)
   5: this
   6: *[B1.5]
   7: __i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, difference_type)
   9: [B1.6] + [B1.8] (OperatorCall)
  10: ([B1.9]) (ImplicitCastExpr, NoOp, const struct std::_Bit_const_iterator)
  11: * [B1.10] (OperatorCall)
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::_Bit_const_iterator operator+(ptrdiff_t __n, const std::_Bit_const_iterator &__x)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const_iterator (*)(difference_type) const)
   3: __x
   4: __n
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
   6: [B1.3] + [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, NoOp, const struct std::_Bit_const_iterator)
   8: [B1.7]
   9: [B1.8] (CXXConstructExpr, struct std::_Bit_const_iterator)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void __fill_bvector(std::_Bit_iterator __first, std::_Bit_iterator __last, bool __x)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: operator++
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, iterator &(*)(void))
   3: __first
   4: ++ [B1.3] (OperatorCall)
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: operator=
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, struct std::_Bit_reference &(*)(_Bool))
   3: operator*
   4: [B2.3] (ImplicitCastExpr, FunctionToPointerDecay, reference (*)(void) const)
   5: __first
   6: [B2.5] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
   7: * [B2.6] (OperatorCall)
   8: __x
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, _Bool)
  10: [B2.7] = [B2.9] (OperatorCall)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: operator!=
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const struct std::_Bit_iterator_base &) const)
   3: __first
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, const struct std::_Bit_iterator_base)
   5: __last
   6: [B3.5] (ImplicitCastExpr, DerivedToBase, struct std::_Bit_iterator_base)
   7: [B3.6] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator_base)
   8: [B3.4] != [B3.7] (OperatorCall)
   T: for (; [B3.8]; ...)
   Preds (2): B1 B4
   Succs (2): B2 B0

 [B0 (EXIT)]
   Preds (1): B3

inline void fill(std::_Bit_iterator __first, std::_Bit_iterator __last, const bool &__x)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: __fill_bvector
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool))
   3: __first
   4: [B1.3] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
   5: [B1.4] (CXXConstructExpr, struct std::_Bit_iterator)
   6: __last
   7: [B1.6] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
   8: [B1.7] (CXXConstructExpr, struct std::_Bit_iterator)
   9: __x
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.5], [B1.8], [B1.10])
   Preds (1): B6
   Succs (1): B0

 [B2]
   1: [B5.14] ? [B3.2] : [B4.1]
   2: [B2.1]
   3: [B5.2]([B5.8], [B5.12], [B2.2])
   4: __fill_bvector
   5: [B2.4] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool))
   6: __first
   7: [B2.6] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
   8: [B2.7] (CXXConstructExpr, struct std::_Bit_iterator)
   9: __first
  10: [B2.9] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base)
  11: [B2.10]._M_p
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
  13: 1
  14: [B2.12] + [B2.13]
  15: 0
  16: [B2.15] (ImplicitCastExpr, IntegralCast, unsigned int)
  17: std::_Bit_iterator([B2.14], [B2.16]) (CXXConstructExpr, struct std::_Bit_iterator)
  18: [B2.17] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
  19: [B2.18]
  20: [B2.19] (CXXConstructExpr, struct std::_Bit_iterator)
  21: __x
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, _Bool)
  23: [B2.5]([B2.8], [B2.20], [B2.22])
  24: __fill_bvector
  25: [B2.24] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(struct std::_Bit_iterator, struct std::_Bit_iterator, _Bool))
  26: __last
  27: [B2.26] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base)
  28: [B2.27]._M_p
  29: [B2.28] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
  30: 0
  31: [B2.30] (ImplicitCastExpr, IntegralCast, unsigned int)
  32: std::_Bit_iterator([B2.29], [B2.31]) (CXXConstructExpr, struct std::_Bit_iterator)
  33: [B2.32] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
  34: [B2.33]
  35: [B2.34] (CXXConstructExpr, struct std::_Bit_iterator)
  36: __last
  37: [B2.36] (ImplicitCastExpr, NoOp, const struct std::_Bit_iterator)
  38: [B2.37] (CXXConstructExpr, struct std::_Bit_iterator)
  39: __x
  40: [B2.39] (ImplicitCastExpr, LValueToRValue, _Bool)
  41: [B2.25]([B2.35], [B2.38], [B2.40])
   Preds (2): B3 B4
   Succs (1): B0

 [B3]
   1: 0
   2: ~[B3.1]
   Preds (1): B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B5
   Succs (1): B2

 [B5]
   1: std::fill
   2: [B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(unsigned long *, unsigned long *, const int &))
   3: __first
   4: [B5.3] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base)
   5: [B5.4]._M_p
   6: [B5.5] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   7: 1
   8: [B5.6] + [B5.7]
   9: __last
  10: [B5.9] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base)
  11: [B5.10]._M_p
  12: [B5.11] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
  13: __x
  14: [B5.13] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B5.14] ? ... : ...
   Preds (1): B6
   Succs (2): B3 B4

 [B6]
   1: __first
   2: [B6.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base)
   3: [B6.2]._M_p
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   5: __last
   6: [B6.5] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Bit_iterator_base)
   7: [B6.6]._M_p
   8: [B6.7] (ImplicitCastExpr, LValueToRValue, _Bit_type *)
   9: [B6.4] != [B6.8]
   T: if [B6.9]
   Preds (1): B7
   Succs (2): B5 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

System() : moduleList(), supportMetric(0)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, vector<class Module *>)
   2: moduleList([B1.1]) (Member initializer)
   3: 0
   4: supportMetric([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void AddModule(Module *module)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->moduleList
   3: [B1.2].push_back
   4: module
   5: [B1.4] (ImplicitCastExpr, NoOp, const value_type)
   6: [B1.3]([B1.5])
   7: this
   8: [B1.7]->supportMetric
   9: module
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, class Module *)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class Module *)
  12: [B1.11]->GetSupportMetric
  13: [B1.12]()
  14: [B1.8] += [B1.13]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Module &GetModule(int i) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: ([B5.4] && [B4.10]) ? [B2.2] : [B3.12]
   2: operator[]
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, const_reference (*)(size_type) const)
   4: this
   5: [B1.4]->moduleList
   6: i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, size_type)
   9: [B1.5][[B1.8]] (OperatorCall)
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, class Module *)
  11: *[B1.10]
  12: return ([B1.11]);
   Preds (2): B2 B3(Unreachable)
   Succs (1): B0

 [B2]
   1: 0
   2: static_cast<void>([B2.1]) (CXXStaticCastExpr, ToVoid, void)
   Preds (1): B4
   Succs (1): B1

 [B3 (NORETURN)]
   1: __assert_fail
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw())
   3: "i >= 0 && (unsigned)i < moduleList.size()"
   4: [B3.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "system.cc"
   6: [B3.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 47
   8: [B3.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: "Module &System::GetModule(int) const"
  10: __PRETTY_FUNCTION__
  11: [B3.10] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  12: [B3.2]([B3.4], [B3.6], [B3.8], [B3.11])
   Preds (2): B4 B5
   Succs (1): B0

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B4.2] (ImplicitCastExpr, IntegralCast, unsigned int)
   4: (unsigned int)[B4.3] (CStyleCastExpr, NoOp, unsigned int)
   5: [B4.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: this
   7: [B4.6]->moduleList
   8: [B4.7].size
   9: [B4.8]()
  10: [B4.5] < [B4.9]
   T: ([B5.4] && [B4.10]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B5.2] >= [B5.3]
   T: [B5.4] && ...
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (2): B1 B3

int GetModuleCount() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->moduleList
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int GetSupportMetric() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->supportMetric
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

ostream &operator<<(ostream &output, const System &system)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: output
   2: return [B1.1];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: operator<<
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, __ostream_type &(*)(__ostream_type &(*)(__ostream_type &)))
   3: operator<<
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, ostream &(*)(ostream &, const class Module &))
   5: output
   6: system
   7: [B3.6].GetModule
   8: i
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B3.7]([B3.9])
  11: [B3.10] (ImplicitCastExpr, NoOp, const class Module)
  12: [B3.5] << [B3.11] (OperatorCall)
  13: endl
  14: [B3.13] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &))
  15: [B3.12] << [B3.14] (OperatorCall)
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: size
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: system
   2: [B5.1].GetModuleCount
   3: [B5.2]()
   4: int size = system.GetModuleCount();
   5: operator<<
   6: [B5.5] (ImplicitCastExpr, FunctionToPointerDecay, __ostream_type &(*)(__ostream_type &(*)(__ostream_type &)))
   7: operator<<
   8: [B5.7] (ImplicitCastExpr, FunctionToPointerDecay, __ostream_type &(*)(__ostream_type &(*)(__ostream_type &)))
   9: operator<<
  10: [B5.9] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &, const char *))
  11: operator<<
  12: [B5.11] (ImplicitCastExpr, FunctionToPointerDecay, __ostream_type &(*)(int))
  13: operator<<
  14: [B5.13] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &, const char *))
  15: output
  16: "System consists of "
  17: [B5.16] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  18: [B5.15] << [B5.17] (OperatorCall)
  19: size
  20: [B5.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B5.18] << [B5.20] (OperatorCall)
  22: " module(s):"
  23: [B5.22] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  24: [B5.21] << [B5.23] (OperatorCall)
  25: endl
  26: [B5.25] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &))
  27: [B5.24] << [B5.26] (OperatorCall)
  28: endl
  29: [B5.28] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &))
  30: [B5.27] << [B5.29] (OperatorCall)
  31: 0
  32: int i = 0;
   Preds (1): B6
   Succs (1): B4

 [B0 (EXIT)]
   Preds (1): B1

inline void fill(unsigned long *__first, unsigned long *__last, const int &__value)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::__fill_a
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, typename __gnu_cxx::__enable_if<__is_scalar<int>::__value, void>::__type (*)(unsigned long *, unsigned long *, const int &))
   3: std::__niter_base
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, unsigned long *(*)(unsigned long *))
   5: __first
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, unsigned long *)
   7: [B1.4]([B1.6])
   8: std::__niter_base
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, unsigned long *(*)(unsigned long *))
  10: __last
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, unsigned long *)
  12: [B1.9]([B1.11])
  13: __value
  14: [B1.2]([B1.7], [B1.12], [B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned long *__niter_base(unsigned long *__it)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __it
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned long *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline typename __gnu_cxx::__enable_if<__is_scalar<int>::__value, void>::__type __fill_a(unsigned long *__first, unsigned long *__last, const int &__value)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: __first
   2: ++[B1.1]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: __tmp
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B2.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: __first
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, unsigned long *)
   6: *[B2.5]
   7: [B2.6] = [B2.3]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: __first
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, unsigned long *)
   3: __last
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, unsigned long *)
   5: [B3.2] != [B3.4]
   T: for (; [B3.5]; ...)
   Preds (2): B1 B4
   Succs (2): B2 B0

 [B4]
   1: __value
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: const int __tmp = __value;
   Preds (1): B5
   Succs (1): B3

 [B0 (EXIT)]
   Preds (1): B3

vector() : _Base()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, _Vector_base<class Module *, class std::allocator<class Module *> >)
   2: _Vector_base([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Vector_base() : _M_impl()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, struct std::_Vector_base<class Module *, class std::allocator<class Module *> >::_Vector_impl)
   2: _M_impl([B1.1]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Vector_impl() : _Tp_alloc_type(), _M_start(/*implicit*/(pointer)0), _M_finish(/*implicit*/(pointer)0), _M_end_of_storage(/*implicit*/(pointer)0)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, _Tp_alloc_type)
   2: allocator([B1.1]) (Base initializer)
   3: /*implicit*/(pointer)0
   4: _M_start([B1.3]) (Member initializer)
   5: /*implicit*/(pointer)0
   6: _M_finish([B1.5]) (Member initializer)
   7: /*implicit*/(pointer)0
   8: _M_end_of_storage([B1.7]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

allocator() throw() : __gnu_cxx::new_allocator<Module *>()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, __gnu_cxx::new_allocator<Module *>)
   2: new_allocator([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

new_allocator() throw()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~__gnu_cxx::new_allocator<Module *>() throw()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~std::allocator<Module *>() throw()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~new_allocator() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~std::_Vector_base<Module *, std::allocator<Module *> >()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_deallocate
   3: this
   4: [B1.3]->_M_impl
   5: [B1.4]._M_start
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, pointer)
   7: this
   8: [B1.7]->_M_impl
   9: [B1.8]._M_end_of_storage
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, pointer)
  11: this
  12: [B1.11]->_M_impl
  13: [B1.12]._M_start
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, pointer)
  15: [B1.10] - [B1.14]
  16: [B1.15] (ImplicitCastExpr, IntegralCast, size_t)
  17: [B1.2]([B1.6], [B1.16])
  18: this->_M_impl.~_Vector_impl() (Member object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void _M_deallocate(pointer __p, size_t __n)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: _Tr::deallocate
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class std::allocator<class Module *> &, pointer, size_type))
   3: this
   4: [B1.3]->_M_impl
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, class std::allocator<class Module *>)
   6: __p
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, pointer)
   8: __n
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, size_t)
  10: [B1.2]([B1.5], [B1.7], [B1.9])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: __p
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, pointer)
   3: [B2.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.3]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static void deallocate(std::allocator<Module *> &__a, pointer __p, size_type __n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class __gnu_cxx::new_allocator<class Module *>)
   3: [B1.2].deallocate
   4: __p
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, pointer)
   6: __n
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, size_type)
   8: [B1.3]([B1.5], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void deallocate(pointer __p, size_type)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::operator delete
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void *) throw())
   3: __p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, pointer)
   5: [B1.4] (ImplicitCastExpr, BitCast, void *)
   6: [B1.2]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~std::vector<Module *, std::allocator<Module *> >()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::_Destroy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class Module **, class Module **, allocator<class Module *> &))
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   5: [B1.4]->_M_impl
   6: [B1.5]._M_start
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, pointer)
   8: this
   9: [B1.8] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  10: [B1.9]->_M_impl
  11: [B1.10]._M_finish
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, pointer)
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  15: [B1.14]->_M_get_Tp_allocator
  16: [B1.15]()
  17: [B1.2]([B1.7], [B1.12], [B1.16])
  18: ~_Vector_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

_Tp_alloc_type &_M_get_Tp_allocator()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_impl
   3: &[B1.2]
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, _Tp_alloc_type *)
   5: static_cast<_Tp_alloc_type *>([B1.4]) (CXXStaticCastExpr, NoOp, _Tp_alloc_type *)
   6: *[B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void _Destroy(Module **__first, Module **__last, allocator<Module *> &)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: _Destroy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class Module **, class Module **))
   3: __first
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class Module **)
   5: __last
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: [B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void _Destroy(Module **__first, Module **__last)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::__destroy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class Module **, class Module **))
   3: __first
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class Module **)
   5: __last
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: [B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void __destroy(Module **, Module **)
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void push_back(const value_type &__x)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->_M_insert_aux
   3: this
   4: [B1.3]->end
   5: [B1.4]()
   6: [B1.5] (ImplicitCastExpr, NoOp, const class __gnu_cxx::__normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > >)
   7: [B1.6]
   8: [B1.7] (CXXConstructExpr, iterator)
   9: __x
  10: [B1.2]([B1.8], [B1.9])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: _Alloc_traits::construct
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class std::allocator<class Module *> &, pointer, class Module *const &))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   5: [B2.4]->_M_impl
   6: [B2.5] (ImplicitCastExpr, DerivedToBase, class std::allocator<class Module *>)
   7: this
   8: [B2.7] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   9: [B2.8]->_M_impl
  10: [B2.9]._M_finish
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, pointer)
  12: __x
  13: [B2.2]([B2.6], [B2.11], [B2.12])
  14: this
  15: [B2.14] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  16: [B2.15]->_M_impl
  17: [B2.16]._M_finish
  18: ++[B2.17]
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   3: [B3.2]->_M_impl
   4: [B3.3]._M_finish
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, pointer)
   6: this
   7: [B3.6] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   8: [B3.7]->_M_impl
   9: [B3.8]._M_end_of_storage
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, pointer)
  11: [B3.5] != [B3.10]
   T: if [B3.11]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

static void construct(std::allocator<Module *> &__a, pointer __p, Module *const &__arg)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class __gnu_cxx::new_allocator<class Module *>)
   3: [B1.2].construct
   4: __p
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, pointer)
   6: __arg
   7: [B1.3]([B1.5], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void construct(pointer __p, Module *const &__val)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, pointer)
   3: [B1.2] (ImplicitCastExpr, BitCast, void *)
   4: (void *)[B1.3] (CStyleCastExpr, NoOp, void *)
   5: CFGNewAllocator(Module **)
   6: __val
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, class Module *)
   8: ::new ([B1.4]) Module *([B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void _M_insert_aux(iterator __position, const value_type &__x)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: std::_Destroy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class Module **, class Module **, allocator<class Module *> &))
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   5: [B1.4]->_M_impl
   6: [B1.5]._M_start
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, pointer)
   8: this
   9: [B1.8] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  10: [B1.9]->_M_impl
  11: [B1.10]._M_finish
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, pointer)
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  15: [B1.14]->_M_get_Tp_allocator
  16: [B1.15]()
  17: [B1.2]([B1.7], [B1.12], [B1.16])
  18: this
  19: [B1.18] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  20: [B1.19]->_M_deallocate
  21: this
  22: [B1.21] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  23: [B1.22]->_M_impl
  24: [B1.23]._M_start
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, pointer)
  26: this
  27: [B1.26] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  28: [B1.27]->_M_impl
  29: [B1.28]._M_end_of_storage
  30: [B1.29] (ImplicitCastExpr, LValueToRValue, pointer)
  31: this
  32: [B1.31] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  33: [B1.32]->_M_impl
  34: [B1.33]._M_start
  35: [B1.34] (ImplicitCastExpr, LValueToRValue, pointer)
  36: [B1.30] - [B1.35]
  37: [B1.36] (ImplicitCastExpr, IntegralCast, size_t)
  38: [B1.20]([B1.25], [B1.37])
  39: __new_start
  40: [B1.39] (ImplicitCastExpr, LValueToRValue, pointer)
  41: this
  42: [B1.41] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  43: [B1.42]->_M_impl
  44: [B1.43]._M_start
  45: [B1.44] = [B1.40]
  46: __new_finish
  47: [B1.46] (ImplicitCastExpr, LValueToRValue, pointer)
  48: this
  49: [B1.48] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  50: [B1.49]->_M_impl
  51: [B1.50]._M_finish
  52: [B1.51] = [B1.47]
  53: __new_start
  54: [B1.53] (ImplicitCastExpr, LValueToRValue, pointer)
  55: __len
  56: [B1.55] (ImplicitCastExpr, LValueToRValue, size_type)
  57: [B1.54] + [B1.56]
  58: this
  59: [B1.58] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  60: [B1.59]->_M_impl
  61: [B1.60]._M_end_of_storage
  62: [B1.61] = [B1.57]
   Preds (1): B7
   Succs (1): B0

 [B2]
   T: try ...
   Succs (1): B6

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   3: [B3.2]->_M_deallocate
   4: __new_start
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, pointer)
   6: __len
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, size_type)
   8: [B3.3]([B3.5], [B3.7])
   9: throw
   Preds (2): B4 B5
   Succs (1): B0

 [B4]
   1: std::_Destroy
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class Module **, class Module **, allocator<class Module *> &))
   3: __new_start
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, pointer)
   5: __new_finish
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, pointer)
   7: this
   8: [B4.7] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   9: [B4.8]->_M_get_Tp_allocator
  10: [B4.9]()
  11: [B4.2]([B4.4], [B4.6], [B4.10])
   Preds (1): B6
   Succs (1): B3

 [B5]
   1: _Alloc_traits::destroy
   2: [B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class std::allocator<class Module *> &, pointer))
   3: this
   4: [B5.3] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   5: [B5.4]->_M_impl
   6: [B5.5] (ImplicitCastExpr, DerivedToBase, class std::allocator<class Module *>)
   7: __new_start
   8: [B5.7] (ImplicitCastExpr, LValueToRValue, pointer)
   9: __elems_before
  10: [B5.9] (ImplicitCastExpr, LValueToRValue, size_type)
  11: [B5.8] + [B5.10]
  12: [B5.2]([B5.6], [B5.11])
   Preds (1): B6
   Succs (1): B3

 [B6]
  catch (...):
   1: catch (...) {
    if ([B6.5])
        [B5.12];
    else
        [B4.11];
    [B3.8];
    [B3.9];
}
   2: __new_finish
   3: [B6.2] (ImplicitCastExpr, LValueToRValue, pointer)
   4: [B6.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   5: ![B6.4]
   T: if [B6.5]
   Preds (1): B2
   Succs (2): B5 B4

 [B7]
   1: this
   2: [B7.1] (ImplicitCastExpr, NoOp, const class std::vector<class Module *, class std::allocator<class Module *> > *)
   3: [B7.2]->_M_check_len
   4: 1
   5: [B7.4] (ImplicitCastExpr, IntegralCast, size_type)
   6: size_type([B7.5]) (CXXFunctionalCastExpr, NoOp, size_type)
   7: "vector::_M_insert_aux"
   8: [B7.7] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   9: [B7.3]([B7.6], [B7.8])
  10: const size_type __len = this->_M_check_len(size_type(1), "vector::_M_insert_aux");
  11: operator-
  12: [B7.11] (ImplicitCastExpr, FunctionToPointerDecay, typename __normal_iterator<class Module **, class vector<class Module *, class allocator<class Module *> > >::difference_type (*)(const __normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > > &, const __normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > > &))
  13: __position
  14: [B7.13] (ImplicitCastExpr, NoOp, const __normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > >)
  15: this
  16: [B7.15]->begin
  17: [B7.16]()
  18: [B7.17] (ImplicitCastExpr, NoOp, const __normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > >)
  19: [B7.18]
  20: [B7.14] - [B7.19] (OperatorCall)
  21: [B7.20] (ImplicitCastExpr, IntegralCast, const size_type)
  22: const size_type __elems_before = __position - this->begin();
  23: this
  24: [B7.23] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  25: [B7.24]->_M_allocate
  26: __len
  27: [B7.26] (ImplicitCastExpr, LValueToRValue, size_type)
  28: [B7.25]([B7.27])
  29: pointer __new_start(this->_M_allocate(__len));
  30: __new_start
  31: [B7.30] (ImplicitCastExpr, LValueToRValue, pointer)
  32: pointer __new_finish(__new_start);
  33: _Alloc_traits::construct
  34: [B7.33] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class std::allocator<class Module *> &, pointer, class Module *const &))
  35: this
  36: [B7.35] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  37: [B7.36]->_M_impl
  38: [B7.37] (ImplicitCastExpr, DerivedToBase, class std::allocator<class Module *>)
  39: __new_start
  40: [B7.39] (ImplicitCastExpr, LValueToRValue, pointer)
  41: __elems_before
  42: [B7.41] (ImplicitCastExpr, LValueToRValue, size_type)
  43: [B7.40] + [B7.42]
  44: __x
  45: [B7.34]([B7.38], [B7.43], [B7.44])
  46: pointer()
  47: __new_finish
  48: [B7.47] = [B7.46]
  49: std::__uninitialized_move_if_noexcept_a
  50: [B7.49] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **, class std::allocator<class Module *> &))
  51: this
  52: [B7.51] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  53: [B7.52]->_M_impl
  54: [B7.53]._M_start
  55: [B7.54] (ImplicitCastExpr, LValueToRValue, pointer)
  56: __position
  57: [B7.56] (ImplicitCastExpr, NoOp, const class __gnu_cxx::__normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > >)
  58: [B7.57].base
  59: [B7.58]()
  60: [B7.59] (ImplicitCastExpr, LValueToRValue, class Module **)
  61: __new_start
  62: [B7.61] (ImplicitCastExpr, LValueToRValue, pointer)
  63: this
  64: [B7.63] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  65: [B7.64]->_M_get_Tp_allocator
  66: [B7.65]()
  67: [B7.50]([B7.55], [B7.60], [B7.62], [B7.66])
  68: __new_finish
  69: [B7.68] = [B7.67]
  70: __new_finish
  71: ++[B7.70]
  72: std::__uninitialized_move_if_noexcept_a
  73: [B7.72] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **, class std::allocator<class Module *> &))
  74: __position
  75: [B7.74] (ImplicitCastExpr, NoOp, const class __gnu_cxx::__normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > >)
  76: [B7.75].base
  77: [B7.76]()
  78: [B7.77] (ImplicitCastExpr, LValueToRValue, class Module **)
  79: this
  80: [B7.79] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  81: [B7.80]->_M_impl
  82: [B7.81]._M_finish
  83: [B7.82] (ImplicitCastExpr, LValueToRValue, pointer)
  84: __new_finish
  85: [B7.84] (ImplicitCastExpr, LValueToRValue, pointer)
  86: this
  87: [B7.86] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  88: [B7.87]->_M_get_Tp_allocator
  89: [B7.88]()
  90: [B7.73]([B7.78], [B7.83], [B7.85], [B7.89])
  91: __new_finish
  92: [B7.91] = [B7.90]
   Preds (1): B9
   Succs (1): B1

 [B8]
   1: _Alloc_traits::construct
   2: [B8.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class std::allocator<class Module *> &, pointer, class Module *const &))
   3: this
   4: [B8.3] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   5: [B8.4]->_M_impl
   6: [B8.5] (ImplicitCastExpr, DerivedToBase, class std::allocator<class Module *>)
   7: this
   8: [B8.7] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   9: [B8.8]->_M_impl
  10: [B8.9]._M_finish
  11: [B8.10] (ImplicitCastExpr, LValueToRValue, pointer)
  12: this
  13: [B8.12] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  14: [B8.13]->_M_impl
  15: [B8.14]._M_finish
  16: [B8.15] (ImplicitCastExpr, LValueToRValue, pointer)
  17: 1
  18: [B8.16] - [B8.17]
  19: *([B8.18])
  20: ([B8.19]) (ImplicitCastExpr, NoOp, class Module *const)
  21: [B8.2]([B8.6], [B8.11], [B8.20])
  22: this
  23: [B8.22] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  24: [B8.23]->_M_impl
  25: [B8.24]._M_finish
  26: ++[B8.25]
  27: __x
  28: [B8.27] (ImplicitCastExpr, LValueToRValue, value_type)
  29: Module *__x_copy = __x;
  30: std::copy_backward
  31: [B8.30] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **))
  32: __position
  33: [B8.32] (ImplicitCastExpr, NoOp, const class __gnu_cxx::__normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > >)
  34: [B8.33].base
  35: [B8.34]()
  36: [B8.35] (ImplicitCastExpr, LValueToRValue, class Module **)
  37: this
  38: [B8.37] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  39: [B8.38]->_M_impl
  40: [B8.39]._M_finish
  41: [B8.40] (ImplicitCastExpr, LValueToRValue, pointer)
  42: 2
  43: [B8.41] - [B8.42]
  44: this
  45: [B8.44] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
  46: [B8.45]->_M_impl
  47: [B8.46]._M_finish
  48: [B8.47] (ImplicitCastExpr, LValueToRValue, pointer)
  49: 1
  50: [B8.48] - [B8.49]
  51: [B8.31]([B8.36], [B8.43], [B8.50])
  52: __x_copy
  53: [B8.52] (ImplicitCastExpr, LValueToRValue, class Module *)
  54: operator*
  55: [B8.54] (ImplicitCastExpr, FunctionToPointerDecay, reference (*)(void) const)
  56: __position
  57: [B8.56] (ImplicitCastExpr, NoOp, const class __gnu_cxx::__normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > >)
  58: * [B8.57] (OperatorCall)
  59: [B8.58] = [B8.53]
   Preds (1): B9
   Succs (1): B0

 [B9]
   1: this
   2: [B9.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   3: [B9.2]->_M_impl
   4: [B9.3]._M_finish
   5: [B9.4] (ImplicitCastExpr, LValueToRValue, pointer)
   6: this
   7: [B9.6] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   8: [B9.7]->_M_impl
   9: [B9.8]._M_end_of_storage
  10: [B9.9] (ImplicitCastExpr, LValueToRValue, pointer)
  11: [B9.5] != [B9.10]
   T: if [B9.11]
   Preds (1): B10
   Succs (2): B8 B7

 [B0 (EXIT)]
   Preds (3): B1 B3 B8

Module **const &base() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_current
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **copy_backward(Module **__first, Module **__last, Module **__result)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::__copy_move_backward_a2<__is_move_iterator<Module **>::__value>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **))
   3: std::__miter_base
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
   5: __first
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: [B1.4]([B1.6])
   8: std::__miter_base
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
  10: __last
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class Module **)
  12: [B1.9]([B1.11])
  13: __result
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class Module **)
  15: [B1.2]([B1.7], [B1.12], [B1.14])
  16: return ([B1.15]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **__miter_base(Module **__it)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __it
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class Module **)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **__copy_move_backward_a2(Module **__first, Module **__last, Module **__result)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::__copy_move_backward_a<false>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **))
   3: std::__niter_base
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
   5: __first
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: [B1.4]([B1.6])
   8: std::__niter_base
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
  10: __last
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class Module **)
  12: [B1.9]([B1.11])
  13: std::__niter_base
  14: [B1.13] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
  15: __result
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, class Module **)
  17: [B1.14]([B1.16])
  18: [B1.2]([B1.7], [B1.12], [B1.17])
  19: Module **([B1.18]) (CXXFunctionalCastExpr, NoOp, class Module **)
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **__niter_base(Module **__it)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __it
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class Module **)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **__copy_move_backward_a(Module **__first, Module **__last, Module **__result)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: [B5.1] && [B4.2] && [B3.2] && [B2.2]
   2: const bool __simple = (__is_trivial(_ValueType1) && __is_pointer<Module **>::__value && __is_pointer<Module **>::__value && __are_same<_ValueType1, _ValueType2>::__value);
   3: std::__copy_move_backward<false, __simple, _Category>::__copy_move_b
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module *const *, class Module *const *, class Module **))
   5: __first
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: [B1.6] (ImplicitCastExpr, NoOp, class Module *const *)
   8: __last
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, class Module **)
  10: [B1.9] (ImplicitCastExpr, NoOp, class Module *const *)
  11: __result
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class Module **)
  13: [B1.4]([B1.7], [B1.10], [B1.12])
  14: return [B1.13];
   Preds (4): B2 B3(Unreachable) B4(Unreachable) B5(Unreachable)
   Succs (1): B0

 [B2]
   1: __are_same<_ValueType1, _ValueType2>::__value
   2: [B2.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: __is_pointer<Module **>::__value
   2: [B3.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B5.1] && [B4.2] && [B3.2] && ...
   Preds (1): B4
   Succs (2): B2 B1(Unreachable)

 [B4]
   1: __is_pointer<Module **>::__value
   2: [B4.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B5.1] && [B4.2] && ...
   Preds (1): B5
   Succs (2): B3 B1(Unreachable)

 [B5]
   1: __is_trivial(_ValueType1)
   T: [B5.1] && ...
   Preds (1): B6
   Succs (2): B4 B1(Unreachable)

 [B0 (EXIT)]
   Preds (1): B1

static Module **__copy_move_b(Module *const *__first, Module *const *__last, Module **__result)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __result
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class Module **)
   3: _Num
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
   5: [B1.2] - [B1.4]
   6: return [B1.5];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: __builtin_memmove
   2: [B2.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(void *, const void *, unsigned long))
   3: __result
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, class Module **)
   5: _Num
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
   7: [B2.4] - [B2.6]
   8: [B2.7] (ImplicitCastExpr, BitCast, void *)
   9: __first
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, class Module *const *)
  11: [B2.10] (ImplicitCastExpr, BitCast, const void *)
  12: sizeof(Module *)
  13: _Num
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
  15: [B2.14] (ImplicitCastExpr, IntegralCast, unsigned long)
  16: [B2.12] * [B2.15]
  17: [B2.2]([B2.8], [B2.11], [B2.16])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: __last
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, class Module *const *)
   3: __first
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, class Module *const *)
   5: [B3.2] - [B3.4]
   6: const ptrdiff_t _Num = __last - __first;
   7: _Num
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
   9: [B3.8] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

reference operator*() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_current
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class Module **)
   4: *[B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

size_type _M_check_len(size_type __n, const char *__s) const
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: ([B5.21] || [B4.6]) ? [B2.3] : [B3.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->max_size
   3: [B2.2]()
   Preds (2): B4 B5
   Succs (1): B1

 [B3]
   1: __len
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_type)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: __len
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, size_type)
   3: this
   4: [B4.3]->max_size
   5: [B4.4]()
   6: [B4.2] > [B4.5]
   T: ([B5.21] || [B4.6]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B5]
   1: this
   2: [B5.1]->size
   3: [B5.2]()
   4: std::max
   5: [B5.4] (ImplicitCastExpr, FunctionToPointerDecay, const unsigned long &(*)(const unsigned long &, const unsigned long &))
   6: this
   7: [B5.6]->size
   8: [B5.7]()
   9: [B5.8]
  10: __n
  11: [B5.10] (ImplicitCastExpr, NoOp, const unsigned long)
  12: [B5.5]([B5.9], [B5.11])
  13: [B5.12] (ImplicitCastExpr, LValueToRValue, unsigned long)
  14: [B5.3] + [B5.13]
  15: const size_type __len = this->size() + std::max(this->size(), __n);
  16: __len
  17: [B5.16] (ImplicitCastExpr, LValueToRValue, size_type)
  18: this
  19: [B5.18]->size
  20: [B5.19]()
  21: [B5.17] < [B5.20]
   T: [B5.21] || ...
   Preds (2): B6(Unreachable) B7
   Succs (2): B2 B4

 [B6 (NORETURN)]
   1: __throw_length_error
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *) __attribute__((noreturn)))
   3: __s
   4: ([B6.3]) (ImplicitCastExpr, LValueToRValue, const char *)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: this
   2: [B7.1]->max_size
   3: [B7.2]()
   4: this
   5: [B7.4]->size
   6: [B7.5]()
   7: [B7.3] - [B7.6]
   8: __n
   9: [B7.8] (ImplicitCastExpr, LValueToRValue, size_type)
  10: [B7.7] < [B7.9]
   T: if [B7.10]
   Preds (1): B8
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (2): B1 B6

size_type max_size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: _Alloc_traits::max_size
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, size_type (*)(const class std::allocator<class Module *> &))
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   5: [B1.4]->_M_get_Tp_allocator
   6: [B1.5]()
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static size_type max_size(const std::allocator<Module *> &__a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class __gnu_cxx::new_allocator<class Module *>)
   3: [B1.2].max_size
   4: [B1.3]()
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

size_type max_size() const throw()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: -[B1.1]
   3: [B1.2] (ImplicitCastExpr, IntegralCast, size_t)
   4: size_t([B1.3]) (CXXFunctionalCastExpr, NoOp, size_t)
   5: sizeof(Module *)
   6: [B1.4] / [B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const _Tp_alloc_type &_M_get_Tp_allocator() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_M_impl
   3: &[B1.2]
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, const _Tp_alloc_type *)
   5: static_cast<const _Tp_alloc_type *>([B1.4]) (CXXStaticCastExpr, NoOp, const _Tp_alloc_type *)
   6: *[B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const unsigned long &max(const unsigned long &__a, const unsigned long &__b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __a
   2: return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: __b
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __a
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, unsigned long)
   3: __b
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: [B3.2] < [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

iterator begin()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   3: [B1.2]->_M_impl
   4: [B1.3]._M_start
   5: [B1.4] (ImplicitCastExpr, NoOp, class Module **const)
   6: [B1.5] (CXXConstructExpr, iterator)
   7: iterator([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, iterator)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class __gnu_cxx::__normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > >)
   9: [B1.8]
  10: [B1.9] (CXXConstructExpr, iterator)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit __normal_iterator(Module **const &__i) : _M_current(__i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class Module **)
   3: _M_current([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline typename __normal_iterator<Module **, vector<Module *, allocator<Module *> > >::difference_type operator-(const __normal_iterator<Module **, std::vector<Module *, std::allocator<Module *> > > &__lhs, const __normal_iterator<Module **, std::vector<Module *, std::allocator<Module *> > > &__rhs)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __lhs
   2: [B1.1].base
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class Module **)
   5: __rhs
   6: [B1.5].base
   7: [B1.6]()
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class Module **)
   9: [B1.4] - [B1.8]
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

pointer _M_allocate(size_t __n)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.5] ? [B2.8] : [B3.1]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: _Tr::allocate
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, pointer (*)(class std::allocator<class Module *> &, size_type))
   3: this
   4: [B2.3]->_M_impl
   5: [B2.4] (ImplicitCastExpr, DerivedToBase, class std::allocator<class Module *>)
   6: __n
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, size_t)
   8: [B2.2]([B2.5], [B2.7])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: pointer()
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: __n
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: 0
   4: [B4.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: [B4.2] != [B4.4]
   T: [B4.5] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

static pointer allocate(std::allocator<Module *> &__a, size_type __n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class __gnu_cxx::new_allocator<class Module *>)
   3: [B1.2].allocate
   4: __n
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, size_type)
   6: 
   7: [B1.3]([B1.5])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

pointer allocate(size_type __n, const void * = 0)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::operator new
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(std::size_t) throw(std::bad_alloc))
   3: __n
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, size_type)
   5: sizeof(Module *)
   6: [B1.4] * [B1.5]
   7: [B1.2]([B1.6])
   8: static_cast<Module **>([B1.7]) (CXXStaticCastExpr, BitCast, class Module **)
   9: return [B1.8];
   Preds (2): B2(Unreachable) B3
   Succs (1): B0

 [B2 (NORETURN)]
   1: std::__throw_bad_alloc
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void) __attribute__((noreturn)))
   3: [B2.2]()
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __n
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, size_type)
   3: this
   4: [B3.3] (ImplicitCastExpr, NoOp, const class __gnu_cxx::new_allocator<class Module *> *)
   5: [B3.4]->max_size
   6: [B3.5]()
   7: [B3.2] > [B3.6]
   T: if [B3.7]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline Module **__uninitialized_move_if_noexcept_a(Module **__first, Module **__last, Module **__result, std::allocator<Module *> &__alloc)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::__uninitialized_copy_a
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **, allocator<class Module *> &))
   3: __first
   4: ([B1.3]) (ImplicitCastExpr, LValueToRValue, class Module **)
   5: __last
   6: ([B1.5]) (ImplicitCastExpr, LValueToRValue, class Module **)
   7: __result
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class Module **)
   9: __alloc
  10: [B1.2]([B1.4], [B1.6], [B1.8], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **__uninitialized_copy_a(Module **__first, Module **__last, Module **__result, allocator<Module *> &)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::uninitialized_copy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **))
   3: __first
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class Module **)
   5: __last
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: __result
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class Module **)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **uninitialized_copy(Module **__first, Module **__last, Module **__result)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: const bool __assignable = true;
   3: std::__uninitialized_copy<__is_trivial(_ValueType1) && __is_trivial(_ValueType2) && __assignable>::__uninit_copy
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **))
   5: __first
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: __last
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class Module **)
   9: __result
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, class Module **)
  11: [B1.4]([B1.6], [B1.8], [B1.10])
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static Module **__uninit_copy(Module **__first, Module **__last, Module **__result)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::copy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **))
   3: __first
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class Module **)
   5: __last
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: __result
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class Module **)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **copy(Module **__first, Module **__last, Module **__result)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::__copy_move_a2<__is_move_iterator<Module **>::__value>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **))
   3: std::__miter_base
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
   5: __first
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: [B1.4]([B1.6])
   8: std::__miter_base
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
  10: __last
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class Module **)
  12: [B1.9]([B1.11])
  13: __result
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class Module **)
  15: [B1.2]([B1.7], [B1.12], [B1.14])
  16: return ([B1.15]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **__copy_move_a2(Module **__first, Module **__last, Module **__result)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: std::__copy_move_a<false>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **, class Module **, class Module **))
   3: std::__niter_base
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
   5: __first
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: [B1.4]([B1.6])
   8: std::__niter_base
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
  10: __last
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class Module **)
  12: [B1.9]([B1.11])
  13: std::__niter_base
  14: [B1.13] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module **))
  15: __result
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, class Module **)
  17: [B1.14]([B1.16])
  18: [B1.2]([B1.7], [B1.12], [B1.17])
  19: Module **([B1.18]) (CXXFunctionalCastExpr, NoOp, class Module **)
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Module **__copy_move_a(Module **__first, Module **__last, Module **__result)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: [B5.1] && [B4.2] && [B3.2] && [B2.2]
   2: const bool __simple = (__is_trivial(_ValueTypeI) && __is_pointer<Module **>::__value && __is_pointer<Module **>::__value && __are_same<_ValueTypeI, _ValueTypeO>::__value);
   3: std::__copy_move<false, __simple, _Category>::__copy_m
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class Module **(*)(class Module *const *, class Module *const *, class Module **))
   5: __first
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class Module **)
   7: [B1.6] (ImplicitCastExpr, NoOp, class Module *const *)
   8: __last
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, class Module **)
  10: [B1.9] (ImplicitCastExpr, NoOp, class Module *const *)
  11: __result
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class Module **)
  13: [B1.4]([B1.7], [B1.10], [B1.12])
  14: return [B1.13];
   Preds (4): B2 B3(Unreachable) B4(Unreachable) B5(Unreachable)
   Succs (1): B0

 [B2]
   1: __are_same<_ValueTypeI, _ValueTypeO>::__value
   2: [B2.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: __is_pointer<Module **>::__value
   2: [B3.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B5.1] && [B4.2] && [B3.2] && ...
   Preds (1): B4
   Succs (2): B2 B1(Unreachable)

 [B4]
   1: __is_pointer<Module **>::__value
   2: [B4.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B5.1] && [B4.2] && ...
   Preds (1): B5
   Succs (2): B3 B1(Unreachable)

 [B5]
   1: __is_trivial(_ValueTypeI)
   T: [B5.1] && ...
   Preds (1): B6
   Succs (2): B4 B1(Unreachable)

 [B0 (EXIT)]
   Preds (1): B1

static Module **__copy_m(Module *const *__first, Module *const *__last, Module **__result)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __result
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class Module **)
   3: _Num
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
   5: [B1.2] + [B1.4]
   6: return [B1.5];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: __builtin_memmove
   2: [B2.1] (ImplicitCastExpr, BuiltinFnToFnPtr, void *(*)(void *, const void *, unsigned long))
   3: __result
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, class Module **)
   5: [B2.4] (ImplicitCastExpr, BitCast, void *)
   6: __first
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, class Module *const *)
   8: [B2.7] (ImplicitCastExpr, BitCast, const void *)
   9: sizeof(Module *)
  10: _Num
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
  12: [B2.11] (ImplicitCastExpr, IntegralCast, unsigned long)
  13: [B2.9] * [B2.12]
  14: [B2.2]([B2.5], [B2.8], [B2.13])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: __last
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, class Module *const *)
   3: __first
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, class Module *const *)
   5: [B3.2] - [B3.4]
   6: const ptrdiff_t _Num = __last - __first;
   7: _Num
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, ptrdiff_t)
   9: [B3.8] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static void destroy(std::allocator<Module *> &__a, pointer __p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __a
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class __gnu_cxx::new_allocator<class Module *>)
   3: [B1.2].destroy
   4: __p
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, pointer)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void destroy(pointer __p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __p
   2: [B1.1]->~Module *
   3: [B1.2]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iterator end()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   3: [B1.2]->_M_impl
   4: [B1.3]._M_finish
   5: [B1.4] (ImplicitCastExpr, NoOp, class Module **const)
   6: [B1.5] (CXXConstructExpr, iterator)
   7: iterator([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, iterator)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class __gnu_cxx::__normal_iterator<class Module **, class std::vector<class Module *, class std::allocator<class Module *> > >)
   9: [B1.8]
  10: [B1.9] (CXXConstructExpr, iterator)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

size_type size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   3: [B1.2]->_M_impl
   4: [B1.3]._M_finish
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, pointer)
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   8: [B1.7]->_M_impl
   9: [B1.8]._M_start
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, pointer)
  11: [B1.5] - [B1.10]
  12: [B1.11] (ImplicitCastExpr, IntegralCast, size_type)
  13: size_type([B1.12]) (CXXFunctionalCastExpr, NoOp, size_type)
  14: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const_reference operator[](size_type __n) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, struct std::_Vector_base<class Module *, class std::allocator<class Module *> > *)
   3: [B1.2]->_M_impl
   4: [B1.3]._M_start
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, pointer)
   6: __n
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, size_type)
   8: [B1.5] + [B1.7]
   9: *([B1.8])
  10: [B1.9] (ImplicitCastExpr, NoOp, class Module *const)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline basic_ostream<char, std::char_traits<char> > &operator<<(basic_ostream<char, std::char_traits<char> > &__out, const char *__s)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: __out
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: __ostream_insert
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &, const char *, streamsize))
   3: __out
   4: __s
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, const char *)
   6: char_traits<char>::length
   7: [B2.6] (ImplicitCastExpr, FunctionToPointerDecay, size_t (*)(const char_type *))
   8: __s
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, const char *)
  10: [B2.7]([B2.9])
  11: [B2.10] (ImplicitCastExpr, IntegralCast, streamsize)
  12: static_cast<streamsize>([B2.11]) (CXXStaticCastExpr, NoOp, streamsize)
  13: [B2.2]([B2.3], [B2.5], [B2.12])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: __out
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, class std::basic_ios<char>)
   3: [B3.2].setstate
   4: ios_base::badbit
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, iostate)
   6: [B3.3]([B3.5])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: __s
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B4.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   4: ![B4.3]
   T: if [B4.4]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1

void setstate(iostate __state)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->clear
   3: operator|
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Iostate (*)(enum std::_Ios_Iostate, enum std::_Ios_Iostate))
   5: this
   6: [B1.5] (ImplicitCastExpr, NoOp, const class std::basic_ios<char> *)
   7: [B1.6]->rdstate
   8: [B1.7]()
   9: __state
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, iostate)
  11: [B1.8] | [B1.10] (OperatorCall)
  12: [B1.2]([B1.11])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

iostate rdstate() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class std::ios_base *)
   3: [B1.2]->_M_streambuf_state
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, iostate)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline basic_ostream<char, std::char_traits<char> > &endl(basic_ostream<char, std::char_traits<char> > &__os)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: flush
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::char_traits<char> > &(*)(basic_ostream<char, struct std::char_traits<char> > &))
   3: __os
   4: [B1.3].put
   5: __os
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class std::basic_ios<char>)
   7: [B1.6].widen
   8: '\n'
   9: [B1.7]([B1.8])
  10: [B1.4]([B1.9])
  11: [B1.2]([B1.10])
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

char_type widen(char __c) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __check_facet
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class std::ctype<char> &(*)(const class std::ctype<char> *))
   3: this
   4: [B1.3]->_M_ctype
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, const __ctype_type *)
   6: [B1.2]([B1.5])
   7: [B1.6].widen
   8: __c
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, char)
  10: [B1.7]([B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::ctype<char> &__check_facet(const std::ctype<char> *__f)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: __f
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class std::ctype<char> *)
   3: *[B1.2]
   4: return [B1.3];
   Preds (2): B2(Unreachable) B3
   Succs (1): B0

 [B2 (NORETURN)]
   1: __throw_bad_cast
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void) __attribute__((noreturn)))
   3: [B2.2]()
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: __f
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, const class std::ctype<char> *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   4: ![B3.3]
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline basic_ostream<char, std::char_traits<char> > &flush(basic_ostream<char, std::char_traits<char> > &__os)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __os
   2: [B1.1].flush
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

__ostream_type &operator<<(__ostream_type &(*__pf)(__ostream_type &))
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __pf
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, __ostream_type &(*)(__ostream_type &))
   3: this
   4: *[B1.3]
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

