
#print help
print_help() {
cat >&2 <<EOF
Usage: $0 {clank options} compiler arguments

Clank specific options:
  --jhelp               show this help 
  --jdkhome <path>      path to Java(TM) 2 SDK, Standard Edition (JDK_HOME=$JDK_HOME)
  -J<jvm_option>        pass <jvm_option> to JVM

  --debug               run in debug mode (using $DBGPORT}
  --sdebug              run in suspened debug mode (using DBGPORT=$DBGPORT}
  --threads N           use N threads
  --nb                  path to NBDIST (valid NBDIST folder should have NBDIST/bin/netbeans file)
  --llvm                path to LLVM_SRC (valid LLVM_SRC folder should have LLVM_SR/build/bin/clang file)

  --cp:p <classpath>    prepend <classpath> to classpath
  --cp:a <classpath>    append <classpath> to classpath
EOF
} #print_help

found_error=""
#helper function to check important env variables
check_env() {
if [ -z "${SPUTNIK}" ]; then
  echo "ERROR: SPUTNIK=\"$SPUTNIK\" environment variable must point to sputnik repository" >&2
  found_error="yes"
fi
if [ -z "${LLVM_SRC}" ]; 
then
  echo "Warning: LLVM_SRC=\"$LLVM_SRC\" environment variable (--llvm) should point to LLVM root" >&2
  found_error="yes"
else
  export LLVM_SRC
fi

if [ -z "${NBDIST}" ]; then
	NBDIST="${SPUTNIK}/../trunk/nbbuild/netbeans"  
fi
if [ ! -r "${NBDIST}/bin/netbeans" ]; then
	echo "ERROR: to compile test NBDIST=\"$NDBIST\" environment variable (--nb) should point to Netbeans installation (${NBDIST}/bin/netbeans does not exist)" >&2
  found_error="yes"
else
  OLDPWD=`pwd`
  cd $NBDIST
  NBDIST=`pwd`
  cd $OLDPWD
fi

if [ -e $JDK_HOME/bin/java ]
then
  #if not yet found any issues with env variables
  if [ -z "${found_error}" ]
  then
    if [ -z "$CLANK_QUIET" ]; then
      eval $JDK_HOME/bin/java $JAVA_ARGS $RUN_PROFILE -version >&2
      ret_code=$?
    else
      eval $JDK_HOME/bin/java $JAVA_ARGS $RUN_PROFILE -version >/dev/null 2>&1
      ret_code=$?
    fi

    if [ $ret_code == 0 ]
    then
      if [ -z "$CLANK_QUIET" ]; then
        echo "checked JDK_HOME=$JDK_HOME" >&2
      fi
    else
      echo "ERROR: to compile test JDK_HOME=\"$JDK_HOME\" can not run bin/java correctly" >&2
      found_error="yes"
    fi
  fi
else
    echo "ERROR: can not find bin/java in JDK_HOME=$JDK_HOME ($JDK_HOME/bin/java does not exist)" >&2
    found_error="yes"
fi

} #check_env

#initialize class path
prepare_class_path() {
TEST_CLASSPATH="\
${NBDIST}/harness/modules/org-netbeans-insane.jar:\
${NBDIST}/harness/modules/org-netbeans-modules-nbjunit.jar:\
${NBDIST}/platform/lib/org-openide-util-lookup.jar:\
${NBDIST}/platform/modules/org-netbeans-api-annotations-common.jar:\
${NBDIST}/platform/modules/org-netbeans-libs-junit4.jar:\
${SPUTNIK}/modules/org.clang.tools.services/build/test/unit/classes:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clank-java.jar:\
${SPUTNIK}/modules/org.clank.java/build/test/unit/classes:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-adtsupport.jar:\
${SPUTNIK}/modules/org.llvm.adtsupport/build/test/unit/classes:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-analysis.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-arcmigrate.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-ast.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-astmatchers.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-basic.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-clangc.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-codegen.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-driver.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-edit.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-format.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-frontend.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-frontendtool.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-index.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-lex.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-parse.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-rewrite.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-sema.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-serialization.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-staticanalyzer.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-tidy.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-tooling.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-tools-driver.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clang-tools-services.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-clank-java.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-adtsupport.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-bitcode.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-ir.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-linker.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-llvmc.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-option.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-passes.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-profiledata.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-target.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-transforms.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm-utils.jar:\
${SPUTNIK}/clank.suite/build/cluster/modules/org-llvm.jar"
} #prepare_class_path

COMPILER_ARGS=""

PREFIX_CLASSPATH=""
POSTFIX_CLASSPATH=""

SUSPEND="n"
DBGPORT=${DBGPORT-5959}
DEFAULT_DEBUG="-ea -Xdebug -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y"

#
# parse arguments
#
parse_args() {
while [ $# -gt 0 ] ; do
    case "$1" in
       -\?|-jhelp|--jhelp) 
            print_help
            exit 0
            ;;
        --jdkhome) shift; 
            if [ $# -gt 0 ] 
            then 
              echo "Set JDK_HOME=$1" >& 2
              JDK_HOME=$1
            fi
            ;;
        --cp|--cp:a)
            shift;
            if [ $# -gt 0 ] ; then
                if [ ! -z "$POSTFIX_CLASSPATH" ] ; then POSTFIX_CLASSPATH="$POSTFIX_CLASSPATH:" ; fi
                POSTFIX_CLASSPATH=$POSTFIX_CLASSPATH$1;
            fi
            ;;
        
        --cp:p)
            shift;
            if [ $# -gt 0 ] ; then
                if [ ! -z "$PREFIX_CLASSPATH" ] ; then PREFIX_CLASSPATH="$PREFIX_CLASSPATH:" ; fi
                PREFIX_CLASSPATH=$PREFIX_CLASSPATH$1;
            fi
            ;;

        --nb)
            shift
            echo "Set NBDIST=$1" >& 2
            NBDIST=$1
            ;;

        --llvm)
            shift
            echo "Set LLVM_SRC=$1" >& 2
            LLVM_SRC=$1
            ;;

        --nodebug)
            echo "Debug mode OFF" >& 2
            DEBUG=""
            ;;
        --sdebug)
            echo "wait to attach debugger on port ${DBGPORT}" >& 2
            SUSPEND="y"
            DEBUG=$DEFAULT_DEBUG
            ;;
        --debug)
            echo "debigging mode (nowait)" >& 2
            SUSPEND="n"
            DEBUG=$DEFAULT_DEBUG
            ;;
        --threads)
            shift
            echo "using $1 threads" >& 2
            JAVA_ARGS="${JAVA_ARGS} -Dclank.threads=$1"
            ;;
        -L*) lopt=`expr "X-$1" : 'X--L\(.*\)'`; LAUNCHER_ARGS="$LAUNCHER_ARGS $lopt";;
        -J*) jopt=`expr "X-$1" : 'X--J\(.*\)'`; JAVA_ARGS="$JAVA_ARGS $jopt";;
        *) COMPILER_ARGS="$COMPILER_ARGS $1" ;;
    esac
    shift
done
  JAVA_ARGS="$JAVA_ARGS $LAUNCHER_ARGS"
} # parse_args()

if [ -z "$CLANK_QUIET" ]; then
  echo "export CLANK_QUIET=true to suppress trace" >&2
  eval date >&2
fi

# Process arguments given on the command line.
parse_args "$@"

#check important variables
check_env

if [ -n "${found_error}" ]
then
echo "" >& 2
print_help
exit 1
fi

#prepare class path
prepare_class_path

if [ -n "${DEBUG}" ]; then
    RUN_DEBUG="${DEBUG},suspend=${SUSPEND},address=${DBGPORT}"
fi

if [ -z "$CLANK_QUIET" ]; then
  echo using PWD=$PWD >& 2
  echo using JDK_HOME=$JDK_HOME >& 2
  echo using RUN_JMC=$RUN_JMC >& 2
  echo using RUN_COLLECT=$RUN_COLLECT >& 2
  echo using RUN_DEBUG=$RUN_DEBUG >& 2
  echo using RUN_PROFILE=$RUN_PROFILE >& 2
  echo using SPUTNIK=${SPUTNIK} >& 2
  echo using NBDIST=${NBDIST} >& 2
  echo using LLVM_SRC=${LLVM_SRC} >& 2
  echo using JAVA_ARGS=$JAVA_ARGS >& 2
  echo using COMPILER_ARGS=$COMPILER_ARGS >& 2
fi
