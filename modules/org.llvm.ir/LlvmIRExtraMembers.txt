[EXTRA_MEMBERS]
(anonymous namespace)::BBPassManager = TEXT#public static final/*char*/Class<BBPassManager> ID $EQ BBPassManager.class;
(anonymous namespace)::ForcePassLinking = FILE#./extra_members/ForcePassLinkingExtraMembers.java
(anonymous namespace)::MDFieldPrinter = FILE#./extra_members/MDFieldPrinterExtraMembers.java
(anonymous namespace)::MDFieldPrinter::printDwarfEnum = T1EXTENDS#StringifierFunction
(anonymous namespace)::MPPassManager = TEXT#public static final/*char*/Class<MPPassManager> ID $EQ org.llvm.ir.impl.MPPassManager.class;
(anonymous namespace)::PrintBasicBlockPass = TEXT#public static final/*char*/Class<PrintBasicBlockPass> ID $EQ PrintBasicBlockPass.class;
(anonymous namespace)::PrintFunctionPassWrapper = TEXT#public static final/*char*/Class<PrintFunctionPassWrapper> ID $EQ PrintFunctionPassWrapper.class;
(anonymous namespace)::PrintModulePassWrapper = TEXT#public static final/*char*/Class<PrintModulePassWrapper> ID $EQ PrintModulePassWrapper.class;
(anonymous namespace)::TimingInfo = FILE#./extra_members/TimingInfoExtraMembers.java
(anonymous namespace)::VerifierLegacyPass = TEXT#public static final/*char*/Class<VerifierLegacyPass> ID $EQ VerifierLegacyPass.class;
(anonymous namespace)::VerifierSupport = FILE#./extra_members/VerifierSupportExtraMembers.java
BuiltinEntry = FILE#./extra_members/BuiltinEntryExtraMembers.java
ConstantFoldGetElementPtrImpl = T0EXTENDS#Value
IntrinsicTargetInfo = FILE#./extra_members/IntrinsicTargetInfoExtraMembers.java
getIndexedTypeInternal = T0EXTENDS#Value
isEqual = T0EXTENDS#EnumAttr
isInBoundsIndices = T0EXTENDS#Value
isValidMetadataArray = T0EXTENDS#MDNode
isValidMetadataArrayImpl = T0EXTENDS#MDNode
isValidMetadataNullArray = T0EXTENDS#MDNode
llvm::AShrOperator = FILE#./extra_members/AShrOperatorExtraMembers.java
llvm::AddOperator = FILE#./extra_members/AddOperatorExtraMembers.java
llvm::AnalysisInfoMixin = FILE#./extra_members/AnalysisInfoMixinExtraMembers.java
llvm::AnonStructTypeKeyInfo = FILE#./extra_members/AnonStructTypeKeyInfoExtraMembers.java
llvm::AnonStructTypeKeyInfo = IMPLEMENTS#DenseMapInfo<StructType>
llvm::Argument = IMPLEMENTS#IChild<Function>
llvm::Argument = FILE#./extra_members/ArgumentExtraMembers.java
llvm::AssertingVH = FILE#./extra_members/AssertingVHExtraMembers.java
llvm::Attribute = IMPLEMENTS#ComparableLower
llvm::Attribute = IMPLEMENTS#NativePOD<Attribute>
llvm::Attribute = IMPLEMENTS#NativeMoveable<Attribute>
llvm::Attribute = FILE#./extra_members/AttributeExtraMembers.java
llvm::AttributeImpl = EXTENDS#FoldingSetImpl.NodeImpl
llvm::AttributeImpl = IMPLEMENTS#LLVMOpaqueAttributeRef
llvm::AttributeSet = IMPLEMENTS#NativePOD<AttributeSet>
llvm::AttributeSet = IMPLEMENTS#NativeMoveable<AttributeSet>
llvm::AttributeSet = FILE#./extra_members/AttributeSetExtraMembers.java
llvm::AttributeSetImpl = EXTENDS#FoldingSetImpl.NodeImpl
llvm::AttributeSetImpl = FILE#./extra_members/AttributeSetImplExtraMembers.java
llvm::AttributeSetImpl = IMPLEMENTS#ITrailingObjectsJavaBase<AttributeSetImpl>
llvm::AttributeSetNode = EXTENDS#FoldingSetImpl.NodeImpl
llvm::AttributeSetNode = IMPLEMENTS#Iterable<Attribute /*P*/ >
llvm::AttributeSetNode = IMPLEMENTS#ITrailingObjectsJavaBase<AttributeSetNode>
llvm::AttributeSetNode = FILE#./extra_members/AttributeSetNodeExtraMembers.java
llvm::BasicBlock = IMPLEMENTS#IChild<Function>, IValueSymbolTableProvider, Iterable<Instruction>, LLVMOpaqueBasicBlock
llvm::BasicBlock = FILE#./extra_members/BasicBlockExtraMembers.java
llvm::BitCastOperator = FILE#./extra_members/BitCastOperatorExtraMembers.java
llvm::CallInst = IMPLEMENTS#CallOrInvokeInst
llvm::CallInst = FILE#./extra_members/CallInstExtraMembers.java
llvm::CallSite = TEXT#@Override  public CallSite clone() { return new CallSite(this);  }
llvm::CallSite = IMPLEMENTS#NativeCloneable<CallSite>
llvm::CallSiteBase = FILE#./extra_members/CallSiteBaseExtraMembers.java
llvm::CatchSwitchInst = FILE#./extra_members/CatchSwitchInstExtraMembers.java
llvm::Comdat = IMPLEMENTS#NativeCloneable<Comdat>
llvm::Comdat = IMPLEMENTS#NativeMoveable<Comdat>
llvm::Comdat = FILE#./extra_members/ComdatExtraMembers.java
llvm::CompositeType = TEXT#protected CompositeType(CompositeType $Prm0) { super($Prm0); /*for descendants*/}
llvm::ConcreteOperator = FILE#./extra_members/ConcreteOperatorExtraMembers.java
llvm::Constant = TEXT#protected Constant() { /* for sentinels */ }
llvm::ConstantAggrKeyType = FILE#./extra_members/ConstantAggrKeyTypeExtraMembers.java
llvm::ConstantAggrKeyType = T0EXTENDS#ConstantAggregate
llvm::ConstantAggrKeyType = T1EXTENDS#Type
llvm::ConstantDataSequential = FILE#./extra_members/ConstantDataSequentialExtraMembers.java
llvm::ConstantExpr = FILE#./extra_members/ConstantExprExtraMembers.java
llvm::ConstantFolder = IMPLEMENTS#org.llvm.ir.java.IFolder<Constant, Constant>
llvm::ConstantFolder = FILE#./extra_members/ConstantFolderExtraMembers.java
llvm::ConstantUniqueMap = IMPLEMENTS#Iterable<ConstantClass>
llvm::ConstantUniqueMap = IMPLEMENTS#Destructors.ClassWithDestructor
llvm::ConstantUniqueMap = FILE#./extra_members/ConstantUniqueMapExtraMembers.java
llvm::ConstantUniqueMap::MapInfo = IMPLEMENTS#DenseMapInfo<ConstantClass / *P*/>
llvm::ConstantUniqueMap::MapInfo = FILE#./extra_members/MapInfoExtraMembers.java
llvm::DITypeRefArray = FILE#./extra_members/DITypeRefArrayExtraMembers.java
llvm::DITypeRefArray::iterator = IMPLEMENTS#type$iterator<type$iterator, TypedDINodeRef<DIType>>, std.iterator<std.input_iterator_tag, TypedDINodeRef<DIType>>
llvm::DITypeRefArray::iterator = FILE#./extra_members/iteratorExtraMembers.java
llvm::DataLayout = IMPLEMENTS#LLVMOpaqueTargetData
llvm::DbgDeclareInst = IMPLEMENTS#IVariableAndExprOwner
llvm::DbgValueInst = IMPLEMENTS#IVariableAndExprOwner
llvm::DenseMapAPFloatKeyInfo = IMPLEMENTS#DenseMapInfo<APFloat>
llvm::DenseMapAPFloatKeyInfo = FILE#./extra_members/DenseMapAPFloatKeyInfoExtraMembers.java
llvm::DenseMapAPIntKeyInfo = IMPLEMENTS#DenseMapInfo<APInt>
llvm::DenseMapAPIntKeyInfo = FILE#./extra_members/DenseMapAPIntKeyInfoExtraMembers.java

llvm::DenseMapInfo<AAMDNodes> = FILE#./extra_members/DenseMapInfoAAMDNodesExtraMembers.java
llvm::DenseMapInfo<AAMDNodes> = IMPLEMENTS#DenseMapInfo<AAMDNodes>
llvm::DenseMapInfo<ValueMapCallbackVH<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2> > = FILE#./extra_members/DenseMapInfoValueMapCallbackVH$T$T_0_1$T_0_2ExtraMembers.java
llvm::DenseMapInfo<ValueMapCallbackVH<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2> > = IMPLEMENTS#DenseMapInfo<ValueMapCallbackVH<KeyT, ValueT>>
llvm::DenseMapInfo<BasicBlockEdge> = FILE#./extra_members/DenseMapInfoBasicBlockEdgeExtraMembers.java
llvm::DenseMapInfo<BasicBlockEdge> = IMPLEMENTS#DenseMapInfo<BasicBlockEdge>
llvm::DenseMapInfo<AttributeSet> = FILE#./extra_members/DenseMapInfoAttributeSetExtraMembers.java
llvm::DenseMapInfo<AttributeSet> = IMPLEMENTS#DenseMapInfo<AttributeSet>
llvm::DenseMapInfo<AssertingVH<type-parameter-0-0> > = FILE#./extra_members/DenseMapInfoAssertingVH$TExtraMembers.java
llvm::DenseMapInfo<AssertingVH<type-parameter-0-0> > = IMPLEMENTS#DenseMapInfo<AssertingVH<T>>

llvm::DiagnosticInfo = IMPLEMENTS#LLVMOpaqueDiagnosticInfo

llvm::DiagnosticKind = IMPLEMENTS#Native.ComparableLower
llvm::DiagnosticKind = FILE#./extra_members/DiagnosticKindExtraMembers.java
llvm::DomTreeNodeBase<BasicBlock> = EXTENDS#DomTreeNodeBase<BasicBlock>
llvm::DominatorTreeAnalysis = IMPLEMENTS#IPassFunction<DominatorTree>
llvm::DominatorTreeBase<BasicBlock>::InfoRec = IMPLEMENTS#NativeCloneable<InfoRec>
llvm::DominatorTreeBase<BasicBlock>::InfoRec = IMPLEMENTS#NativeMoveable<InfoRec>
llvm::DominatorTreeBase<BasicBlock>::InfoRec = FILE#./extra_members/InfoRecExtraMembers.java
llvm::DominatorTreePrinterPass = IMPLEMENTS#IPassFunction<PreservedAnalyses>
llvm::DominatorTreeVerifierPass = IMPLEMENTS#IPassFunction<PreservedAnalyses>
llvm::DominatorTreeWrapperPass = TEXT#public static final/*char*/Class<DominatorTreeWrapperPass> ID $EQ DominatorTreeWrapperPass.class;
llvm::FPPassManager = TEXT#public static final/*char*/Class<FPPassManager> ID $EQ FPPassManager.class;
llvm::FilteredPassNameParser = FILE#./extra_members/FilteredPassNameParserExtraMembers.java
llvm::Function = IMPLEMENTS#IChild<Module>, IValueSymbolTableProvider, Iterable<BasicBlock>
llvm::Function = FILE#./extra_members/FunctionExtraMembers.java
llvm::FunctionType = FILE#./extra_members/FunctionTypeExtraMembers.java
llvm::FunctionTypeKeyInfo = FILE#./extra_members/FunctionTypeKeyInfoExtraMembers.java
llvm::FunctionTypeKeyInfo = IMPLEMENTS#DenseMapInfo<FunctionType>
llvm::GEPOperator = FILE#./extra_members/GEPOperatorExtraMembers.java
llvm::GenericDINode = IMPLEMENTS#MDTuple_or_GenericDINode
llvm::GlobalAlias = IMPLEMENTS#IChild<Module>
llvm::GlobalAlias = FILE#./extra_members/GlobalAliasExtraMembers.java
llvm::GlobalIFunc = IMPLEMENTS#IChild<Module>
llvm::GlobalIFunc = FILE#./extra_members/GlobalIFuncExtraMembers.java
llvm::GlobalIndirectSymbol = TEXT#protected GlobalIndirectSymbol() {}
llvm::GlobalObject = TEXT#protected GlobalObject() { /* for sentinels */ }
llvm::GlobalValue = TEXT#protected GlobalValue() { /* for sentinels */ }
llvm::GlobalVariable = IMPLEMENTS#IChild<Module>
llvm::GlobalVariable = FILE#./extra_members/GlobalVariableExtraMembers.java



llvm::GraphTraits<DominatorTree * > = TEXT#private static final GraphTraitsDominatorTree$P INSTANCE $EQ new GraphTraitsDominatorTree$P();
llvm::GraphTraits<DominatorTree * > = TEXT#public static GraphTraitsDominatorTree$P $GTraits() { return INSTANCE; }

llvm::GraphTraits<const Function * > = TEXT#private static final GraphTraitsFunction$C$P INSTANCE $EQ new GraphTraitsFunction$C$P();
llvm::GraphTraits<const Function * > = TEXT#public static GraphTraitsFunction$C$P $GTraits() { return INSTANCE; }

llvm::GraphTraits<Function * > = TEXT#private static final GraphTraitsFunction$P INSTANCE $EQ new GraphTraitsFunction$P();
llvm::GraphTraits<Function * > = TEXT#public static GraphTraitsFunction$P $GTraits() { return INSTANCE; }

llvm::GraphTraits<Inverse<const BasicBlock * > > = TEXT#private static final GraphTraitsInverse$BasicBlock$C$P INSTANCE $EQ new GraphTraitsInverse$BasicBlock$C$P();
llvm::GraphTraits<Inverse<const BasicBlock * > > = TEXT#public static GraphTraitsInverse$BasicBlock$C$P $GTraits() { return INSTANCE; }

llvm::GraphTraits<Inverse<BasicBlock * > > = TEXT#private static final GraphTraitsInverse$BasicBlock$P INSTANCE $EQ new GraphTraitsInverse$BasicBlock$P();
llvm::GraphTraits<Inverse<BasicBlock * > > = TEXT#public static GraphTraitsInverse$BasicBlock$P $GTraits() { return INSTANCE; }

llvm::GraphTraits<Inverse<const Function * > > = TEXT#private static final GraphTraitsInverse$Function$C$P INSTANCE $EQ new GraphTraitsInverse$Function$C$P();
llvm::GraphTraits<Inverse<const Function * > > = TEXT#public static GraphTraitsInverse$Function$C$P $GTraits() { return INSTANCE; }

llvm::GraphTraits<Inverse<Function * > > = TEXT#private static final GraphTraitsInverse$Function$P INSTANCE $EQ new GraphTraitsInverse$Function$P();
llvm::GraphTraits<Inverse<Function * > > = TEXT#public static GraphTraitsInverse$Function$P $GTraits() { return INSTANCE; }

llvm::GraphTraits<const Type * > = TEXT#private static final GraphTraitsType$C$P INSTANCE $EQ new GraphTraitsType$C$P();
llvm::GraphTraits<const Type * > = TEXT#public static GraphTraitsType$C$P $GTraits() { return INSTANCE; }

llvm::GraphTraits<Type * > = TEXT#private static final GraphTraitsType$P INSTANCE $EQ new GraphTraitsType$P();
llvm::GraphTraits<Type * > = TEXT#public static GraphTraitsType$P $GTraits() { return INSTANCE; }
llvm::GraphTraits<const DomTreeNodeBase<BasicBlock> * > = FILE#./extra_members/GraphTraitsDomTreeNodeBase$BasicBlock$C$PExtraMembers.java
llvm::GraphTraits<DomTreeNodeBase<BasicBlock> * > = FILE#./extra_members/GraphTraitsDomTreeNodeBase$BasicBlock$PExtraMembers.java

llvm::IRBuilder = IMPLEMENTS#LLVMOpaqueBuilder
llvm::InlineAsm::ConstraintInfo = IMPLEMENTS#NativeCloneable<ConstraintInfo>
llvm::InlineAsm::ConstraintInfo = TEXT#@Override public ConstraintInfo clone() { return new ConstraintInfo(this); }
llvm::InnerAnalysisManagerProxy = T0EXTENDS#AnalysisManager
llvm::InnerAnalysisManagerProxy::Result = T0EXTENDS#AnalysisManager
llvm::InstIterator = IMPLEMENTS#type$iterator<InstIterator, II_t>
llvm::InstIterator = FILE#./extra_members/InstIteratorExtraMembers.java
llvm::InstVisitor = TEXT#public default void $InstVisitor() {}
llvm::Instruction = IMPLEMENTS#IChild<BasicBlock>
llvm::Instruction = FILE#./extra_members/InstructionExtraMembers.java
llvm::Intrinsic::IITDescriptor = FILE#./extra_members/IITDescriptorExtraMembers.java
llvm::Intrinsic::IITDescriptor::(anonymous) = FILE#./extra_members/Unnamed_union1ExtraMembers.java

llvm::InvokeInst = FILE#./extra_members/InvokeInstExtraMembers.java
llvm::InvokeInst = IMPLEMENTS#CallOrInvokeInst
llvm::LLVMConstants = IMPLEMENTS#Native.ComparableLower
llvm::LLVMConstants = FILE#./extra_members/LLVMConstantsExtraMembers.java
llvm::LLVMContext = FILE#./extra_members/LLVMContextExtraMembers.java
llvm::LLVMContext = IMPLEMENTS#LLVMOpaqueContext
llvm::LShrOperator = FILE#./extra_members/LShrOperatorExtraMembers.java

llvm::LayoutAlignElem = FILE#./extra_members/LayoutAlignElemExtraMembers.java
llvm::LayoutAlignElem = IMPLEMENTS#NativeCloneable<LayoutAlignElem>
llvm::MDAttachmentMap = IMPLEMENTS#NativeCloneable<MDAttachmentMap>
llvm::MDAttachmentMap = FILE#./extra_members/MDAttachmentMapExtraMembers.java
llvm::MDBuilder::TBAAStructField = TEXT#public TBAAStructField() {}
llvm::MDGlobalAttachmentMap = IMPLEMENTS#NativeCloneable<MDGlobalAttachmentMap>
llvm::MDGlobalAttachmentMap = FILE#./extra_members/MDGlobalAttachmentMapExtraMembers.java
llvm::MDGlobalAttachmentMap::Attachment = IMPLEMENTS#NativeCloneable<Attachment>
llvm::MDGlobalAttachmentMap::Attachment = FILE#./extra_members/AttachmentExtraMembers.java
llvm::MDNode = FILE#./extra_members/MDNodeExtraMembers.java
llvm::MDNodeInfo = IMPLEMENTS#DenseMapInfo<NodeTy>


llvm::MDNodeKeyImpl<DIBasicType> = IMPLEMENTS#MDNodeKeyImpl<DIBasicType>
llvm::MDNodeKeyImpl<DICompositeType> = IMPLEMENTS#MDNodeKeyImpl<DICompositeType>
llvm::MDNodeKeyImpl<DIDerivedType> = IMPLEMENTS#MDNodeKeyImpl<DIDerivedType>
llvm::MDNodeKeyImpl<DIEnumerator> = IMPLEMENTS#MDNodeKeyImpl<DIEnumerator>
llvm::MDNodeKeyImpl<DIExpression> = IMPLEMENTS#MDNodeKeyImpl<DIExpression>
llvm::MDNodeKeyImpl<DIFile> = IMPLEMENTS#MDNodeKeyImpl<DIFile>
llvm::MDNodeKeyImpl<DIGlobalVariable> = IMPLEMENTS#MDNodeKeyImpl<DIGlobalVariable>
llvm::MDNodeKeyImpl<DIImportedEntity> = IMPLEMENTS#MDNodeKeyImpl<DIImportedEntity>
llvm::MDNodeKeyImpl<DILexicalBlock> = IMPLEMENTS#MDNodeKeyImpl<DILexicalBlock>
llvm::MDNodeKeyImpl<DILexicalBlockFile> = IMPLEMENTS#MDNodeKeyImpl<DILexicalBlockFile>
llvm::MDNodeKeyImpl<DILocalVariable> = IMPLEMENTS#MDNodeKeyImpl<DILocalVariable>
llvm::MDNodeKeyImpl<DILocation> = IMPLEMENTS#MDNodeKeyImpl<DILocation>
llvm::MDNodeKeyImpl<DIMacro> = IMPLEMENTS#MDNodeKeyImpl<DIMacro>
llvm::MDNodeKeyImpl<DIMacroFile> = IMPLEMENTS#MDNodeKeyImpl<DIMacroFile>
llvm::MDNodeKeyImpl<DIModule> = IMPLEMENTS#MDNodeKeyImpl<DIModule>
llvm::MDNodeKeyImpl<DINamespace> = IMPLEMENTS#MDNodeKeyImpl<DINamespace>
llvm::MDNodeKeyImpl<DIObjCProperty> = IMPLEMENTS#MDNodeKeyImpl<DIObjCProperty>
llvm::MDNodeKeyImpl<DISubprogram> = IMPLEMENTS#MDNodeKeyImpl<DISubprogram>
llvm::MDNodeKeyImpl<DISubrange> = IMPLEMENTS#MDNodeKeyImpl<DISubrange>
llvm::MDNodeKeyImpl<DISubroutineType> = IMPLEMENTS#MDNodeKeyImpl<DISubroutineType>
llvm::MDNodeKeyImpl<DITemplateTypeParameter> = IMPLEMENTS#MDNodeKeyImpl<DITemplateTypeParameter>
llvm::MDNodeKeyImpl<DITemplateValueParameter> = IMPLEMENTS#MDNodeKeyImpl<DITemplateValueParameter>
llvm::MDNodeKeyImpl<GenericDINode> = IMPLEMENTS#MDNodeKeyImpl<GenericDINode>
llvm::MDNodeKeyImpl<MDTuple> = IMPLEMENTS#MDNodeKeyImpl<MDTuple>

llvm::MDOperand = IMPLEMENTS#GetMetadata
llvm::MDOperand = IMPLEMENTS#simplify_type
llvm::MDOperand = FILE#./extra_members/MDOperandExtraMembers.java

llvm::MDString = FILE#./extra_members/MDStringExtraMembers.java
llvm::MDString = IMPLEMENTS#NativeCloneable<MDString>
llvm::MDString = IMPLEMENTS#NativeMoveable<MDString>
llvm::MDTuple = IMPLEMENTS#MDTuple_or_GenericDINode
llvm::MDTuple = FILE#./extra_members/MDTupleExtraMembers.java
llvm::MDTupleTypedArrayWrapper = FILE#./extra_members/MDTupleTypedArrayWrapperExtraMembers.java
llvm::MDTupleTypedArrayWrapper = IMPLEMENTS#Iterable<T>

llvm::Metadata = FILE#./extra_members/MetadataExtraMembers.java
llvm::MetadataAsValue = FILE#./extra_members/MetadataAsValueExtraMembers.java
llvm::MetadataTracking = TEXT#public static void untrack(final type$ref<Metadata /*P*/ /*&*/> MD) { untrack(MD.$deref()); }
llvm::Module = TEXT#@Override public java.util.Iterator<Function> iterator() {return new JavaIterator(begin(), end()); }
llvm::Module = IMPLEMENTS#Iterable<Function>, IValueSymbolTableProvider
llvm::Module::ModuleFlagEntry = IMPLEMENTS#NativeCloneable<ModuleFlagEntry>
llvm::Module::ModuleFlagEntry = FILE#./extra_members/ModuleFlagEntryExtraMembers.java
llvm::Module::debug_compile_units_iterator = IMPLEMENTS#type$iterator<debug_compile_units_iterator
llvm::Module::debug_compile_units_iterator = TEXT#@Override public debug_compile_units_iterator clone() { return new debug_compile_units_iterator(this); }
llvm::Module::global_object_iterator_t = IMPLEMENTS#type$iterator<global_object_iterator_t, GlobalObject/*P*/>
llvm::Module::global_object_iterator_t = FILE#./extra_members/global_object_iterator_tExtraMembers.java
llvm::ModuleSummaryIndex = FILE#./extra_members/ModuleSummaryIndexExtraMembers.java
llvm::ModuleSummaryIndex = IMPLEMENTS#Iterable<std.pairULongType<std.vector<unique_ptr<GlobalValueSummary>>>>
llvm::ModuleToFunctionPassAdaptor = T0EXTENDS#IPassFunction<PreservedAnalyses>
llvm::ModuleToFunctionPassAdaptor = IMPLEMENTS#IPassModule<PreservedAnalyses>
llvm::MulOperator = FILE#./extra_members/MulOperatorExtraMembers.java
llvm::NamedMDNode::op_iterator_impl = IMPLEMENTS#type$iterator<op_iterator_impl, T1>
llvm::NamedMDNode::op_iterator_impl = FILE#./extra_members/op_iterator_implExtraMembers.java
llvm::NoFolder = FILE#./extra_members/NoFolderExtraMembers.java
llvm::NoFolder = IMPLEMENTS#org.llvm.ir.java.IFolder<Constant, Instruction>
llvm::OperandBundleDefT = FILE#./extra_members/OperandBundleDefTExtraMembers.java
llvm::OperandBundleUser = FILE#./extra_members/OperandBundleUserExtraMembers.java

llvm::Operator = TEXT#protected Operator(Type ty, int vty, type$ptr<Use> $Prm2, int NumOps) { super(ty, vty, $Prm2, NumOps); }
llvm::OuterAnalysisManagerProxy = T0EXTENDS#AnalysisManager
llvm::OuterAnalysisManagerProxy::Result = IMPLEMENTS#IAnalysisResult
llvm::OuterAnalysisManagerProxy::Result = FILE#./extra_members/ResultExtraMembers.java
llvm::OuterAnalysisManagerProxy::Result = T0EXTENDS#AnalysisManager
llvm::OverflowingBinaryOperator = TEXT#public OverflowingBinaryOperator(Type ty, int vty, type$ptr<Use> $Prm2, int NumOps) { super(ty, vty, $Prm2, NumOps); }
llvm::OverflowingBinaryOperator = TEXT#public OverflowingBinaryOperator() { /*for descendants deleted ctors*/ }

llvm::PMDataManager = FILE#./extra_members/PMDataManagerExtraMembers.java
llvm::PMTopLevelManager = FILE#./extra_members/PMTopLevelManagerExtraMembers.java
llvm::PMTopLevelManager::AUFoldingSetNode = TEXT#private static FoldingSetTrait<AUFoldingSetNode> $Trait $EQ new FoldingSetTraitAUFoldingSetNode();
llvm::PMTopLevelManager::AUFoldingSetNode = TEXT#private static FoldingSetTrait<AUFoldingSetNode> $Trait() { return $Trait; }
llvm::Pass = TEXT#private final /*const*/Class<? extends Pass>/*void P*/ PassID;
llvm::PassArgFilter = FILE#./extra_members/PassArgFilterExtraMembers.java
llvm::PassInfo = FILE#./extra_members/PassInfoExtraMembers.java
llvm::PassInfoMixin = FILE#./extra_members/PassInfoMixinExtraMembers.java
llvm::PassRegistry = IMPLEMENTS#LLVMOpaquePassRegistry
llvm::PatternMatch::AnyBinaryOp_match = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::AnyBinaryOp_match = T1EXTENDS#match<RHS_t>
llvm::PatternMatch::AnyBinaryOp_match = IMPLEMENTS#match<AnyBinaryOp_match>
llvm::PatternMatch::AnyBinaryOp_match = FILE#./extra_members/AnyBinaryOp_matchExtraMembers.java
llvm::PatternMatch::AnyBinaryOp_match::match = T0EXTENDS#Value
llvm::PatternMatch::Argument_match = IMPLEMENTS#match<Argument_match<Opnd_t>>
llvm::PatternMatch::Argument_match = T0EXTENDS#match<Opnd_t>
llvm::PatternMatch::Argument_match = FILE#./extra_members/Argument_matchExtraMembers.java
llvm::PatternMatch::Argument_match::match = T0EXTENDS#Value
llvm::PatternMatch::BinOp2_match = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::BinOp2_match = T1EXTENDS#match<RHS_t>
llvm::PatternMatch::BinOp2_match = IMPLEMENTS#match<BinOp2_match>
llvm::PatternMatch::BinOp2_match = FILE#./extra_members/BinOp2_matchExtraMembers.java
llvm::PatternMatch::BinOp2_match::match = T0EXTENDS#Value
llvm::PatternMatch::BinaryOp_match = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::BinaryOp_match = T1EXTENDS#match<RHS_t>
llvm::PatternMatch::BinaryOp_match = IMPLEMENTS#match<BinaryOp_match>
llvm::PatternMatch::BinaryOp_match = FILE#./extra_members/BinaryOp_matchExtraMembers.java
llvm::PatternMatch::BinaryOp_match::match = T0EXTENDS#Value
llvm::PatternMatch::CastClass_match = IMPLEMENTS#match<CastClass_match>
llvm::PatternMatch::CastClass_match = T0EXTENDS#match<Op_t>
llvm::PatternMatch::CastClass_match = FILE#./extra_members/CastClass_matchExtraMembers.java
llvm::PatternMatch::CastClass_match::match = T0EXTENDS#Value

llvm::PatternMatch::CmpClass_match = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::CmpClass_match = T1EXTENDS#match<RHS_t>
llvm::PatternMatch::CmpClass_match = T2EXTENDS#CmpInst
llvm::PatternMatch::CmpClass_match = IMPLEMENTS#match<CmpClass_match>
llvm::PatternMatch::CmpClass_match = FILE#./extra_members/CmpClass_matchExtraMembers.java

llvm::PatternMatch::CmpClass_match::match = T0EXTENDS#Value
llvm::PatternMatch::Exact_match = IMPLEMENTS#match<Exact_match>
llvm::PatternMatch::Exact_match = T0EXTENDS#match<SubPattern_t>
llvm::PatternMatch::Exact_match = FILE#./extra_members/Exact_matchExtraMembers.java
llvm::PatternMatch::Exact_match::match = T0EXTENDS#Value
llvm::PatternMatch::IntrinsicID_match = IMPLEMENTS#match<IntrinsicID_match>
llvm::PatternMatch::IntrinsicID_match = FILE#./extra_members/IntrinsicID_matchExtraMembers.java
llvm::PatternMatch::IntrinsicID_match::match = T0EXTENDS#Value

llvm::PatternMatch::MaxMin_match = IMPLEMENTS#match<MaxMin_match>
llvm::PatternMatch::MaxMin_match = T0EXTENDS#CmpInst
llvm::PatternMatch::MaxMin_match = T1EXTENDS#match<LHS_t>
llvm::PatternMatch::MaxMin_match = T2EXTENDS#match<RHS_t>
llvm::PatternMatch::MaxMin_match = T3EXTENDS#match_pred
llvm::PatternMatch::MaxMin_match = FILE#./extra_members/MaxMin_matchExtraMembers.java

llvm::PatternMatch::MaxMin_match::match = T0EXTENDS#Value
llvm::PatternMatch::OneUse_match = IMPLEMENTS#match<OneUse_match>
llvm::PatternMatch::OneUse_match = T0EXTENDS#match<SubPattern_t>
llvm::PatternMatch::OneUse_match = FILE#./extra_members/OneUse_matchExtraMembers.java
llvm::PatternMatch::OneUse_match::match = T0EXTENDS#Value
llvm::PatternMatch::OverflowingBinaryOp_match = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::OverflowingBinaryOp_match = T1EXTENDS#match<RHS_t>
llvm::PatternMatch::OverflowingBinaryOp_match = IMPLEMENTS#match<OverflowingBinaryOp_match>
llvm::PatternMatch::OverflowingBinaryOp_match = FILE#./extra_members/OverflowingBinaryOp_matchExtraMembers.java
llvm::PatternMatch::OverflowingBinaryOp_match::match = T0EXTENDS#Value

llvm::PatternMatch::SelectClass_match = T0EXTENDS#match<Cond_t>
llvm::PatternMatch::SelectClass_match = T1EXTENDS#match<LHS_t>
llvm::PatternMatch::SelectClass_match = T2EXTENDS#match<RHS_t>
llvm::PatternMatch::SelectClass_match = IMPLEMENTS#match<SelectClass_match>
llvm::PatternMatch::SelectClass_match = FILE#./extra_members/SelectClass_matchExtraMembers.java

llvm::PatternMatch::SelectClass_match::match = T0EXTENDS#Value
llvm::PatternMatch::Signum_match = IMPLEMENTS#match<Signum_match>
llvm::PatternMatch::Signum_match = T0EXTENDS#match<Opnd_t>
llvm::PatternMatch::Signum_match = FILE#./extra_members/Signum_matchExtraMembers.java
llvm::PatternMatch::Signum_match::match = T0EXTENDS#Value

llvm::PatternMatch::UAddWithOverflow_match = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::UAddWithOverflow_match = T1EXTENDS#match<RHS_t>
llvm::PatternMatch::UAddWithOverflow_match = T2EXTENDS#match<Sum_t>
llvm::PatternMatch::UAddWithOverflow_match = IMPLEMENTS#match<UAddWithOverflow_match>
llvm::PatternMatch::UAddWithOverflow_match = FILE#./extra_members/UAddWithOverflow_matchExtraMembers.java

llvm::PatternMatch::UAddWithOverflow_match::match = T0EXTENDS#Value

llvm::PatternMatch::api_pred_ty = IMPLEMENTS#cst_pred_ty_Predicate
llvm::PatternMatch::api_pred_ty = T0EXTENDS#cst_pred_ty_Predicate
llvm::PatternMatch::api_pred_ty = FILE#./extra_members/api_pred_tyExtraMembers.java

llvm::PatternMatch::api_pred_ty::match = T0EXTENDS#Value
llvm::PatternMatch::apint_match = IMPLEMENTS#match<apint_match>
llvm::PatternMatch::apint_match = FILE#./extra_members/apint_matchExtraMembers.java
llvm::PatternMatch::apint_match::match = T0EXTENDS#Value
llvm::PatternMatch::bind_const_intval_ty = IMPLEMENTS#match<bind_const_intval_ty>
llvm::PatternMatch::bind_const_intval_ty = FILE#./extra_members/bind_const_intval_tyExtraMembers.java
llvm::PatternMatch::bind_const_intval_ty::match = T0EXTENDS#Value
llvm::PatternMatch::bind_ty = IMPLEMENTS#match<bind_ty>
llvm::PatternMatch::bind_ty = FILE#./extra_members/bind_tyExtraMembers.java
llvm::PatternMatch::bind_ty::match = T0EXTENDS#Value
llvm::PatternMatch::br_match = IMPLEMENTS#match<br_match>
llvm::PatternMatch::br_match = FILE#./extra_members/br_matchExtraMembers.java
llvm::PatternMatch::br_match::match = T0EXTENDS#Value
llvm::PatternMatch::brc_match = IMPLEMENTS#match<brc_match>
llvm::PatternMatch::brc_match = T0EXTENDS#match<Cond_t>
llvm::PatternMatch::brc_match = FILE#./extra_members/brc_matchExtraMembers.java
llvm::PatternMatch::brc_match::match = T0EXTENDS#Value
llvm::PatternMatch::class_match = IMPLEMENTS#match<class_match>
llvm::PatternMatch::class_match = FILE#./extra_members/class_matchExtraMembers.java
llvm::PatternMatch::class_match::match = T0EXTENDS#Value

llvm::PatternMatch::constantint_match = IMPLEMENTS#match<constantint_match>
llvm::PatternMatch::constantint_match = FILE#./extra_members/constantint_matchExtraMembers.java

llvm::PatternMatch::constantint_match::match = T0EXTENDS#Value

llvm::PatternMatch::cst_pred_ty = IMPLEMENTS#cst_pred_ty_Predicate, match<cst_pred_ty>
llvm::PatternMatch::cst_pred_ty = FILE#./extra_members/cst_pred_tyExtraMembers.java
llvm::PatternMatch::cst_pred_ty = T0EXTENDS#cst_pred_ty_Predicate
llvm::PatternMatch::cst_pred_ty::match = T0EXTENDS#Value
llvm::PatternMatch::fneg_match = IMPLEMENTS#match<fneg_match>
llvm::PatternMatch::fneg_match = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::fneg_match = FILE#./extra_members/fneg_matchExtraMembers.java
llvm::PatternMatch::fneg_match::match = T0EXTENDS#Value

llvm::PatternMatch::is_all_ones = IMPLEMENTS#cst_pred_ty_Predicate
llvm::PatternMatch::is_maxsignedvalue = IMPLEMENTS#cst_pred_ty_Predicate
llvm::PatternMatch::is_one = IMPLEMENTS#cst_pred_ty_Predicate
llvm::PatternMatch::is_power2 = IMPLEMENTS#cst_pred_ty_Predicate
llvm::PatternMatch::is_sign_bit = IMPLEMENTS#cst_pred_ty_Predicate
llvm::PatternMatch::m_AShr = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_AShr = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Add = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_Add = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_And = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_And = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Argument = T0EXTENDS#match<Opnd_t>
llvm::PatternMatch::m_BSwap = T0EXTENDS#match
llvm::PatternMatch::m_BinOp = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_BinOp = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_BitCast = T0EXTENDS#match<OpTy>
llvm::PatternMatch::m_Br = T0EXTENDS#match<Cond_t>
llvm::PatternMatch::m_Cmp = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_Cmp = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_CombineAnd = T0EXTENDS#match<LTy>
llvm::PatternMatch::m_CombineAnd = T1EXTENDS#match<RTy>
llvm::PatternMatch::m_CombineOr = T0EXTENDS#match<LTy>
llvm::PatternMatch::m_CombineOr = T1EXTENDS#match<RTy>
llvm::PatternMatch::m_Exact = T0EXTENDS#match<T>
llvm::PatternMatch::m_FAdd = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_FAdd = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_FCmp = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_FCmp = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_FDiv = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_FDiv = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_FMax = T0EXTENDS#match
llvm::PatternMatch::m_FMax = T1EXTENDS#match
llvm::PatternMatch::m_FMin = T0EXTENDS#match
llvm::PatternMatch::m_FMin = T1EXTENDS#match
llvm::PatternMatch::m_FMul = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_FMul = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_FNeg = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_FRem = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_FRem = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_FSub = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_FSub = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_ICmp = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_ICmp = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_IDiv = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_IDiv = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Intrinsic = T0EXTENDS#match
llvm::PatternMatch::m_Intrinsic = T1EXTENDS#match
llvm::PatternMatch::m_Intrinsic = T2EXTENDS#match
llvm::PatternMatch::m_Intrinsic = T3EXTENDS#match
llvm::PatternMatch::m_LShr = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_LShr = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_LogicalShift = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_LogicalShift = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Mul = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_Mul = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_NSWAdd = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_NSWAdd = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_NSWMul = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_NSWMul = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_NSWShl = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_NSWShl = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_NSWSub = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_NSWSub = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_NUWAdd = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_NUWAdd = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_NUWMul = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_NUWMul = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_NUWShl = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_NUWShl = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_NUWSub = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_NUWSub = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Neg = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_Not = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_OneUse = T0EXTENDS#match<T>
llvm::PatternMatch::m_Or = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_Or = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_OrdFMax = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_OrdFMax = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_OrdFMin = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_OrdFMin = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_PtrToInt = T0EXTENDS#match<OpTy>
llvm::PatternMatch::m_SDiv = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_SDiv = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_SExt = T0EXTENDS#match<OpTy>
llvm::PatternMatch::m_SIToFP = T0EXTENDS#match<OpTy>
llvm::PatternMatch::m_SMax = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_SMax = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_SMin = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_SMin = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_SRem = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_SRem = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Select = T0EXTENDS#match<Cond>
llvm::PatternMatch::m_Select = T1EXTENDS#match<LHS>
llvm::PatternMatch::m_Select = T2EXTENDS#match<RHS>
llvm::PatternMatch::m_SelectCst = T0EXTENDS#match<Cond>
llvm::PatternMatch::m_Shl = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_Shl = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Shr = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_Shr = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Signum = T0EXTENDS#match<Val_t>
llvm::PatternMatch::m_Sub = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_Sub = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Trunc = T0EXTENDS#match<OpTy>
llvm::PatternMatch::m_UAddWithOverflow = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::m_UAddWithOverflow = T1EXTENDS#match<RHS_t>
llvm::PatternMatch::m_UAddWithOverflow = T3EXTENDS#match<Sum_t>
llvm::PatternMatch::m_UDiv = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_UDiv = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_UIToFP = T0EXTENDS#match<OpTy>
llvm::PatternMatch::m_UMax = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_UMax = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_UMin = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_UMin = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_URem = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_URem = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_UnordFMax = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_UnordFMax = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_UnordFMin = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_UnordFMin = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_Xor = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_Xor = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_ZExt = T0EXTENDS#match<OpTy>
llvm::PatternMatch::m_c_And = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_c_And = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_c_ICmp = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_c_ICmp = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_c_Or = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_c_Or = T1EXTENDS#match<RHS>
llvm::PatternMatch::m_c_Xor = T0EXTENDS#match<LHS>
llvm::PatternMatch::m_c_Xor = T1EXTENDS#match<RHS>
llvm::PatternMatch::match = T0EXTENDS#Value
llvm::PatternMatch::match = T1EXTENDS#match
llvm::PatternMatch::match_combine_and = T0EXTENDS#match<LTy>
llvm::PatternMatch::match_combine_and = T1EXTENDS#match<RTy>
llvm::PatternMatch::match_combine_and = IMPLEMENTS#match<match_combine_and>
llvm::PatternMatch::match_combine_and = FILE#./extra_members/match_combine_andExtraMembers.java
llvm::PatternMatch::match_combine_and::match = T0EXTENDS#Value
llvm::PatternMatch::match_combine_or = T0EXTENDS#match<LTy>
llvm::PatternMatch::match_combine_or = T1EXTENDS#match<RTy>
llvm::PatternMatch::match_combine_or = IMPLEMENTS#match<match_combine_or>
llvm::PatternMatch::match_combine_or = FILE#./extra_members/match_combine_orExtraMembers.java
llvm::PatternMatch::match_combine_or::match = T0EXTENDS#Value
llvm::PatternMatch::match_neg_zero = FILE#./extra_members/match_neg_zeroExtraMembers.java
llvm::PatternMatch::match_neg_zero = IMPLEMENTS#match<match_neg_zero>
llvm::PatternMatch::match_neg_zero::match = T0EXTENDS#Value
llvm::PatternMatch::match_zero = FILE#./extra_members/match_zeroExtraMembers.java
llvm::PatternMatch::match_zero = IMPLEMENTS#match<match_zero>
llvm::PatternMatch::match_zero::match = T0EXTENDS#Value
llvm::PatternMatch::neg_match = IMPLEMENTS#match<neg_match>
llvm::PatternMatch::neg_match = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::neg_match = FILE#./extra_members/neg_matchExtraMembers.java
llvm::PatternMatch::neg_match::match = T0EXTENDS#Value
llvm::PatternMatch::not_match = IMPLEMENTS#match<not_match>
llvm::PatternMatch::not_match = T0EXTENDS#match<LHS_t>
llvm::PatternMatch::not_match = FILE#./extra_members/not_matchExtraMembers.java
llvm::PatternMatch::not_match::match = T0EXTENDS#Value
llvm::PatternMatch::ofmax_pred_ty = IMPLEMENTS#match_pred
llvm::PatternMatch::ofmin_pred_ty = IMPLEMENTS#match_pred
llvm::PatternMatch::smax_pred_ty = IMPLEMENTS#match_pred
llvm::PatternMatch::smin_pred_ty = IMPLEMENTS#match_pred
llvm::PatternMatch::specific_fpval = FILE#./extra_members/specific_fpvalExtraMembers.java
llvm::PatternMatch::specific_fpval = IMPLEMENTS#match<specific_fpval>
llvm::PatternMatch::specific_fpval::match = T0EXTENDS#Value
llvm::PatternMatch::specific_intval = IMPLEMENTS#match<specific_intval>
llvm::PatternMatch::specific_intval = FILE#./extra_members/specific_intvalExtraMembers.java
llvm::PatternMatch::specific_intval::match = T0EXTENDS#Value
llvm::PatternMatch::specificval_ty = FILE#./extra_members/specificval_tyExtraMembers.java
llvm::PatternMatch::specificval_ty = IMPLEMENTS#match<specificval_ty>
llvm::PatternMatch::specificval_ty::match = T0EXTENDS#Value
llvm::PatternMatch::ufmax_pred_ty = IMPLEMENTS#match_pred
llvm::PatternMatch::ufmin_pred_ty = IMPLEMENTS#match_pred
llvm::PatternMatch::umax_pred_ty = IMPLEMENTS#match_pred
llvm::PatternMatch::umin_pred_ty = IMPLEMENTS#match_pred
llvm::PointerAlignElem = FILE#./extra_members/PointerAlignElemExtraMembers.java
llvm::PointerAlignElem = IMPLEMENTS#NativePOD<PointerAlignElem>
llvm::PossiblyExactOperator = TEXT#public PossiblyExactOperator(Type ty, int vty, type$ptr<Use> $Prm2, int NumOps) { super(ty, vty, $Prm2, NumOps); }
llvm::PossiblyExactOperator = TEXT#public PossiblyExactOperator() { /*for descendants deleted ctors*/ }
llvm::PredIterator = FILE#./extra_members/PredIteratorExtraMembers.java
llvm::PredIterator = IMPLEMENTS#type$iterator<PredIterator, Ptr>
llvm::PredIterator = T0EXTENDS#Value
llvm::PredIterator = T1EXTENDS#Value.user_iterator_impl<User>
llvm::PrintFunctionPass = IMPLEMENTS#IPass<PreservedAnalyses, Function>
llvm::PtrToIntOperator = FILE#./extra_members/PtrToIntOperatorExtraMembers.java
llvm::RequireAnalysisPass = T0EXTENDS#AnalysisInfoMixin<AnalysisT>
llvm::RequireAnalysisPass = FILE#./extra_members/RequireAnalysisPassExtraMembers.java
llvm::SDivOperator = FILE#./extra_members/SDivOperatorExtraMembers.java

llvm::SequentialType = FILE#./extra_members/SequentialTypeExtraMembers.java
llvm::ShlOperator = FILE#./extra_members/ShlOperatorExtraMembers.java
llvm::StatepointBase = FILE#./extra_members/StatepointBaseExtraMembers.java
llvm::StatepointBase = T1EXTENDS#Instruction
llvm::StatepointBase = T3EXTENDS#CallSiteBase
llvm::StructLayout = TEXT#private final type$ptr $this;
llvm::SubOperator = FILE#./extra_members/SubOperatorExtraMembers.java

llvm::SwitchInst::CaseIteratorT = FILE#./extra_members/CaseIteratorTExtraMembers.java
llvm::SwitchInst::CaseIteratorT = T0EXTENDS#SwitchInst
llvm::SwitchInst::CaseIteratorT = T1EXTENDS#Value
llvm::SwitchInst::CaseIteratorT = T2EXTENDS#BasicBlock
llvm::SwitchInst::CaseIteratorT = IMPLEMENTS#type$iterator<CaseIteratorT, CaseIteratorT>

llvm::SwitchInst::CaseIteratorT::fromSuccessorIndex = T0EXTENDS#SwitchInst
llvm::SwitchInst::CaseIteratorT::fromSuccessorIndex = T1EXTENDS#Value
llvm::SwitchInst::CaseIteratorT::fromSuccessorIndex = T2EXTENDS#BasicBlock

llvm::SymbolTableListSentinelTraits = T0EXTENDS#extends ilist_node<NodeTy>
llvm::SymbolTableListSentinelTraits<Argument> = IMPLEMENTS#SymbolTableListTraits<Argument, Function>
llvm::SymbolTableListSentinelTraits<Argument> = FILE#./extra_members/SymbolTableListSentinelTraitsArgumentExtraMembers.java
llvm::SymbolTableListSentinelTraits<BasicBlock> = IMPLEMENTS#SymbolTableListTraits<BasicBlock, Function>
llvm::SymbolTableListSentinelTraits<BasicBlock> = FILE#./extra_members/SymbolTableListSentinelTraitsBasicBlockExtraMembers.java
llvm::SymbolTableListSentinelTraits<Instruction> = FILE#./extra_members/SymbolTableListSentinelTraitsInstructionExtraMembers.java
llvm::SymbolTableListSentinelTraits<Instruction> = IMPLEMENTS#SymbolTableListTraits<Instruction, BasicBlock>

llvm::SymbolTableListTraits<llvm::Function> = FILE#./extra_members/SymbolTableListTraits$FunctionExtraMembers.java
llvm::SymbolTableListTraits<llvm::GlobalVariable> = FILE#./extra_members/SymbolTableListTraits$GlobalVariableExtraMembers.java
llvm::SymbolTableListTraits<llvm::GlobalAlias> = FILE#./extra_members/SymbolTableListTraits$GlobalAliasExtraMembers.java
llvm::SymbolTableListTraits<llvm::GlobalIFunc> = FILE#./extra_members/SymbolTableListTraits$GlobalIFuncExtraMembers.java
llvm::SymbolTableListTraits = TEXT#Class<ValueSubClass> $getValueSubClass();
llvm::SymbolTableListTraits = T0EXTENDS#Value & ilist_node<ValueSubClass> & IChild<ItemParentClass>
llvm::SymbolTableListTraits = T1EXTENDS#IValueSymbolTableProvider
llvm::SymbolTableListTraits<GlobalVariable> = FILE#./extra_members/SymbolTableListTraits$GlobalVariableExtraMembers.java
llvm::SymbolTableListTraits<GlobalIFunc> = FILE#./extra_members/SymbolTableListTraits$GlobalIFuncExtraMembers.java
llvm::SymbolTableListTraits<GlobalAlias> = FILE#./extra_members/SymbolTableListTraits$GlobalAliasExtraMembers.java
llvm::SymbolTableListTraits<Function> = FILE#./extra_members/SymbolTableListTraits$FunctionExtraMembers.java
llvm::SymbolTableListTraits<Argument> = FILE#./extra_members/SymbolTableListTraits$ArgumentExtraMembers.java
llvm::SymbolTableListTraits<BasicBlock> = FILE#./extra_members/SymbolTableListTraits$BasicBlockExtraMembers.java
llvm::SymbolTableListTraits<Instruction> = FILE#./extra_members/SymbolTableListTraits$InstructionExtraMembers.java

llvm::TerminatorInst::SuccIterator = IMPLEMENTS#type$iterator<SuccIterator, BB>
llvm::TerminatorInst::SuccIterator = FILE#./extra_members/SuccIteratorExtraMembers.java
llvm::TerminatorInst::SuccIterator = T0EXTENDS#TerminatorInst
llvm::TerminatorInst::SuccIterator = T1EXTENDS#BasicBlock

llvm::TrackingMDRef = IMPLEMENTS#NativePOD<TrackingMDRef>
llvm::TrackingMDRef = FILE#./extra_members/TrackingMDRefExtraMembers.java

llvm::TrackingVH = IMPLEMENTS#Native.assignable<TrackingVH>
llvm::TrackingVH = FILE#./extra_members/TrackingVHExtraMembers.java
llvm::TrackingVH = T0EXTENDS#Value
llvm::Type = FILE#./extra_members/TypeExtraMembers.java
llvm::Type = IMPLEMENTS#LLVMOpaqueType
llvm::TypeFinder=IMPLEMENTS#Iterable<StructType /*P*/>
llvm::TypeFinder = FILE#./extra_members/TypeFinderExtraMembers.java
llvm::TypedDINodeRef = FILE#./extra_members/TypedDINodeRefExtraMembers.java
llvm::TypedMDOperandIterator = FILE#./extra_members/TypedMDOperandIteratorExtraMembers.java
llvm::TypedMDOperandIterator = IMPLEMENTS#type$iterator<TypedMDOperandIterator<T>, T>
llvm::TypedTrackingMDRef = IMPLEMENTS#NativePOD<TypedTrackingMDRef<T>>
llvm::TypedTrackingMDRef = IMPLEMENTS#NativeMoveable<TypedTrackingMDRef<T>>
llvm::TypedTrackingMDRef = FILE#./extra_members/TypedTrackingMDRefExtraMembers.java
llvm::UDivOperator = FILE#./extra_members/UDivOperatorExtraMembers.java
llvm::Use = IMPLEMENTS#LLVMOpaqueUse
llvm::Use = FILE#./extra_members/UseExtraMembers.java
llvm::UseListOrder = IMPLEMENTS#NativeMoveable<UseListOrder>
llvm::UseListOrder = FILE#./extra_members/UseListOrderExtraMembers.java
llvm::User = FILE#./extra_members/UserExtraMembers.java
llvm::User = IMPLEMENTS#IUser
llvm::User::value_op_iterator = FILE#./extra_members/value_op_iteratorExtraMembers.java
llvm::Value = FILE#./extra_members/ValueExtraMembers.java
llvm::Value = IMPLEMENTS#LLVMOpaqueValue
llvm::Value::use_iterator_impl = IMPLEMENTS#type$iterator<use_iterator_impl<UseT>, UseT>
llvm::Value::use_iterator_impl = FILE#./extra_members/use_iterator_implExtraMembers.java
llvm::Value::use_iterator_impl = T0EXTENDS#Use
llvm::Value::user_iterator_impl = IMPLEMENTS#type$iterator<user_iterator_impl<UserTy>, UserTy>
llvm::Value::user_iterator_impl = FILE#./extra_members/user_iterator_implExtraMembers.java
llvm::Value::user_iterator_impl = T0EXTENDS#User
llvm::ValueHandleBase = IMPLEMENTS#NativeCloneable<ValueHandleBase>
llvm::ValueHandleBase = IMPLEMENTS#NativeMoveable<ValueHandleBase>
llvm::ValueHandleBase = FILE#./extra_members/ValueHandleBaseExtraMembers.java
llvm::ValueMap = FILE#./extra_members/ValueMapExtraMembers.java
llvm::ValueMapCallbackVH = IMPLEMENTS#Unwrap<KeyT>
llvm::ValueMapCallbackVH = FILE#./extra_members/ValueMapCallbackVHExtraMembers.java
llvm::ValueMapConfig = FILE#./extra_members/ValueMapConfigExtraMembers.java
llvm::ValueMapConstIterator = T0EXTENDS#DenseMap<?,?>
llvm::ValueMapConstIterator::ValueTypeProxy = FILE#./extra_members/ValueTypeProxyExtraMembers.java
llvm::ValueMapIterator = T0EXTENDS#DenseMap<?,?>
llvm::ValueMapIterator::ValueTypeProxy = FILE#./extra_members/ValueTypeProxyExtraMembers.java
llvm::ValueSymbolTable = IMPLEMENTS#Iterable<StringMapEntry<Value /*P*/ >>
llvm::ValueSymbolTable = TEXT#@Override public Iterator<StringMapEntry<Value /*P*/ >> iterator() { return new JavaIterator<StringMapEntry<Value /*P*/ >>(begin(), end()); }
llvm::VariadicOperandTraits = FILE#./extra_members/VariadicOperandTraitsExtraMembers.java
llvm::VectorType = FILE#./extra_members/VectorTypeExtraMembers.java
llvm::VerifierAnalysis::Result = TEXT#public Result(boolean IRBroken, boolean DebugInfoBroken) { this.IRBroken $EQ IRBroken; this.DebugInfoBroken $EQ DebugInfoBroken; }
llvm::VerifierPass = IMPLEMENTS#IPassModule<PreservedAnalyses>, IPassFunction<PreservedAnalyses>
llvm::WeakVH = IMPLEMENTS#Native.assignable<WeakVH>
llvm::WeakVH = TEXT#@Override public WeakVH clone() { return new WeakVH(this); }
llvm::ZExtOperator = FILE#./extra_members/ZExtOperatorExtraMembers.java
llvm::createModuleToFunctionPassAdaptor = T0EXTENDS#IPassFunction<PreservedAnalyses>
llvm::detail::AnalysisManagerBase = FILE#./extra_members/AnalysisManagerBaseExtraMembers.java
llvm::detail::AnalysisPassConcept = IMPLEMENTS#NativeSwappable
llvm::detail::AnalysisPassModel = FILE#./extra_members/AnalysisPassModelExtraMembers.java
llvm::detail::AnalysisPassModel = T1EXTENDS#IPass<AnalysisResultConcept<IRUnitT>, IRUnitT>
llvm::detail::AnalysisResultConcept = IMPLEMENTS#NativeSwappable
llvm::detail::AnalysisResultModel<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3, true> = FILE#./extra_members/AnalysisResultModelTT1T2T3TrueExtraMembers.java
llvm::detail::AnalysisResultModel<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3, false> = FILE#./extra_members/AnalysisResultModelTT1T2T3FalseExtraMembers.java
llvm::detail::PassModel = T2EXTENDS#PreservedAnalyses
llvm::detail::PassModel = T1EXTENDS#IPass<PreservedAnalysesT, IRUnitT>
llvm::detail::ResultHasInvalidateMethod = FILE#./extra_members/ResultHasInvalidateMethodExtraMembers.java
llvm::generic_gep_type_iterator = IMPLEMENTS#type$iterator<generic_gep_type_iterator, Type>
llvm::generic_gep_type_iterator = FILE#./extra_members/generic_gep_type_iteratorExtraMembers.java
llvm::legacy::FunctionPassManagerImpl = TEXT#public static final /*char*/Class<FunctionPassManagerImpl> ID $EQ org.llvm.ir.legacy.impl.FunctionPassManagerImpl.class;
llvm::legacy::PassManager = IMPLEMENTS#LLVMOpaquePassManager
llvm::legacy::PassManagerImpl = TEXT#public static final/*char*/Class<PassManagerImpl> ID $EQ org.llvm.ir.legacy.impl.PassManagerImpl.class;
llvm::mdconst::dyn_extract = T0EXTENDS#Constant
llvm::mdconst::dyn_extract = T1EXTENDS#GetMetadata
llvm::mdconst::dyn_extract_or_null = T0EXTENDS#Constant
llvm::mdconst::dyn_extract_or_null = T1EXTENDS#GetMetadata
llvm::mdconst::extract = T0EXTENDS#Constant
llvm::mdconst::extract = T1EXTENDS#GetMetadata
llvm::mdconst::extract_or_null = T0EXTENDS#Constant
llvm::mdconst::extract_or_null = T1EXTENDS#GetMetadata
llvm::mdconst::hasa = T0EXTENDS#Constant
llvm::mdconst::hasa = T1EXTENDS#GetMetadata
llvm::swap = T0EXTENDS#IPassFunction<PreservedAnalyses>
org.llvm.pass.impl.InitializePassesLlvmGlobals = FILE#./extra_members/InitializePassesLlvmGlobalsExtraMembers.java
setAND = T0EXTENDS#StrBoolAttr
setOR = T0EXTENDS#StrBoolAttr
